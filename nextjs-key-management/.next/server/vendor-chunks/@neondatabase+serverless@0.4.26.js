"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@neondatabase+serverless@0.4.26";
exports.ids = ["vendor-chunks/@neondatabase+serverless@0.4.26"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@neondatabase+serverless@0.4.26/node_modules/@neondatabase/serverless/index.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@neondatabase+serverless@0.4.26/node_modules/@neondatabase/serverless/index.js ***!
  \***********************************************************************************************************/
/***/ ((module) => {

eval("\nvar co = Object.create;\nvar ke = Object.defineProperty;\nvar ho = Object.getOwnPropertyDescriptor;\nvar lo = Object.getOwnPropertyNames;\nvar fo = Object.getPrototypeOf, po = Object.prototype.hasOwnProperty;\nvar yo = (r, e, t)=>e in r ? ke(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t;\nvar o = (r, e)=>ke(r, \"name\", {\n        value: e,\n        configurable: !0\n    });\nvar ie = (r, e)=>()=>(r && (e = r(r = 0)), e);\nvar L = (r, e)=>()=>(e || r((e = {\n            exports: {}\n        }).exports, e), e.exports), ye = (r, e)=>{\n    for(var t in e)ke(r, t, {\n        get: e[t],\n        enumerable: !0\n    });\n}, yi = (r, e, t, n)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let i of lo(e))!po.call(r, i) && i !== t && ke(r, i, {\n        get: ()=>e[i],\n        enumerable: !(n = ho(e, i)) || n.enumerable\n    });\n    return r;\n};\nvar et = (r, e, t)=>(t = r != null ? co(fo(r)) : {}, yi(e || !r || !r.__esModule ? ke(t, \"default\", {\n        value: r,\n        enumerable: !0\n    }) : t, r)), Z = (r)=>yi(ke({}, \"__esModule\", {\n        value: !0\n    }), r);\nvar g = (r, e, t)=>(yo(r, typeof e != \"symbol\" ? e + \"\" : e, t), t);\nvar gi = L((Tt)=>{\n    \"use strict\";\n    p();\n    Tt.byteLength = mo;\n    Tt.toByteArray = So;\n    Tt.fromByteArray = Ao;\n    var be = [], we = [], wo = typeof Uint8Array < \"u\" ? Uint8Array : Array, sr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(Pe = 0, wi = sr.length; Pe < wi; ++Pe)be[Pe] = sr[Pe], we[sr.charCodeAt(Pe)] = Pe;\n    var Pe, wi;\n    we[\"-\".charCodeAt(0)] = 62;\n    we[\"_\".charCodeAt(0)] = 63;\n    function mi(r) {\n        var e = r.length;\n        if (e % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        var t = r.indexOf(\"=\");\n        t === -1 && (t = e);\n        var n = t === e ? 0 : 4 - t % 4;\n        return [\n            t,\n            n\n        ];\n    }\n    o(mi, \"getLens\");\n    function mo(r) {\n        var e = mi(r), t = e[0], n = e[1];\n        return (t + n) * 3 / 4 - n;\n    }\n    o(mo, \"byteLength\");\n    function go(r, e, t) {\n        return (e + t) * 3 / 4 - t;\n    }\n    o(go, \"_byteLength\");\n    function So(r) {\n        var e, t = mi(r), n = t[0], i = t[1], s = new wo(go(r, n, i)), a = 0, u = i > 0 ? n - 4 : n, c;\n        for(c = 0; c < u; c += 4)e = we[r.charCodeAt(c)] << 18 | we[r.charCodeAt(c + 1)] << 12 | we[r.charCodeAt(c + 2)] << 6 | we[r.charCodeAt(c + 3)], s[a++] = e >> 16 & 255, s[a++] = e >> 8 & 255, s[a++] = e & 255;\n        return i === 2 && (e = we[r.charCodeAt(c)] << 2 | we[r.charCodeAt(c + 1)] >> 4, s[a++] = e & 255), i === 1 && (e = we[r.charCodeAt(c)] << 10 | we[r.charCodeAt(c + 1)] << 4 | we[r.charCodeAt(c + 2)] >> 2, s[a++] = e >> 8 & 255, s[a++] = e & 255), s;\n    }\n    o(So, \"toByteArray\");\n    function bo(r) {\n        return be[r >> 18 & 63] + be[r >> 12 & 63] + be[r >> 6 & 63] + be[r & 63];\n    }\n    o(bo, \"tripletToBase64\");\n    function xo(r, e, t) {\n        for(var n, i = [], s = e; s < t; s += 3)n = (r[s] << 16 & 16711680) + (r[s + 1] << 8 & 65280) + (r[s + 2] & 255), i.push(bo(n));\n        return i.join(\"\");\n    }\n    o(xo, \"encodeChunk\");\n    function Ao(r) {\n        for(var e, t = r.length, n = t % 3, i = [], s = 16383, a = 0, u = t - n; a < u; a += s)i.push(xo(r, a, a + s > u ? u : a + s));\n        return n === 1 ? (e = r[t - 1], i.push(be[e >> 2] + be[e << 4 & 63] + \"==\")) : n === 2 && (e = (r[t - 2] << 8) + r[t - 1], i.push(be[e >> 10] + be[e >> 4 & 63] + be[e << 2 & 63] + \"=\")), i.join(\"\");\n    }\n    o(Ao, \"fromByteArray\");\n});\nvar Si = L((ar)=>{\n    p();\n    ar.read = function(r, e, t, n, i) {\n        var s, a, u = i * 8 - n - 1, c = (1 << u) - 1, h = c >> 1, l = -7, f = t ? i - 1 : 0, m = t ? -1 : 1, x = r[e + f];\n        for(f += m, s = x & (1 << -l) - 1, x >>= -l, l += u; l > 0; s = s * 256 + r[e + f], f += m, l -= 8);\n        for(a = s & (1 << -l) - 1, s >>= -l, l += n; l > 0; a = a * 256 + r[e + f], f += m, l -= 8);\n        if (s === 0) s = 1 - h;\n        else {\n            if (s === c) return a ? NaN : (x ? -1 : 1) * (1 / 0);\n            a = a + Math.pow(2, n), s = s - h;\n        }\n        return (x ? -1 : 1) * a * Math.pow(2, s - n);\n    };\n    ar.write = function(r, e, t, n, i, s) {\n        var a, u, c, h = s * 8 - i - 1, l = (1 << h) - 1, f = l >> 1, m = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, x = n ? 0 : s - 1, C = n ? 1 : -1, I = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;\n        for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (u = isNaN(e) ? 1 : 0, a = l) : (a = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -a)) < 1 && (a--, c *= 2), a + f >= 1 ? e += m / c : e += m * Math.pow(2, 1 - f), e * c >= 2 && (a++, c /= 2), a + f >= l ? (u = 0, a = l) : a + f >= 1 ? (u = (e * c - 1) * Math.pow(2, i), a = a + f) : (u = e * Math.pow(2, f - 1) * Math.pow(2, i), a = 0)); i >= 8; r[t + x] = u & 255, x += C, u /= 256, i -= 8);\n        for(a = a << i | u, h += i; h > 0; r[t + x] = a & 255, x += C, a /= 256, h -= 8);\n        r[t + x - C] |= I * 128;\n    };\n});\nvar ki = L((Oe)=>{\n    \"use strict\";\n    p();\n    var or = gi(), De = Si(), bi = typeof Symbol == \"function\" && typeof Symbol.for == \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null;\n    Oe.Buffer = d;\n    Oe.SlowBuffer = Io;\n    Oe.INSPECT_MAX_BYTES = 50;\n    var Bt = 2147483647;\n    Oe.kMaxLength = Bt;\n    d.TYPED_ARRAY_SUPPORT = vo();\n    !d.TYPED_ARRAY_SUPPORT && typeof console < \"u\" && typeof console.error == \"function\" && console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n    function vo() {\n        try {\n            let r = new Uint8Array(1), e = {\n                foo: function() {\n                    return 42;\n                }\n            };\n            return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(r, e), r.foo() === 42;\n        } catch  {\n            return !1;\n        }\n    }\n    o(vo, \"typedArraySupport\");\n    Object.defineProperty(d.prototype, \"parent\", {\n        enumerable: !0,\n        get: function() {\n            if (d.isBuffer(this)) return this.buffer;\n        }\n    });\n    Object.defineProperty(d.prototype, \"offset\", {\n        enumerable: !0,\n        get: function() {\n            if (d.isBuffer(this)) return this.byteOffset;\n        }\n    });\n    function Ee(r) {\n        if (r > Bt) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n        let e = new Uint8Array(r);\n        return Object.setPrototypeOf(e, d.prototype), e;\n    }\n    o(Ee, \"createBuffer\");\n    function d(r, e, t) {\n        if (typeof r == \"number\") {\n            if (typeof e == \"string\") throw new TypeError('The \"string\" argument must be of type string. Received type number');\n            return lr(r);\n        }\n        return Ei(r, e, t);\n    }\n    o(d, \"Buffer\");\n    d.poolSize = 8192;\n    function Ei(r, e, t) {\n        if (typeof r == \"string\") return Co(r, e);\n        if (ArrayBuffer.isView(r)) return _o(r);\n        if (r == null) throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n        if (xe(r, ArrayBuffer) || r && xe(r.buffer, ArrayBuffer) || typeof SharedArrayBuffer < \"u\" && (xe(r, SharedArrayBuffer) || r && xe(r.buffer, SharedArrayBuffer))) return cr(r, e, t);\n        if (typeof r == \"number\") throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n        let n = r.valueOf && r.valueOf();\n        if (n != null && n !== r) return d.from(n, e, t);\n        let i = Uo(r);\n        if (i) return i;\n        if (typeof Symbol < \"u\" && Symbol.toPrimitive != null && typeof r[Symbol.toPrimitive] == \"function\") return d.from(r[Symbol.toPrimitive](\"string\"), e, t);\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n    }\n    o(Ei, \"from\");\n    d.from = function(r, e, t) {\n        return Ei(r, e, t);\n    };\n    Object.setPrototypeOf(d.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(d, Uint8Array);\n    function Ci(r) {\n        if (typeof r != \"number\") throw new TypeError('\"size\" argument must be of type number');\n        if (r < 0) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n    }\n    o(Ci, \"assertSize\");\n    function Eo(r, e, t) {\n        return Ci(r), r <= 0 ? Ee(r) : e !== void 0 ? typeof t == \"string\" ? Ee(r).fill(e, t) : Ee(r).fill(e) : Ee(r);\n    }\n    o(Eo, \"alloc\");\n    d.alloc = function(r, e, t) {\n        return Eo(r, e, t);\n    };\n    function lr(r) {\n        return Ci(r), Ee(r < 0 ? 0 : fr(r) | 0);\n    }\n    o(lr, \"allocUnsafe\");\n    d.allocUnsafe = function(r) {\n        return lr(r);\n    };\n    d.allocUnsafeSlow = function(r) {\n        return lr(r);\n    };\n    function Co(r, e) {\n        if ((typeof e != \"string\" || e === \"\") && (e = \"utf8\"), !d.isEncoding(e)) throw new TypeError(\"Unknown encoding: \" + e);\n        let t = _i(r, e) | 0, n = Ee(t), i = n.write(r, e);\n        return i !== t && (n = n.slice(0, i)), n;\n    }\n    o(Co, \"fromString\");\n    function ur(r) {\n        let e = r.length < 0 ? 0 : fr(r.length) | 0, t = Ee(e);\n        for(let n = 0; n < e; n += 1)t[n] = r[n] & 255;\n        return t;\n    }\n    o(ur, \"fromArrayLike\");\n    function _o(r) {\n        if (xe(r, Uint8Array)) {\n            let e = new Uint8Array(r);\n            return cr(e.buffer, e.byteOffset, e.byteLength);\n        }\n        return ur(r);\n    }\n    o(_o, \"fromArrayView\");\n    function cr(r, e, t) {\n        if (e < 0 || r.byteLength < e) throw new RangeError('\"offset\" is outside of buffer bounds');\n        if (r.byteLength < e + (t || 0)) throw new RangeError('\"length\" is outside of buffer bounds');\n        let n;\n        return e === void 0 && t === void 0 ? n = new Uint8Array(r) : t === void 0 ? n = new Uint8Array(r, e) : n = new Uint8Array(r, e, t), Object.setPrototypeOf(n, d.prototype), n;\n    }\n    o(cr, \"fromArrayBuffer\");\n    function Uo(r) {\n        if (d.isBuffer(r)) {\n            let e = fr(r.length) | 0, t = Ee(e);\n            return t.length === 0 || r.copy(t, 0, 0, e), t;\n        }\n        if (r.length !== void 0) return typeof r.length != \"number\" || pr(r.length) ? Ee(0) : ur(r);\n        if (r.type === \"Buffer\" && Array.isArray(r.data)) return ur(r.data);\n    }\n    o(Uo, \"fromObject\");\n    function fr(r) {\n        if (r >= Bt) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + Bt.toString(16) + \" bytes\");\n        return r | 0;\n    }\n    o(fr, \"checked\");\n    function Io(r) {\n        return +r != r && (r = 0), d.alloc(+r);\n    }\n    o(Io, \"SlowBuffer\");\n    d.isBuffer = o(function(e) {\n        return e != null && e._isBuffer === !0 && e !== d.prototype;\n    }, \"isBuffer\");\n    d.compare = o(function(e, t) {\n        if (xe(e, Uint8Array) && (e = d.from(e, e.offset, e.byteLength)), xe(t, Uint8Array) && (t = d.from(t, t.offset, t.byteLength)), !d.isBuffer(e) || !d.isBuffer(t)) throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n        if (e === t) return 0;\n        let n = e.length, i = t.length;\n        for(let s = 0, a = Math.min(n, i); s < a; ++s)if (e[s] !== t[s]) {\n            n = e[s], i = t[s];\n            break;\n        }\n        return n < i ? -1 : i < n ? 1 : 0;\n    }, \"compare\");\n    d.isEncoding = o(function(e) {\n        switch(String(e).toLowerCase()){\n            case \"hex\":\n            case \"utf8\":\n            case \"utf-8\":\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n            case \"base64\":\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return !0;\n            default:\n                return !1;\n        }\n    }, \"isEncoding\");\n    d.concat = o(function(e, t) {\n        if (!Array.isArray(e)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        if (e.length === 0) return d.alloc(0);\n        let n;\n        if (t === void 0) for(t = 0, n = 0; n < e.length; ++n)t += e[n].length;\n        let i = d.allocUnsafe(t), s = 0;\n        for(n = 0; n < e.length; ++n){\n            let a = e[n];\n            if (xe(a, Uint8Array)) s + a.length > i.length ? (d.isBuffer(a) || (a = d.from(a)), a.copy(i, s)) : Uint8Array.prototype.set.call(i, a, s);\n            else if (d.isBuffer(a)) a.copy(i, s);\n            else throw new TypeError('\"list\" argument must be an Array of Buffers');\n            s += a.length;\n        }\n        return i;\n    }, \"concat\");\n    function _i(r, e) {\n        if (d.isBuffer(r)) return r.length;\n        if (ArrayBuffer.isView(r) || xe(r, ArrayBuffer)) return r.byteLength;\n        if (typeof r != \"string\") throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof r);\n        let t = r.length, n = arguments.length > 2 && arguments[2] === !0;\n        if (!n && t === 0) return 0;\n        let i = !1;\n        for(;;)switch(e){\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return t;\n            case \"utf8\":\n            case \"utf-8\":\n                return hr(r).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return t * 2;\n            case \"hex\":\n                return t >>> 1;\n            case \"base64\":\n                return Fi(r).length;\n            default:\n                if (i) return n ? -1 : hr(r).length;\n                e = (\"\" + e).toLowerCase(), i = !0;\n        }\n    }\n    o(_i, \"byteLength\");\n    d.byteLength = _i;\n    function Lo(r, e, t) {\n        let n = !1;\n        if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((t === void 0 || t > this.length) && (t = this.length), t <= 0) || (t >>>= 0, e >>>= 0, t <= e)) return \"\";\n        for(r || (r = \"utf8\");;)switch(r){\n            case \"hex\":\n                return qo(this, e, t);\n            case \"utf8\":\n            case \"utf-8\":\n                return Ii(this, e, t);\n            case \"ascii\":\n                return No(this, e, t);\n            case \"latin1\":\n            case \"binary\":\n                return Do(this, e, t);\n            case \"base64\":\n                return Fo(this, e, t);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Oo(this, e, t);\n            default:\n                if (n) throw new TypeError(\"Unknown encoding: \" + r);\n                r = (r + \"\").toLowerCase(), n = !0;\n        }\n    }\n    o(Lo, \"slowToString\");\n    d.prototype._isBuffer = !0;\n    function Re(r, e, t) {\n        let n = r[e];\n        r[e] = r[t], r[t] = n;\n    }\n    o(Re, \"swap\");\n    d.prototype.swap16 = o(function() {\n        let e = this.length;\n        if (e % 2 !== 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        for(let t = 0; t < e; t += 2)Re(this, t, t + 1);\n        return this;\n    }, \"swap16\");\n    d.prototype.swap32 = o(function() {\n        let e = this.length;\n        if (e % 4 !== 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        for(let t = 0; t < e; t += 4)Re(this, t, t + 3), Re(this, t + 1, t + 2);\n        return this;\n    }, \"swap32\");\n    d.prototype.swap64 = o(function() {\n        let e = this.length;\n        if (e % 8 !== 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        for(let t = 0; t < e; t += 8)Re(this, t, t + 7), Re(this, t + 1, t + 6), Re(this, t + 2, t + 5), Re(this, t + 3, t + 4);\n        return this;\n    }, \"swap64\");\n    d.prototype.toString = o(function() {\n        let e = this.length;\n        return e === 0 ? \"\" : arguments.length === 0 ? Ii(this, 0, e) : Lo.apply(this, arguments);\n    }, \"toString\");\n    d.prototype.toLocaleString = d.prototype.toString;\n    d.prototype.equals = o(function(e) {\n        if (!d.isBuffer(e)) throw new TypeError(\"Argument must be a Buffer\");\n        return this === e ? !0 : d.compare(this, e) === 0;\n    }, \"equals\");\n    d.prototype.inspect = o(function() {\n        let e = \"\", t = Oe.INSPECT_MAX_BYTES;\n        return e = this.toString(\"hex\", 0, t).replace(/(.{2})/g, \"$1 \").trim(), this.length > t && (e += \" ... \"), \"<Buffer \" + e + \">\";\n    }, \"inspect\");\n    bi && (d.prototype[bi] = d.prototype.inspect);\n    d.prototype.compare = o(function(e, t, n, i, s) {\n        if (xe(e, Uint8Array) && (e = d.from(e, e.offset, e.byteLength)), !d.isBuffer(e)) throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);\n        if (t === void 0 && (t = 0), n === void 0 && (n = e ? e.length : 0), i === void 0 && (i = 0), s === void 0 && (s = this.length), t < 0 || n > e.length || i < 0 || s > this.length) throw new RangeError(\"out of range index\");\n        if (i >= s && t >= n) return 0;\n        if (i >= s) return -1;\n        if (t >= n) return 1;\n        if (t >>>= 0, n >>>= 0, i >>>= 0, s >>>= 0, this === e) return 0;\n        let a = s - i, u = n - t, c = Math.min(a, u), h = this.slice(i, s), l = e.slice(t, n);\n        for(let f = 0; f < c; ++f)if (h[f] !== l[f]) {\n            a = h[f], u = l[f];\n            break;\n        }\n        return a < u ? -1 : u < a ? 1 : 0;\n    }, \"compare\");\n    function Ui(r, e, t, n, i) {\n        if (r.length === 0) return -1;\n        if (typeof t == \"string\" ? (n = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), t = +t, pr(t) && (t = i ? 0 : r.length - 1), t < 0 && (t = r.length + t), t >= r.length) {\n            if (i) return -1;\n            t = r.length - 1;\n        } else if (t < 0) if (i) t = 0;\n        else return -1;\n        if (typeof e == \"string\" && (e = d.from(e, n)), d.isBuffer(e)) return e.length === 0 ? -1 : xi(r, e, t, n, i);\n        if (typeof e == \"number\") return e = e & 255, typeof Uint8Array.prototype.indexOf == \"function\" ? i ? Uint8Array.prototype.indexOf.call(r, e, t) : Uint8Array.prototype.lastIndexOf.call(r, e, t) : xi(r, [\n            e\n        ], t, n, i);\n        throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    o(Ui, \"bidirectionalIndexOf\");\n    function xi(r, e, t, n, i) {\n        let s = 1, a = r.length, u = e.length;\n        if (n !== void 0 && (n = String(n).toLowerCase(), n === \"ucs2\" || n === \"ucs-2\" || n === \"utf16le\" || n === \"utf-16le\")) {\n            if (r.length < 2 || e.length < 2) return -1;\n            s = 2, a /= 2, u /= 2, t /= 2;\n        }\n        function c(l, f) {\n            return s === 1 ? l[f] : l.readUInt16BE(f * s);\n        }\n        o(c, \"read\");\n        let h;\n        if (i) {\n            let l = -1;\n            for(h = t; h < a; h++)if (c(r, h) === c(e, l === -1 ? 0 : h - l)) {\n                if (l === -1 && (l = h), h - l + 1 === u) return l * s;\n            } else l !== -1 && (h -= h - l), l = -1;\n        } else for(t + u > a && (t = a - u), h = t; h >= 0; h--){\n            let l = !0;\n            for(let f = 0; f < u; f++)if (c(r, h + f) !== c(e, f)) {\n                l = !1;\n                break;\n            }\n            if (l) return h;\n        }\n        return -1;\n    }\n    o(xi, \"arrayIndexOf\");\n    d.prototype.includes = o(function(e, t, n) {\n        return this.indexOf(e, t, n) !== -1;\n    }, \"includes\");\n    d.prototype.indexOf = o(function(e, t, n) {\n        return Ui(this, e, t, n, !0);\n    }, \"indexOf\");\n    d.prototype.lastIndexOf = o(function(e, t, n) {\n        return Ui(this, e, t, n, !1);\n    }, \"lastIndexOf\");\n    function To(r, e, t, n) {\n        t = Number(t) || 0;\n        let i = r.length - t;\n        n ? (n = Number(n), n > i && (n = i)) : n = i;\n        let s = e.length;\n        n > s / 2 && (n = s / 2);\n        let a;\n        for(a = 0; a < n; ++a){\n            let u = parseInt(e.substr(a * 2, 2), 16);\n            if (pr(u)) return a;\n            r[t + a] = u;\n        }\n        return a;\n    }\n    o(To, \"hexWrite\");\n    function Bo(r, e, t, n) {\n        return Pt(hr(e, r.length - t), r, t, n);\n    }\n    o(Bo, \"utf8Write\");\n    function Po(r, e, t, n) {\n        return Pt(Ko(e), r, t, n);\n    }\n    o(Po, \"asciiWrite\");\n    function Ro(r, e, t, n) {\n        return Pt(Fi(e), r, t, n);\n    }\n    o(Ro, \"base64Write\");\n    function Mo(r, e, t, n) {\n        return Pt($o(e, r.length - t), r, t, n);\n    }\n    o(Mo, \"ucs2Write\");\n    d.prototype.write = o(function(e, t, n, i) {\n        if (t === void 0) i = \"utf8\", n = this.length, t = 0;\n        else if (n === void 0 && typeof t == \"string\") i = t, n = this.length, t = 0;\n        else if (isFinite(t)) t = t >>> 0, isFinite(n) ? (n = n >>> 0, i === void 0 && (i = \"utf8\")) : (i = n, n = void 0);\n        else throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n        let s = this.length - t;\n        if ((n === void 0 || n > s) && (n = s), e.length > 0 && (n < 0 || t < 0) || t > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n        i || (i = \"utf8\");\n        let a = !1;\n        for(;;)switch(i){\n            case \"hex\":\n                return To(this, e, t, n);\n            case \"utf8\":\n            case \"utf-8\":\n                return Bo(this, e, t, n);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return Po(this, e, t, n);\n            case \"base64\":\n                return Ro(this, e, t, n);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Mo(this, e, t, n);\n            default:\n                if (a) throw new TypeError(\"Unknown encoding: \" + i);\n                i = (\"\" + i).toLowerCase(), a = !0;\n        }\n    }, \"write\");\n    d.prototype.toJSON = o(function() {\n        return {\n            type: \"Buffer\",\n            data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n    }, \"toJSON\");\n    function Fo(r, e, t) {\n        return e === 0 && t === r.length ? or.fromByteArray(r) : or.fromByteArray(r.slice(e, t));\n    }\n    o(Fo, \"base64Slice\");\n    function Ii(r, e, t) {\n        t = Math.min(r.length, t);\n        let n = [], i = e;\n        for(; i < t;){\n            let s = r[i], a = null, u = s > 239 ? 4 : s > 223 ? 3 : s > 191 ? 2 : 1;\n            if (i + u <= t) {\n                let c, h, l, f;\n                switch(u){\n                    case 1:\n                        s < 128 && (a = s);\n                        break;\n                    case 2:\n                        c = r[i + 1], (c & 192) === 128 && (f = (s & 31) << 6 | c & 63, f > 127 && (a = f));\n                        break;\n                    case 3:\n                        c = r[i + 1], h = r[i + 2], (c & 192) === 128 && (h & 192) === 128 && (f = (s & 15) << 12 | (c & 63) << 6 | h & 63, f > 2047 && (f < 55296 || f > 57343) && (a = f));\n                        break;\n                    case 4:\n                        c = r[i + 1], h = r[i + 2], l = r[i + 3], (c & 192) === 128 && (h & 192) === 128 && (l & 192) === 128 && (f = (s & 15) << 18 | (c & 63) << 12 | (h & 63) << 6 | l & 63, f > 65535 && f < 1114112 && (a = f));\n                }\n            }\n            a === null ? (a = 65533, u = 1) : a > 65535 && (a -= 65536, n.push(a >>> 10 & 1023 | 55296), a = 56320 | a & 1023), n.push(a), i += u;\n        }\n        return ko(n);\n    }\n    o(Ii, \"utf8Slice\");\n    var Ai = 4096;\n    function ko(r) {\n        let e = r.length;\n        if (e <= Ai) return String.fromCharCode.apply(String, r);\n        let t = \"\", n = 0;\n        for(; n < e;)t += String.fromCharCode.apply(String, r.slice(n, n += Ai));\n        return t;\n    }\n    o(ko, \"decodeCodePointsArray\");\n    function No(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i] & 127);\n        return n;\n    }\n    o(No, \"asciiSlice\");\n    function Do(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i]);\n        return n;\n    }\n    o(Do, \"latin1Slice\");\n    function qo(r, e, t) {\n        let n = r.length;\n        (!e || e < 0) && (e = 0), (!t || t < 0 || t > n) && (t = n);\n        let i = \"\";\n        for(let s = e; s < t; ++s)i += Wo[r[s]];\n        return i;\n    }\n    o(qo, \"hexSlice\");\n    function Oo(r, e, t) {\n        let n = r.slice(e, t), i = \"\";\n        for(let s = 0; s < n.length - 1; s += 2)i += String.fromCharCode(n[s] + n[s + 1] * 256);\n        return i;\n    }\n    o(Oo, \"utf16leSlice\");\n    d.prototype.slice = o(function(e, t) {\n        let n = this.length;\n        e = ~~e, t = t === void 0 ? n : ~~t, e < 0 ? (e += n, e < 0 && (e = 0)) : e > n && (e = n), t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), t < e && (t = e);\n        let i = this.subarray(e, t);\n        return Object.setPrototypeOf(i, d.prototype), i;\n    }, \"slice\");\n    function te(r, e, t) {\n        if (r % 1 !== 0 || r < 0) throw new RangeError(\"offset is not uint\");\n        if (r + e > t) throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    o(te, \"checkOffset\");\n    d.prototype.readUintLE = d.prototype.readUIntLE = o(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || te(e, t, this.length);\n        let i = this[e], s = 1, a = 0;\n        for(; ++a < t && (s *= 256);)i += this[e + a] * s;\n        return i;\n    }, \"readUIntLE\");\n    d.prototype.readUintBE = d.prototype.readUIntBE = o(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || te(e, t, this.length);\n        let i = this[e + --t], s = 1;\n        for(; t > 0 && (s *= 256);)i += this[e + --t] * s;\n        return i;\n    }, \"readUIntBE\");\n    d.prototype.readUint8 = d.prototype.readUInt8 = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 1, this.length), this[e];\n    }, \"readUInt8\");\n    d.prototype.readUint16LE = d.prototype.readUInt16LE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 2, this.length), this[e] | this[e + 1] << 8;\n    }, \"readUInt16LE\");\n    d.prototype.readUint16BE = d.prototype.readUInt16BE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 2, this.length), this[e] << 8 | this[e + 1];\n    }, \"readUInt16BE\");\n    d.prototype.readUint32LE = d.prototype.readUInt32LE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;\n    }, \"readUInt32LE\");\n    d.prototype.readUint32BE = d.prototype.readUInt32BE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n    }, \"readUInt32BE\");\n    d.prototype.readBigUInt64LE = _e(o(function(e) {\n        e = e >>> 0, qe(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && tt(e, this.length - 8);\n        let i = t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24, s = this[++e] + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + n * 2 ** 24;\n        return BigInt(i) + (BigInt(s) << BigInt(32));\n    }, \"readBigUInt64LE\"));\n    d.prototype.readBigUInt64BE = _e(o(function(e) {\n        e = e >>> 0, qe(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && tt(e, this.length - 8);\n        let i = t * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e], s = this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n;\n        return (BigInt(i) << BigInt(32)) + BigInt(s);\n    }, \"readBigUInt64BE\"));\n    d.prototype.readIntLE = o(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || te(e, t, this.length);\n        let i = this[e], s = 1, a = 0;\n        for(; ++a < t && (s *= 256);)i += this[e + a] * s;\n        return s *= 128, i >= s && (i -= Math.pow(2, 8 * t)), i;\n    }, \"readIntLE\");\n    d.prototype.readIntBE = o(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || te(e, t, this.length);\n        let i = t, s = 1, a = this[e + --i];\n        for(; i > 0 && (s *= 256);)a += this[e + --i] * s;\n        return s *= 128, a >= s && (a -= Math.pow(2, 8 * t)), a;\n    }, \"readIntBE\");\n    d.prototype.readInt8 = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];\n    }, \"readInt8\");\n    d.prototype.readInt16LE = o(function(e, t) {\n        e = e >>> 0, t || te(e, 2, this.length);\n        let n = this[e] | this[e + 1] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16LE\");\n    d.prototype.readInt16BE = o(function(e, t) {\n        e = e >>> 0, t || te(e, 2, this.length);\n        let n = this[e + 1] | this[e] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16BE\");\n    d.prototype.readInt32LE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n    }, \"readInt32LE\");\n    d.prototype.readInt32BE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n    }, \"readInt32BE\");\n    d.prototype.readBigInt64LE = _e(o(function(e) {\n        e = e >>> 0, qe(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && tt(e, this.length - 8);\n        let i = this[e + 4] + this[e + 5] * 2 ** 8 + this[e + 6] * 2 ** 16 + (n << 24);\n        return (BigInt(i) << BigInt(32)) + BigInt(t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24);\n    }, \"readBigInt64LE\"));\n    d.prototype.readBigInt64BE = _e(o(function(e) {\n        e = e >>> 0, qe(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && tt(e, this.length - 8);\n        let i = (t << 24) + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e];\n        return (BigInt(i) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n);\n    }, \"readBigInt64BE\"));\n    d.prototype.readFloatLE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 4, this.length), De.read(this, e, !0, 23, 4);\n    }, \"readFloatLE\");\n    d.prototype.readFloatBE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 4, this.length), De.read(this, e, !1, 23, 4);\n    }, \"readFloatBE\");\n    d.prototype.readDoubleLE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 8, this.length), De.read(this, e, !0, 52, 8);\n    }, \"readDoubleLE\");\n    d.prototype.readDoubleBE = o(function(e, t) {\n        return e = e >>> 0, t || te(e, 8, this.length), De.read(this, e, !1, 52, 8);\n    }, \"readDoubleBE\");\n    function le(r, e, t, n, i, s) {\n        if (!d.isBuffer(r)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (e > i || e < s) throw new RangeError('\"value\" argument is out of bounds');\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n    }\n    o(le, \"checkInt\");\n    d.prototype.writeUintLE = d.prototype.writeUIntLE = o(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            le(this, e, t, n, u, 0);\n        }\n        let s = 1, a = 0;\n        for(this[t] = e & 255; ++a < n && (s *= 256);)this[t + a] = e / s & 255;\n        return t + n;\n    }, \"writeUIntLE\");\n    d.prototype.writeUintBE = d.prototype.writeUIntBE = o(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            le(this, e, t, n, u, 0);\n        }\n        let s = n - 1, a = 1;\n        for(this[t + s] = e & 255; --s >= 0 && (a *= 256);)this[t + s] = e / a & 255;\n        return t + n;\n    }, \"writeUIntBE\");\n    d.prototype.writeUint8 = d.prototype.writeUInt8 = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 1, 255, 0), this[t] = e & 255, t + 1;\n    }, \"writeUInt8\");\n    d.prototype.writeUint16LE = d.prototype.writeUInt16LE = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 2, 65535, 0), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeUInt16LE\");\n    d.prototype.writeUint16BE = d.prototype.writeUInt16BE = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeUInt16BE\");\n    d.prototype.writeUint32LE = d.prototype.writeUInt32LE = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = e & 255, t + 4;\n    }, \"writeUInt32LE\");\n    d.prototype.writeUint32BE = d.prototype.writeUInt32BE = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeUInt32BE\");\n    function Li(r, e, t, n, i) {\n        Mi(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s;\n        let a = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t++] = a, a = a >> 8, r[t++] = a, a = a >> 8, r[t++] = a, a = a >> 8, r[t++] = a, t;\n    }\n    o(Li, \"wrtBigUInt64LE\");\n    function Ti(r, e, t, n, i) {\n        Mi(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t + 7] = s, s = s >> 8, r[t + 6] = s, s = s >> 8, r[t + 5] = s, s = s >> 8, r[t + 4] = s;\n        let a = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t + 3] = a, a = a >> 8, r[t + 2] = a, a = a >> 8, r[t + 1] = a, a = a >> 8, r[t] = a, t + 8;\n    }\n    o(Ti, \"wrtBigUInt64BE\");\n    d.prototype.writeBigUInt64LE = _e(o(function(e, t = 0) {\n        return Li(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64LE\"));\n    d.prototype.writeBigUInt64BE = _e(o(function(e, t = 0) {\n        return Ti(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64BE\"));\n    d.prototype.writeIntLE = o(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            le(this, e, t, n, c - 1, -c);\n        }\n        let s = 0, a = 1, u = 0;\n        for(this[t] = e & 255; ++s < n && (a *= 256);)e < 0 && u === 0 && this[t + s - 1] !== 0 && (u = 1), this[t + s] = (e / a >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntLE\");\n    d.prototype.writeIntBE = o(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            le(this, e, t, n, c - 1, -c);\n        }\n        let s = n - 1, a = 1, u = 0;\n        for(this[t + s] = e & 255; --s >= 0 && (a *= 256);)e < 0 && u === 0 && this[t + s + 1] !== 0 && (u = 1), this[t + s] = (e / a >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntBE\");\n    d.prototype.writeInt8 = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = e & 255, t + 1;\n    }, \"writeInt8\");\n    d.prototype.writeInt16LE = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 2, 32767, -32768), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeInt16LE\");\n    d.prototype.writeInt16BE = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeInt16BE\");\n    d.prototype.writeInt32LE = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 4, 2147483647, -2147483648), this[t] = e & 255, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;\n    }, \"writeInt32LE\");\n    d.prototype.writeInt32BE = o(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || le(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeInt32BE\");\n    d.prototype.writeBigInt64LE = _e(o(function(e, t = 0) {\n        return Li(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64LE\"));\n    d.prototype.writeBigInt64BE = _e(o(function(e, t = 0) {\n        return Ti(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64BE\"));\n    function Bi(r, e, t, n, i, s) {\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n        if (t < 0) throw new RangeError(\"Index out of range\");\n    }\n    o(Bi, \"checkIEEE754\");\n    function Pi(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Bi(r, e, t, 4, 34028234663852886e22, -34028234663852886e22), De.write(r, e, t, n, 23, 4), t + 4;\n    }\n    o(Pi, \"writeFloat\");\n    d.prototype.writeFloatLE = o(function(e, t, n) {\n        return Pi(this, e, t, !0, n);\n    }, \"writeFloatLE\");\n    d.prototype.writeFloatBE = o(function(e, t, n) {\n        return Pi(this, e, t, !1, n);\n    }, \"writeFloatBE\");\n    function Ri(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Bi(r, e, t, 8, 17976931348623157e292, -17976931348623157e292), De.write(r, e, t, n, 52, 8), t + 8;\n    }\n    o(Ri, \"writeDouble\");\n    d.prototype.writeDoubleLE = o(function(e, t, n) {\n        return Ri(this, e, t, !0, n);\n    }, \"writeDoubleLE\");\n    d.prototype.writeDoubleBE = o(function(e, t, n) {\n        return Ri(this, e, t, !1, n);\n    }, \"writeDoubleBE\");\n    d.prototype.copy = o(function(e, t, n, i) {\n        if (!d.isBuffer(e)) throw new TypeError(\"argument should be a Buffer\");\n        if (n || (n = 0), !i && i !== 0 && (i = this.length), t >= e.length && (t = e.length), t || (t = 0), i > 0 && i < n && (i = n), i === n || e.length === 0 || this.length === 0) return 0;\n        if (t < 0) throw new RangeError(\"targetStart out of bounds\");\n        if (n < 0 || n >= this.length) throw new RangeError(\"Index out of range\");\n        if (i < 0) throw new RangeError(\"sourceEnd out of bounds\");\n        i > this.length && (i = this.length), e.length - t < i - n && (i = e.length - t + n);\n        let s = i - n;\n        return this === e && typeof Uint8Array.prototype.copyWithin == \"function\" ? this.copyWithin(t, n, i) : Uint8Array.prototype.set.call(e, this.subarray(n, i), t), s;\n    }, \"copy\");\n    d.prototype.fill = o(function(e, t, n, i) {\n        if (typeof e == \"string\") {\n            if (typeof t == \"string\" ? (i = t, t = 0, n = this.length) : typeof n == \"string\" && (i = n, n = this.length), i !== void 0 && typeof i != \"string\") throw new TypeError(\"encoding must be a string\");\n            if (typeof i == \"string\" && !d.isEncoding(i)) throw new TypeError(\"Unknown encoding: \" + i);\n            if (e.length === 1) {\n                let a = e.charCodeAt(0);\n                (i === \"utf8\" && a < 128 || i === \"latin1\") && (e = a);\n            }\n        } else typeof e == \"number\" ? e = e & 255 : typeof e == \"boolean\" && (e = Number(e));\n        if (t < 0 || this.length < t || this.length < n) throw new RangeError(\"Out of range index\");\n        if (n <= t) return this;\n        t = t >>> 0, n = n === void 0 ? this.length : n >>> 0, e || (e = 0);\n        let s;\n        if (typeof e == \"number\") for(s = t; s < n; ++s)this[s] = e;\n        else {\n            let a = d.isBuffer(e) ? e : d.from(e, i), u = a.length;\n            if (u === 0) throw new TypeError('The value \"' + e + '\" is invalid for argument \"value\"');\n            for(s = 0; s < n - t; ++s)this[s + t] = a[s % u];\n        }\n        return this;\n    }, \"fill\");\n    var Ne = {};\n    function dr(r, e, t) {\n        var n;\n        Ne[r] = (n = class extends t {\n            constructor(){\n                super(), Object.defineProperty(this, \"message\", {\n                    value: e.apply(this, arguments),\n                    writable: !0,\n                    configurable: !0\n                }), this.name = `${this.name} [${r}]`, this.stack, delete this.name;\n            }\n            get code() {\n                return r;\n            }\n            set code(s) {\n                Object.defineProperty(this, \"code\", {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: s,\n                    writable: !0\n                });\n            }\n            toString() {\n                return `${this.name} [${r}]: ${this.message}`;\n            }\n        }, o(n, \"NodeError\"), n);\n    }\n    o(dr, \"E\");\n    dr(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(r) {\n        return r ? `${r} is outside of buffer bound\\\ns` : \"Attempt to access memory outside buffer bounds\";\n    }, RangeError);\n    dr(\"ERR_INVALID_ARG_TYPE\", function(r, e) {\n        return `The \"${r}\" argument must be of type number. Rece\\\nived type ${typeof e}`;\n    }, TypeError);\n    dr(\"ERR_OUT_OF_RANGE\", function(r, e, t) {\n        let n = `\\\nThe value of \"${r}\" is out of range.`, i = t;\n        return Number.isInteger(t) && Math.abs(t) > 2 ** 32 ? i = vi(String(t)) : typeof t == \"bigint\" && (i = String(t), (t > BigInt(2) ** BigInt(32) || t < -(BigInt(2) ** BigInt(32))) && (i = vi(i)), i += \"n\"), n += ` It must be ${e}. Received ${i}`, n;\n    }, RangeError);\n    function vi(r) {\n        let e = \"\", t = r.length, n = r[0] === \"-\" ? 1 : 0;\n        for(; t >= n + 4; t -= 3)e = `_${r.slice(t - 3, t)}${e}`;\n        return `${r.slice(0, t)}${e}`;\n    }\n    o(vi, \"addNumericalSeparator\");\n    function Qo(r, e, t) {\n        qe(e, \"offset\"), (r[e] === void 0 || r[e + t] === void 0) && tt(e, r.length - (t + 1));\n    }\n    o(Qo, \"checkBounds\");\n    function Mi(r, e, t, n, i, s) {\n        if (r > t || r < e) {\n            let a = typeof e == \"bigint\" ? \"n\" : \"\", u;\n            throw s > 3 ? e === 0 || e === BigInt(0) ? u = `>= 0${a} and < 2${a} ** ${(s + 1) * 8}${a}` : u = `>= -(2${a} ** ${(s + 1) * 8 - 1}${a}) and < 2 ** ${(s + 1) * 8 - 1}${a}` : u = `>=\\\n ${e}${a} and <= ${t}${a}`, new Ne.ERR_OUT_OF_RANGE(\"value\", u, r);\n        }\n        Qo(n, i, s);\n    }\n    o(Mi, \"checkIntBI\");\n    function qe(r, e) {\n        if (typeof r != \"number\") throw new Ne.ERR_INVALID_ARG_TYPE(e, \"number\", r);\n    }\n    o(qe, \"validateNumber\");\n    function tt(r, e, t) {\n        throw Math.floor(r) !== r ? (qe(r, t), new Ne.ERR_OUT_OF_RANGE(t || \"offset\", \"an integer\", r)) : e < 0 ? new Ne.ERR_BUFFER_OUT_OF_BOUNDS : new Ne.ERR_OUT_OF_RANGE(t || \"offset\", `>= ${t ? 1 : 0} and <= ${e}`, r);\n    }\n    o(tt, \"boundsError\");\n    var Ho = /[^+/0-9A-Za-z-_]/g;\n    function jo(r) {\n        if (r = r.split(\"=\")[0], r = r.trim().replace(Ho, \"\"), r.length < 2) return \"\";\n        for(; r.length % 4 !== 0;)r = r + \"=\";\n        return r;\n    }\n    o(jo, \"base64clean\");\n    function hr(r, e) {\n        e = e || 1 / 0;\n        let t, n = r.length, i = null, s = [];\n        for(let a = 0; a < n; ++a){\n            if (t = r.charCodeAt(a), t > 55295 && t < 57344) {\n                if (!i) {\n                    if (t > 56319) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    } else if (a + 1 === n) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    }\n                    i = t;\n                    continue;\n                }\n                if (t < 56320) {\n                    (e -= 3) > -1 && s.push(239, 191, 189), i = t;\n                    continue;\n                }\n                t = (i - 55296 << 10 | t - 56320) + 65536;\n            } else i && (e -= 3) > -1 && s.push(239, 191, 189);\n            if (i = null, t < 128) {\n                if ((e -= 1) < 0) break;\n                s.push(t);\n            } else if (t < 2048) {\n                if ((e -= 2) < 0) break;\n                s.push(t >> 6 | 192, t & 63 | 128);\n            } else if (t < 65536) {\n                if ((e -= 3) < 0) break;\n                s.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);\n            } else if (t < 1114112) {\n                if ((e -= 4) < 0) break;\n                s.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);\n            } else throw new Error(\"Invalid code point\");\n        }\n        return s;\n    }\n    o(hr, \"utf8ToBytes\");\n    function Ko(r) {\n        let e = [];\n        for(let t = 0; t < r.length; ++t)e.push(r.charCodeAt(t) & 255);\n        return e;\n    }\n    o(Ko, \"asciiToBytes\");\n    function $o(r, e) {\n        let t, n, i, s = [];\n        for(let a = 0; a < r.length && !((e -= 2) < 0); ++a)t = r.charCodeAt(a), n = t >> 8, i = t % 256, s.push(i), s.push(n);\n        return s;\n    }\n    o($o, \"utf16leToBytes\");\n    function Fi(r) {\n        return or.toByteArray(jo(r));\n    }\n    o(Fi, \"base64ToBytes\");\n    function Pt(r, e, t, n) {\n        let i;\n        for(i = 0; i < n && !(i + t >= e.length || i >= r.length); ++i)e[i + t] = r[i];\n        return i;\n    }\n    o(Pt, \"blitBuffer\");\n    function xe(r, e) {\n        return r instanceof e || r != null && r.constructor != null && r.constructor.name != null && r.constructor.name === e.name;\n    }\n    o(xe, \"isInstance\");\n    function pr(r) {\n        return r !== r;\n    }\n    o(pr, \"numberIsNaN\");\n    var Wo = function() {\n        let r = \"0123456789abcdef\", e = new Array(256);\n        for(let t = 0; t < 16; ++t){\n            let n = t * 16;\n            for(let i = 0; i < 16; ++i)e[n + i] = r[t] + r[i];\n        }\n        return e;\n    }();\n    function _e(r) {\n        return typeof BigInt > \"u\" ? Vo : r;\n    }\n    o(_e, \"defineBigIntMethod\");\n    function Vo() {\n        throw new Error(\"BigInt not supported\");\n    }\n    o(Vo, \"BufferBigIntNotDefined\");\n});\nvar v, E, _, S, y, w, p = ie(()=>{\n    \"use strict\";\n    v = globalThis, E = globalThis.setImmediate ?? ((r)=>setTimeout(r, 0)), _ = globalThis.clearImmediate ?? ((r)=>clearTimeout(r)), S = globalThis.crypto ?? {};\n    S.subtle ?? (S.subtle = {});\n    y = typeof globalThis.Buffer == \"function\" && typeof globalThis.Buffer.allocUnsafe == \"function\" ? globalThis.Buffer : ki().Buffer, w = globalThis.process ?? {};\n    w.env ?? (w.env = {});\n    try {\n        w.nextTick(()=>{});\n    } catch  {\n        let e = Promise.resolve();\n        w.nextTick = e.then.bind(e);\n    }\n});\nvar Ni = {};\nye(Ni, {\n    parse: ()=>yr\n});\nfunction yr(r, e = !1) {\n    let { protocol: t } = new URL(r), n = \"http:\" + r.substring(t.length), { username: i, password: s, host: a, hostname: u, port: c, pathname: h, search: l, searchParams: f, hash: m } = new URL(n);\n    s = decodeURIComponent(s);\n    let x = i + \":\" + s, C = e ? Object.fromEntries(f.entries()) : l;\n    return {\n        href: r,\n        protocol: t,\n        auth: x,\n        username: i,\n        password: s,\n        host: a,\n        hostname: u,\n        port: c,\n        pathname: h,\n        search: l,\n        query: C,\n        hash: m\n    };\n}\nvar wr = ie(()=>{\n    \"use strict\";\n    p();\n    o(yr, \"parse\");\n});\nvar Ue = L((Ml, mr)=>{\n    \"use strict\";\n    p();\n    var Qe = typeof Reflect == \"object\" ? Reflect : null, Di = Qe && typeof Qe.apply == \"function\" ? Qe.apply : o(function(e, t, n) {\n        return Function.prototype.apply.call(e, t, n);\n    }, \"ReflectApply\"), Rt;\n    Qe && typeof Qe.ownKeys == \"function\" ? Rt = Qe.ownKeys : Object.getOwnPropertySymbols ? Rt = o(function(e) {\n        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));\n    }, \"ReflectOwnKeys\") : Rt = o(function(e) {\n        return Object.getOwnPropertyNames(e);\n    }, \"ReflectOwnKeys\");\n    function Go(r) {\n        console && console.warn && console.warn(r);\n    }\n    o(Go, \"ProcessEmitWarning\");\n    var Oi = Number.isNaN || o(function(e) {\n        return e !== e;\n    }, \"NumberIsNaN\");\n    function N() {\n        N.init.call(this);\n    }\n    o(N, \"EventEmitter\");\n    mr.exports = N;\n    mr.exports.once = Zo;\n    N.EventEmitter = N;\n    N.prototype._events = void 0;\n    N.prototype._eventsCount = 0;\n    N.prototype._maxListeners = void 0;\n    var qi = 10;\n    function Mt(r) {\n        if (typeof r != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof r);\n    }\n    o(Mt, \"checkListener\");\n    Object.defineProperty(N, \"defaultMaxListeners\", {\n        enumerable: !0,\n        get: function() {\n            return qi;\n        },\n        set: function(r) {\n            if (typeof r != \"number\" || r < 0 || Oi(r)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + r + \".\");\n            qi = r;\n        }\n    });\n    N.init = function() {\n        (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n    };\n    N.prototype.setMaxListeners = o(function(e) {\n        if (typeof e != \"number\" || e < 0 || Oi(e)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");\n        return this._maxListeners = e, this;\n    }, \"setMaxListeners\");\n    function Qi(r) {\n        return r._maxListeners === void 0 ? N.defaultMaxListeners : r._maxListeners;\n    }\n    o(Qi, \"_getMaxListeners\");\n    N.prototype.getMaxListeners = o(function() {\n        return Qi(this);\n    }, \"getMaxListeners\");\n    N.prototype.emit = o(function(e) {\n        for(var t = [], n = 1; n < arguments.length; n++)t.push(arguments[n]);\n        var i = e === \"error\", s = this._events;\n        if (s !== void 0) i = i && s.error === void 0;\n        else if (!i) return !1;\n        if (i) {\n            var a;\n            if (t.length > 0 && (a = t[0]), a instanceof Error) throw a;\n            var u = new Error(\"Unhandled error.\" + (a ? \" (\" + a.message + \")\" : \"\"));\n            throw u.context = a, u;\n        }\n        var c = s[e];\n        if (c === void 0) return !1;\n        if (typeof c == \"function\") Di(c, this, t);\n        else for(var h = c.length, l = Wi(c, h), n = 0; n < h; ++n)Di(l[n], this, t);\n        return !0;\n    }, \"emit\");\n    function Hi(r, e, t, n) {\n        var i, s, a;\n        if (Mt(t), s = r._events, s === void 0 ? (s = r._events = Object.create(null), r._eventsCount = 0) : (s.newListener !== void 0 && (r.emit(\"newListener\", e, t.listener ? t.listener : t), s = r._events), a = s[e]), a === void 0) a = s[e] = t, ++r._eventsCount;\n        else if (typeof a == \"function\" ? a = s[e] = n ? [\n            t,\n            a\n        ] : [\n            a,\n            t\n        ] : n ? a.unshift(t) : a.push(t), i = Qi(r), i > 0 && a.length > i && !a.warned) {\n            a.warned = !0;\n            var u = new Error(\"Possible EventEmitter memory leak detected. \" + a.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n            u.name = \"MaxListenersExceededWarning\", u.emitter = r, u.type = e, u.count = a.length, Go(u);\n        }\n        return r;\n    }\n    o(Hi, \"_addListener\");\n    N.prototype.addListener = o(function(e, t) {\n        return Hi(this, e, t, !1);\n    }, \"addListener\");\n    N.prototype.on = N.prototype.addListener;\n    N.prototype.prependListener = o(function(e, t) {\n        return Hi(this, e, t, !0);\n    }, \"prependListener\");\n    function zo() {\n        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n    }\n    o(zo, \"onceWrapper\");\n    function ji(r, e, t) {\n        var n = {\n            fired: !1,\n            wrapFn: void 0,\n            target: r,\n            type: e,\n            listener: t\n        }, i = zo.bind(n);\n        return i.listener = t, n.wrapFn = i, i;\n    }\n    o(ji, \"_onceWrap\");\n    N.prototype.once = o(function(e, t) {\n        return Mt(t), this.on(e, ji(this, e, t)), this;\n    }, \"once\");\n    N.prototype.prependOnceListener = o(function(e, t) {\n        return Mt(t), this.prependListener(e, ji(this, e, t)), this;\n    }, \"prependOnceListener\");\n    N.prototype.removeListener = o(function(e, t) {\n        var n, i, s, a, u;\n        if (Mt(t), i = this._events, i === void 0) return this;\n        if (n = i[e], n === void 0) return this;\n        if (n === t || n.listener === t) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[e], i.removeListener && this.emit(\"removeListener\", e, n.listener || t));\n        else if (typeof n != \"function\") {\n            for(s = -1, a = n.length - 1; a >= 0; a--)if (n[a] === t || n[a].listener === t) {\n                u = n[a].listener, s = a;\n                break;\n            }\n            if (s < 0) return this;\n            s === 0 ? n.shift() : Yo(n, s), n.length === 1 && (i[e] = n[0]), i.removeListener !== void 0 && this.emit(\"removeListener\", e, u || t);\n        }\n        return this;\n    }, \"removeListener\");\n    N.prototype.off = N.prototype.removeListener;\n    N.prototype.removeAllListeners = o(function(e) {\n        var t, n, i;\n        if (n = this._events, n === void 0) return this;\n        if (n.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : n[e] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete n[e]), this;\n        if (arguments.length === 0) {\n            var s = Object.keys(n), a;\n            for(i = 0; i < s.length; ++i)a = s[i], a !== \"removeListener\" && this.removeAllListeners(a);\n            return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n        }\n        if (t = n[e], typeof t == \"function\") this.removeListener(e, t);\n        else if (t !== void 0) for(i = t.length - 1; i >= 0; i--)this.removeListener(e, t[i]);\n        return this;\n    }, \"removeAllListeners\");\n    function Ki(r, e, t) {\n        var n = r._events;\n        if (n === void 0) return [];\n        var i = n[e];\n        return i === void 0 ? [] : typeof i == \"function\" ? t ? [\n            i.listener || i\n        ] : [\n            i\n        ] : t ? Jo(i) : Wi(i, i.length);\n    }\n    o(Ki, \"_listeners\");\n    N.prototype.listeners = o(function(e) {\n        return Ki(this, e, !0);\n    }, \"listeners\");\n    N.prototype.rawListeners = o(function(e) {\n        return Ki(this, e, !1);\n    }, \"rawListeners\");\n    N.listenerCount = function(r, e) {\n        return typeof r.listenerCount == \"function\" ? r.listenerCount(e) : $i.call(r, e);\n    };\n    N.prototype.listenerCount = $i;\n    function $i(r) {\n        var e = this._events;\n        if (e !== void 0) {\n            var t = e[r];\n            if (typeof t == \"function\") return 1;\n            if (t !== void 0) return t.length;\n        }\n        return 0;\n    }\n    o($i, \"listenerCount\");\n    N.prototype.eventNames = o(function() {\n        return this._eventsCount > 0 ? Rt(this._events) : [];\n    }, \"eventNames\");\n    function Wi(r, e) {\n        for(var t = new Array(e), n = 0; n < e; ++n)t[n] = r[n];\n        return t;\n    }\n    o(Wi, \"arrayClone\");\n    function Yo(r, e) {\n        for(; e + 1 < r.length; e++)r[e] = r[e + 1];\n        r.pop();\n    }\n    o(Yo, \"spliceOne\");\n    function Jo(r) {\n        for(var e = new Array(r.length), t = 0; t < e.length; ++t)e[t] = r[t].listener || r[t];\n        return e;\n    }\n    o(Jo, \"unwrapListeners\");\n    function Zo(r, e) {\n        return new Promise(function(t, n) {\n            function i(a) {\n                r.removeListener(e, s), n(a);\n            }\n            o(i, \"errorListener\");\n            function s() {\n                typeof r.removeListener == \"function\" && r.removeListener(\"error\", i), t([].slice.call(arguments));\n            }\n            o(s, \"resolver\"), Vi(r, e, s, {\n                once: !0\n            }), e !== \"error\" && Xo(r, i, {\n                once: !0\n            });\n        });\n    }\n    o(Zo, \"once\");\n    function Xo(r, e, t) {\n        typeof r.on == \"function\" && Vi(r, \"error\", e, t);\n    }\n    o(Xo, \"addErrorHandlerIfEventEmitter\");\n    function Vi(r, e, t, n) {\n        if (typeof r.on == \"function\") n.once ? r.once(e, t) : r.on(e, t);\n        else if (typeof r.addEventListener == \"function\") r.addEventListener(e, o(function i(s) {\n            n.once && r.removeEventListener(e, i), t(s);\n        }, \"wrapListener\"));\n        else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof r);\n    }\n    o(Vi, \"eventTargetAgnosticAddListener\");\n});\nfunction ae(...r) {\n    if (r.length === 1 && r[0] instanceof Uint8Array) return r[0];\n    let e = r.reduce((i, s)=>i + s.length, 0), t = new Uint8Array(e), n = 0;\n    for (let i of r)t.set(i, n), n += i.length;\n    return t;\n}\nfunction lt(r, e) {\n    let t = r.length;\n    if (t !== e.length) return !1;\n    for(let n = 0; n < t; n++)if (r[n] !== e[n]) return !1;\n    return !0;\n}\nfunction tu(r, e, t, n = !0) {\n    let i = new Ae(1024);\n    i.writeUint8(22, 0), i.writeUint16(769, 0);\n    let s = i.writeLengthUint16();\n    i.writeUint8(1, 0);\n    let a = i.writeLengthUint24();\n    i.writeUint16(771, 0), S.getRandomValues(i.subarray(32));\n    let u = i.writeLengthUint8(0);\n    i.writeBytes(t), u();\n    let c = i.writeLengthUint16(0);\n    i.writeUint16(4865, 0), c();\n    let h = i.writeLengthUint8(0);\n    i.writeUint8(0, 0), h();\n    let l = i.writeLengthUint16(0);\n    if (n) {\n        i.writeUint16(0, 0);\n        let F = i.writeLengthUint16(0), q = i.writeLengthUint16(0);\n        i.writeUint8(0, 0);\n        let k = i.writeLengthUint16(0);\n        i.writeUTF8String(r), k(), q(), F();\n    }\n    i.writeUint16(11, 0);\n    let f = i.writeLengthUint16(0), m = i.writeLengthUint8(0);\n    i.writeUint8(0, 0), m(), f(), i.writeUint16(10, 0);\n    let x = i.writeLengthUint16(0), C = i.writeLengthUint16(0);\n    i.writeUint16(23, 0), C(), x(), i.writeUint16(13, 0);\n    let I = i.writeLengthUint16(0), T = i.writeLengthUint16(0);\n    i.writeUint16(1027, 0), i.writeUint16(2052, 0), T(), I(), i.writeUint16(43, 0);\n    let P = i.writeLengthUint16(0), b = i.writeLengthUint8(0);\n    i.writeUint16(772, 0), b(), P(), i.writeUint16(51, 0);\n    let A = i.writeLengthUint16(0), j = i.writeLengthUint16(0);\n    i.writeUint16(23, 0);\n    let K = i.writeLengthUint16(0);\n    return i.writeBytes(new Uint8Array(e)), K(), j(), A(), l(), a(), s(), i;\n}\nfunction Ie(r, e = \"\") {\n    return [\n        ...r\n    ].map((t)=>t.toString(16).padStart(2, \"0\")).join(e);\n}\nfunction ru(r, e) {\n    let t, n, [i] = r.expectLength(r.remaining());\n    r.expectUint8(2, 0);\n    let [s] = r.expectLengthUint24(0);\n    r.expectUint16(771, 0);\n    let a = r.readBytes(32);\n    if (lt(a, [\n        207,\n        33,\n        173,\n        116,\n        229,\n        154,\n        97,\n        17,\n        190,\n        29,\n        140,\n        2,\n        30,\n        101,\n        184,\n        145,\n        194,\n        162,\n        17,\n        22,\n        122,\n        187,\n        140,\n        94,\n        7,\n        158,\n        9,\n        226,\n        200,\n        168,\n        51,\n        156\n    ])) throw new Error(\"Unexpected HelloRetryRequest\");\n    r.expectUint8(e.length, 0), r.expectBytes(e, 0), r.expectUint16(4865, 0), r.expectUint8(0, 0);\n    let [u, c] = r.expectLengthUint16(0);\n    for(; c() > 0;){\n        let h = r.readUint16(0), [l] = r.expectLengthUint16(0);\n        if (h === 43) r.expectUint16(772, 0), n = !0;\n        else if (h === 51) r.expectUint16(23, 0), r.expectUint16(65), t = r.readBytes(65);\n        else throw new Error(`Unexpected extension 0x${Ie([\n            h\n        ])}`);\n        l();\n    }\n    if (u(), s(), i(), n !== !0) throw new Error(\"No TLS version provided\");\n    if (t === void 0) throw new Error(\"No key provided\");\n    return t;\n}\nasync function Ar(r, e, t = rt) {\n    let n = await r(5);\n    if (n === void 0) return;\n    if (n.length < 5) throw new Error(\"TLS record header truncated\");\n    let i = new Ae(n), s = i.readUint8();\n    if (s < 20 || s > 24) throw new Error(`Illegal TLS record type 0x${s.toString(16)}`);\n    if (e !== void 0 && s !== e) throw new Error(`Unexpected TLS record type 0x${s.toString(16).padStart(2, \"0\")} (expected 0x${e.toString(16).padStart(2, \"0\")})`);\n    i.expectUint16(771, \"TLS record version 1.2 (middlebox compatibility)\");\n    let a = i.readUint16(0);\n    if (a > t) throw new Error(`Record too long: ${a} bytes`);\n    let u = await r(a);\n    if (u === void 0 || u.length < a) throw new Error(\"TLS record content truncated\");\n    return {\n        headerData: n,\n        header: i,\n        type: s,\n        length: a,\n        content: u\n    };\n}\nasync function vr(r, e, t) {\n    let n = await Ar(r, 23, nu);\n    if (n === void 0) return;\n    let i = new Ae(n.content), [s] = i.expectLength(i.remaining());\n    i.skip(n.length - 16, 0), i.skip(16, 0), s();\n    let a = await e.process(n.content, 16, n.headerData), u = a.length - 1;\n    for(; a[u] === 0;)u -= 1;\n    if (u < 0) throw new Error(\"Decrypted message has no record type indicator (all zeroes)\");\n    let c = a[u], h = a.subarray(0, u);\n    if (!(c === 21 && h.length === 2 && h[0] === 1 && h[1] === 0)) {\n        if (c === 22 && h[0] === 4) return vr(r, e, t);\n        if (t !== void 0 && c !== t) throw new Error(`U\\\nnexpected TLS record type 0x${c.toString(16).padStart(2, \"0\")} (expected 0x${t.toString(16).padStart(2, \"0\")})`);\n        return h;\n    }\n}\nasync function iu(r, e, t) {\n    let n = ae(r, [\n        t\n    ]), i = 5, s = n.length + 16, a = new Ae(i + s);\n    a.writeUint8(23, 0), a.writeUint16(771, 0), a.writeUint16(s, `${s} bytes follow`);\n    let [u] = a.expectLength(s), c = a.array(), h = await e.process(n, 16, c);\n    return a.writeBytes(h.subarray(0, h.length - 16)), a.writeBytes(h.subarray(h.length - 16)), u(), a.array();\n}\nasync function zi(r, e, t) {\n    let n = Math.ceil(r.length / rt), i = [];\n    for(let s = 0; s < n; s++){\n        let a = r.subarray(s * rt, (s + 1) * rt), u = await iu(a, e, t);\n        i.push(u);\n    }\n    return i;\n}\nasync function Er(r, e, t) {\n    let n = await M.importKey(\"raw\", r, {\n        name: \"HMAC\",\n        hash: {\n            name: `SHA-${t}`\n        }\n    }, !1, [\n        \"sign\"\n    ]);\n    var i = new Uint8Array(await M.sign(\"HMAC\", n, e));\n    return i;\n}\nasync function su(r, e, t, n) {\n    let i = n >> 3, s = Math.ceil(t / i), a = new Uint8Array(s * i), u = await M.importKey(\"raw\", r, {\n        name: \"HMAC\",\n        hash: {\n            name: `SHA-${n}`\n        }\n    }, !1, [\n        \"sign\"\n    ]), c = new Uint8Array(0);\n    for(let h = 0; h < s; h++){\n        let l = ae(c, e, [\n            h + 1\n        ]), f = await M.sign(\"HMAC\", u, l), m = new Uint8Array(f);\n        a.set(m, i * h), c = m;\n    }\n    return a.subarray(0, t);\n}\nasync function oe(r, e, t, n, i) {\n    let s = es.encode(e), a = ae([\n        (n & 65280) >> 8,\n        n & 255\n    ], [\n        Yi.length + s.length\n    ], Yi, s, [\n        t.length\n    ], t);\n    return su(r, a, n, i);\n}\nasync function au(r, e, t, n, i) {\n    let s = n >>> 3, a = new Uint8Array(s), u = await M.importKey(\"raw\", r, {\n        name: \"ECDH\",\n        namedCurve: \"P-256\"\n    }, !1, []), c = await M.deriveBits({\n        name: \"ECDH\",\n        public: u\n    }, e, 256), h = new Uint8Array(c), l = await M.digest(\"SHA-256\", t), f = new Uint8Array(l), m = await Er(new Uint8Array(1), a, n), x = await M.digest(`SHA-${n}`, new Uint8Array(0)), C = new Uint8Array(x), I = await oe(m, \"derived\", C, s, n), T = await Er(I, h, n), P = await oe(T, \"c hs traffic\", f, s, n), b = await oe(T, \"s hs traffic\", f, s, n), A = await oe(P, \"key\", new Uint8Array(0), i, n), j = await oe(b, \"key\", new Uint8Array(0), i, n), K = await oe(P, \"iv\", new Uint8Array(0), 12, n), F = await oe(b, \"iv\", new Uint8Array(0), 12, n);\n    return {\n        serverHandshakeKey: j,\n        serverHandshakeIV: F,\n        clientHandshakeKey: A,\n        clientHandshakeIV: K,\n        handshakeSecret: T,\n        clientSecret: P,\n        serverSecret: b\n    };\n}\nasync function ou(r, e, t, n) {\n    let i = t >>> 3, s = new Uint8Array(i), a = await M.digest(`SHA\\\n-${t}`, new Uint8Array(0)), u = new Uint8Array(a), c = await oe(r, \"derived\", u, i, t), h = await Er(c, s, t), l = await oe(h, \"c ap traffic\", e, i, t), f = await oe(h, \"s ap traffic\", e, i, t), m = await oe(l, \"key\", new Uint8Array(0), n, t), x = await oe(f, \"key\", new Uint8Array(0), n, t), C = await oe(l, \"iv\", new Uint8Array(0), 12, t), I = await oe(f, \"iv\", new Uint8Array(0), 12, t);\n    return {\n        serverApplicationKey: x,\n        serverApplicationIV: I,\n        clientApplicationKey: m,\n        clientApplicationIV: C\n    };\n}\nfunction kt(r) {\n    return r > 64 && r < 91 ? r - 65 : r > 96 && r < 123 ? r - 71 : r > 47 && r < 58 ? r + 4 : r === 43 ? 62 : r === 47 ? 63 : r === 61 ? 64 : void 0;\n}\nfunction uu(r) {\n    let e = r.length, t = 0, n = 0, i = 64, s = 64, a = 64, u = 64, c = new Uint8Array(e * .75);\n    for(; t < e;)i = kt(r.charCodeAt(t++)), s = kt(r.charCodeAt(t++)), a = kt(r.charCodeAt(t++)), u = kt(r.charCodeAt(t++)), c[n++] = i << 2 | s >> 4, c[n++] = (s & 15) << 4 | a >> 2, c[n++] = (a & 3) << 6 | u;\n    let h = s === 64 ? 0 : a === 64 ? 2 : u === 64 ? 1 : 0;\n    return c.subarray(0, n - h);\n}\nfunction Ji(r, e = (n, i)=>i, t) {\n    return JSON.stringify(r, (n, i)=>e(n, typeof i != \"object\" || i === null || Array.isArray(i) ? i : Object.fromEntries(Object.entries(i).sort(([s], [a])=>s < a ? -1 : s > a ? 1 : 0))), t);\n}\nfunction pu(r) {\n    let { length: e } = r;\n    if (e > 4) throw new Error(`Bit string length ${e} would overflow JS bit operators`);\n    let t = 0, n = 0;\n    for(let i = r.length - 1; i >= 0; i--)t |= r[i] << n, n += 8;\n    return t;\n}\nfunction Xi(r, e) {\n    let t = {};\n    r.expectUint8(se, 0);\n    let [n, i] = r.expectASN1Length(0);\n    for(; i() > 0;){\n        r.expectUint8(cu, 0);\n        let [s] = r.expectASN1Length(0);\n        r.expectUint8(se, 0);\n        let [a] = r.expectASN1Length(0);\n        r.expectUint8(je, 0);\n        let u = r.readASN1OID(), c = du[u] ?? u, h = r.readUint8();\n        if (h !== hu && h !== lu) throw new Error(`Unex\\\npected item type in certificate ${e}: 0x${Ie([\n            h\n        ])}`);\n        let [l, f] = r.expectASN1Length(0), m = r.readUTF8String(f());\n        if (l(), a(), s(), t[c] !== void 0) throw new Error(`Duplica\\\nte OID ${c} in certificate ${e}`);\n        t[c] = m;\n    }\n    return n(), t;\n}\nfunction yu(r, e = 0) {\n    let t = [], [n, i] = r.expectASN1Length(0);\n    for(; i() > 0;){\n        let s = r.readUint8(0), [a, u] = r.expectASN1Length(0), c;\n        s === (e | 2) ? c = r.readUTF8String(u()) : c = r.readBytes(u()), t.push({\n            name: c,\n            type: s\n        }), a();\n    }\n    return n(), t;\n}\nfunction wu(r) {\n    let e = {\n        \"1.2.840.113549.1.1.1\": {\n            name: \"RSAES-PKCS1-v1_5\"\n        },\n        \"1.2.840.113549.1.1.5\": {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n                name: \"SHA-1\"\n            }\n        },\n        \"1.2.840.113549.1.1.11\": {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        },\n        \"1.2.840.113549.1.1.12\": {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n                name: \"SHA-384\"\n            }\n        },\n        \"1.2.840.113549.1.1.13\": {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n                name: \"SHA-512\"\n            }\n        },\n        \"1.2.840.113549.1.1.10\": {\n            name: \"RSA-PSS\"\n        },\n        \"1.2.840.113549.1.1.7\": {\n            name: \"RSA-OAEP\"\n        },\n        \"1.2.840.10045.2.1\": {\n            name: \"ECDSA\",\n            hash: {\n                name: \"SHA-1\"\n            }\n        },\n        \"1.2.840.10045.4.1\": {\n            name: \"ECDSA\",\n            hash: {\n                name: \"SHA-1\"\n            }\n        },\n        \"1.2.840.10045.4.3.2\": {\n            name: \"ECDSA\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        },\n        \"1.2.840.10045.4.3.3\": {\n            name: \"ECDSA\",\n            hash: {\n                name: \"SHA-384\"\n            }\n        },\n        \"1.2.840.10045.4.3.4\": {\n            name: \"ECDSA\",\n            hash: {\n                name: \"SHA-512\"\n            }\n        },\n        \"1.3.133.16.840.63.0.2\": {\n            name: \"ECDH\",\n            kdf: \"SHA-1\"\n        },\n        \"1.3.132.1.11.1\": {\n            name: \"ECDH\",\n            kdf: \"SHA-256\"\n        },\n        \"1.3.132.1.11.2\": {\n            name: \"ECDH\",\n            kdf: \"SHA-384\"\n        },\n        \"1.3.132.1.11.3\": {\n            name: \"ECDH\",\n            kdf: \"SHA-512\"\n        },\n        \"2.16.840.1.101.3.4.1.2\": {\n            name: \"AES-CBC\",\n            length: 128\n        },\n        \"2.16.840.1.101.3.4.1.22\": {\n            name: \"AES-CBC\",\n            length: 192\n        },\n        \"2.16.840.1.101.3.4.1.42\": {\n            name: \"AES-CBC\",\n            length: 256\n        },\n        \"2.16.840.1.101.3.4.1.6\": {\n            name: \"AES-GCM\",\n            length: 128\n        },\n        \"2.16.840.1.101.3.4.1.26\": {\n            name: \"AES-GCM\",\n            length: 192\n        },\n        \"2.16.840.1.101.3.4.1.46\": {\n            name: \"AES-GCM\",\n            length: 256\n        },\n        \"2.16.840.1.101.3.4.1.4\": {\n            name: \"AES-CFB\",\n            length: 128\n        },\n        \"2.16.840.1.101.3.4.1.24\": {\n            name: \"AES-CFB\",\n            length: 192\n        },\n        \"2.16.840.1.101.3.4.1.44\": {\n            name: \"AES-CFB\",\n            length: 256\n        },\n        \"2.16.840.1.101.3.4.1.5\": {\n            name: \"AES-KW\",\n            length: 128\n        },\n        \"2.16.840.1.101.3.4.1.25\": {\n            name: \"AES-KW\",\n            length: 192\n        },\n        \"2.16.840.1.101.3.4.1.45\": {\n            name: \"AES-KW\",\n            length: 256\n        },\n        \"1.2.840.113549.2.7\": {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-1\"\n            }\n        },\n        \"1.2.840.113549.2.9\": {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        },\n        \"1.2.840.113549.2.10\": {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-384\"\n            }\n        },\n        \"1.2.840.113549.2.11\": {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-512\"\n            }\n        },\n        \"1.2.840.113549.1.9.16.3.5\": {\n            name: \"DH\"\n        },\n        \"1.3.14.3.2.26\": {\n            name: \"SHA-1\"\n        },\n        \"2.16.840.1.101.3.4.2.1\": {\n            name: \"SHA-256\"\n        },\n        \"2.16.840.1.101.3.4.2.2\": {\n            name: \"SHA-384\"\n        },\n        \"2.16.840.1.101.3.4.2.3\": {\n            name: \"SHA-512\"\n        },\n        \"1.2.840.113549.1.5.12\": {\n            name: \"PBKDF2\"\n        },\n        \"1.2.840.10045.3.1.7\": {\n            name: \"P-256\"\n        },\n        \"1.3.132.0.34\": {\n            name: \"P-384\"\n        },\n        \"1.3.132.0.35\": {\n            name: \"P-521\"\n        }\n    }[r];\n    if (e === void 0) throw new Error(`Unsupported algorithm identifie\\\nr: ${r}`);\n    return e;\n}\nfunction ts(r, e = []) {\n    return Object.values(r).forEach((t)=>{\n        typeof t == \"string\" ? e = [\n            ...e,\n            t\n        ] : e = ts(t, e);\n    }), e;\n}\nfunction mu(r) {\n    return ts(r).join(\" / \");\n}\nasync function rs(r, e, t, n, i) {\n    r.expectUint8(se, 0);\n    let [s] = r.expectASN1Length(0);\n    r.expectUint8(Dt, 0);\n    let [a, u] = r.expectASN1Length(0), c = r.readBytes(u());\n    a(), r.expectUint8(Dt, 0);\n    let [h, l] = r.expectASN1Length(0), f = r.readBytes(l());\n    h(), s();\n    let m = o((T, P)=>T.length > P ? T.subarray(T.length - P) : T.length < P ? ae(new Uint8Array(P - T.length), T) : T, \"m\"), x = n === \"P-256\" ? 32 : 48, C = ae(m(c, x), m(f, x)), I = await M.importKey(\"spki\", e, {\n        name: \"ECDSA\",\n        namedCurve: n\n    }, !1, [\n        \"verify\"\n    ]);\n    if (await M.verify({\n        name: \"ECDSA\",\n        hash: i\n    }, I, C, t) !== !0) throw new Error(\"ECDSA-SECP256R1-SHA256 certificate verify failed\");\n}\nasync function Su(r, e, t, n = !0, i = !0) {\n    for (let u of e);\n    let s = e[0];\n    if (s.subjectAltNameMatchingHost(r) === void 0) throw new Error(`No matc\\\nhing subjectAltName for ${r}`);\n    if (!s.isValidAtMoment()) throw new Error(\"End-user certificate is not valid now\");\n    if (n && !s.extKeyUsage?.serverTls) throw new Error(\"End-user certificate has no TLS server extKeyUsage\");\n    let a = !1;\n    for (let u of t);\n    for(let u = 0, c = e.length; u < c; u++){\n        let h = e[u], l = h.authorityKeyIdentifier, f;\n        if (l === void 0 ? f = t.find((C)=>nt.distinguishedNamesAreEqual(C.subject, h.issuer)) : f = t.find((C)=>C.subjectKeyIdentifier !== void 0 && lt(C.subjectKeyIdentifier, l)), f === void 0 && (f = e[u + 1]), f === void 0) throw new Error(\"Ran out of certificates before reaching trusted root\");\n        let m = f instanceof Cr;\n        if (f.isValidAtMoment() !== !0) throw new Error(\"Signing certificate is not valid now\");\n        if (i && f.keyUsage?.usages.has(\"digitalSignature\") !== !0) throw new Error(\"Signing certificate keyUsage does not include digital signatures\");\n        if (f.basicConstraints?.ca !== !0) throw new Error(\"Signing certificate basicConstraints do not indicate a CA certificate\");\n        let { pathLength: x } = f.basicConstraints;\n        if (x !== void 0 && x < u) throw new Error(\"Exceeded certificate pathLength\");\n        if (h.algorithm === \"1.2.840.10045.4.3.2\" || h.algorithm === \"1.2.840.10045.4.3.3\") {\n            let C = h.algorithm === \"1.2.840.10045.4.3.2\" ? \"SHA-256\" : \"SHA-384\", I = f.publicKey.identifiers, T = I.includes(\"1.2.840.10045.3.1.7\") ? \"P-256\" : I.includes(\"1.3.132.0.34\") ? \"P-384\" : void 0;\n            if (T === void 0) throw new Error(\"Unsupported signing key curve\");\n            let P = new Nt(h.signature);\n            await rs(P, f.publicKey.all, h.signedData, T, C);\n        } else if (h.algorithm === \"1.2.840.113549.1.1.11\" || h.algorithm === \"1.2.840.113549.1.1.12\") {\n            let C = h.algorithm === \"1.2.840.113549.1.1.11\" ? \"SHA-256\" : \"SHA-384\", I = await M.importKey(\"spki\", f.publicKey.all, {\n                name: \"RSASSA-PKCS1-v1_5\",\n                hash: C\n            }, !1, [\n                \"verify\"\n            ]);\n            if (await M.verify({\n                name: \"RSASSA-PKCS1-v1_5\"\n            }, I, h.signature, h.signedData) !== !0) throw new Error(\"RSASSA_PKCS1-v1_5-SHA256 certificate verify failed\");\n        } else throw new Error(\"Unsupported signing algorithm\");\n        if (m) {\n            a = !0;\n            break;\n        }\n    }\n    return a;\n}\nasync function xu(r, e, t, n, i, s = !0, a = !0) {\n    let u = new Nt(await e());\n    u.expectUint8(8, 0);\n    let [c] = u.expectLengthUint24(), [h, l] = u.expectLengthUint16(0);\n    for(; l() > 0;){\n        let O = u.readUint16(0);\n        if (O === 0) u.expectUint16(0, 0);\n        else if (O === 10) {\n            let [Se, ve] = u.expectLengthUint16(\"groups data\");\n            u.skip(ve(), 0), Se();\n        } else throw new Error(`Unsupported server encrypted extension type 0x${Ie([\n            O\n        ]).padStart(4, \"0\")}`);\n    }\n    h(), c(), u.remaining() === 0 && u.extend(await e());\n    let f = !1, m = u.readUint8();\n    if (m === 13) {\n        f = !0;\n        let [O] = u.expectLengthUint24(\"certificate request data\");\n        u.expectUint8(0, 0);\n        let [Se, ve] = u.expectLengthUint16(\"certificate request extensions\");\n        u.skip(ve(), 0), Se(), O(), u.remaining() === 0 && u.extend(await e()), m = u.readUint8();\n    }\n    if (m !== 11) throw new Error(`Unexpected handshake message type 0x${Ie([\n        m\n    ])}`);\n    let [x] = u.expectLengthUint24(0);\n    u.expectUint8(0, 0);\n    let [C, I] = u.expectLengthUint24(0), T = [];\n    for(; I() > 0;){\n        let [O] = u.expectLengthUint24(0), Se = new nt(u);\n        T.push(Se), O();\n        let [ve, Fe] = u.expectLengthUint16(), li = u.subarray(Fe());\n        ve();\n    }\n    if (C(), x(), T.length === 0) throw new Error(\"No certificates supplied\");\n    let P = T[0], b = u.data.subarray(0, u.offset), A = ae(n, b), j = await M.digest(\"SHA-256\", A), K = new Uint8Array(j), F = ae(bu.encode(\" \".repeat(64) + \"TLS 1.3, server CertificateVerify\"), [\n        0\n    ], K);\n    u.remaining() === 0 && u.extend(await e()), u.expectUint8(15, 0);\n    let [q] = u.expectLengthUint24(0), k = u.readUint16();\n    if (k === 1027) {\n        let [O] = u.expectLengthUint16();\n        await rs(u, P.publicKey.all, F, \"P-256\", \"SHA-256\"), O();\n    } else if (k === 2052) {\n        let [O, Se] = u.expectLengthUint16(), ve = u.subarray(Se());\n        O();\n        let Fe = await M.importKey(\"spki\", P.publicKey.all, {\n            name: \"RSA-PSS\",\n            hash: \"SHA-256\"\n        }, !1, [\n            \"verify\"\n        ]);\n        if (await M.verify({\n            name: \"RSA-PSS\",\n            saltLength: 32\n        }, Fe, ve, F) !== !0) throw new Error(\"RSA-PSS-RSAE-SHA256 certificate verify failed\");\n    } else throw new Error(`Unsupported certifica\\\nte verify signature type 0x${Ie([\n        k\n    ]).padStart(4, \"0\")}`);\n    q();\n    let he = u.data.subarray(0, u.offset), R = ae(n, he), $ = await oe(t, \"finished\", new Uint8Array(0), 32, 256), W = await M.digest(\"SHA-256\", R), V = await M.importKey(\"raw\", $, {\n        name: \"HMAC\",\n        hash: {\n            name: \"SHA-256\"\n        }\n    }, !1, [\n        \"sign\"\n    ]), z = await M.sign(\"HMAC\", V, W), J = new Uint8Array(z);\n    u.remaining() === 0 && u.extend(await e()), u.expectUint8(20, 0);\n    let [D, Y] = u.expectLengthUint24(0), ee = u.readBytes(Y());\n    if (D(), u.remaining() !== 0) throw new Error(\"Unexpected extra bytes in server handshake\");\n    if (lt(ee, J) !== !0) throw new Error(\"Invalid server verify hash\");\n    if (!await Su(r, T, i, s, a)) throw new Error(\"Validated certificate chain did not end in a trusted root\");\n    return [\n        u.data,\n        f\n    ];\n}\nasync function ns(r, e, t, n, { useSNI: i, requireServerTlsExtKeyUsage: s, requireDigitalSigKeyUsage: a, writePreData: u, expectPreData: c, commentPreData: h } = {}) {\n    i ?? (i = !0), s ?? (s = !0), a ?? (a = !0);\n    let l = await M.generateKey({\n        name: \"ECDH\",\n        namedCurve: \"P-256\"\n    }, !0, [\n        \"deriveKey\",\n        \"deriveBits\"\n    ]), f = await M.exportKey(\"raw\", l.publicKey), m = new Uint8Array(32);\n    S.getRandomValues(m);\n    let x = tu(r, f, m, i).array(), C = u ? ae(u, x) : x;\n    if (n(C), c) {\n        let ne = await t(c.length);\n        if (!ne || !lt(ne, c)) throw new Error(\"Pre data did not match expectation\");\n    }\n    let I = await Ar(t, 22);\n    if (I === void 0) throw new Error(\"Connection closed while awaiting server hello\");\n    let T = new Ae(I.content), P = ru(T, m), b = await Ar(t, 20);\n    if (b === void 0) throw new Error(\"Connection closed awaiting server cipher change\");\n    let A = new Ae(b.content), [j] = A.expectLength(1);\n    A.expectUint8(1, 0), j();\n    let K = x.subarray(5), F = I.content, q = ae(K, F), k = await au(P, l.privateKey, q, 256, 16), he = await M.importKey(\"raw\", k.serverHandshakeKey, {\n        name: \"AES-GCM\"\n    }, !1, [\n        \"decrypt\"\n    ]), R = new Ft(\"decrypt\", he, k.serverHandshakeIV), $ = await M.importKey(\"raw\", k.clientHandshakeKey, {\n        name: \"AES-GCM\"\n    }, !1, [\n        \"encrypt\"\n    ]), W = new Ft(\"encrypt\", $, k.clientHandshakeIV), V = o(async ()=>{\n        let ne = await vr(t, R, 22);\n        if (ne === void 0) throw new Error(\"Premature end of encrypted server handshake\");\n        return ne;\n    }, \"C\"), [z, J] = await xu(r, V, k.serverSecret, q, e, s, a), D = new Ae(6);\n    D.writeUint8(20, 0), D.writeUint16(771, 0);\n    let Y = D.writeLengthUint16();\n    D.writeUint8(1, 0), Y();\n    let ee = D.array(), O = new Uint8Array(0);\n    if (J) {\n        let ne = new Ae(8);\n        ne.writeUint8(11, 0);\n        let Xe = ne.writeLengthUint24(\"client certificate data\");\n        ne.writeUint8(0, 0), ne.writeUint24(0, 0), Xe(), O = ne.array();\n    }\n    let Se = ae(q, z, O), ve = await M.digest(\"SHA-256\", Se), Fe = new Uint8Array(ve), li = await oe(k.clientSecret, \"finished\", new Uint8Array(0), 32, 256), Xa = await M.importKey(\"raw\", li, {\n        name: \"HMAC\",\n        hash: {\n            name: \"SHA-256\"\n        }\n    }, !1, [\n        \"sign\"\n    ]), eo = await M.sign(\"HMAC\", Xa, Fe), to = new Uint8Array(eo), Ut = new Ae(36);\n    Ut.writeUint8(20, 0);\n    let ro = Ut.writeLengthUint24(0);\n    Ut.writeBytes(to), ro();\n    let no = Ut.array(), fi = await zi(ae(O, no), W, 22), di = Fe;\n    if (O.length > 0) {\n        let ne = Se.subarray(0, Se.length - O.length), Xe = await M.digest(\"SHA-256\", ne);\n        di = new Uint8Array(Xe);\n    }\n    let It = await ou(k.handshakeSecret, di, 256, 16), io = await M.importKey(\"raw\", It.clientApplicationKey, {\n        name: \"AES-GCM\"\n    }, !0, [\n        \"encrypt\"\n    ]), so = new Ft(\"encrypt\", io, It.clientApplicationIV), ao = await M.importKey(\"raw\", It.serverApplicationKey, {\n        name: \"AES-GCM\"\n    }, !0, [\n        \"decrypt\"\n    ]), oo = new Ft(\"decrypt\", ao, It.serverApplicationIV), Lt = !1;\n    return [\n        ()=>{\n            if (!Lt) {\n                let ne = ae(ee, ...fi);\n                n(ne), Lt = !0;\n            }\n            return vr(t, oo);\n        },\n        async (ne)=>{\n            let Xe = Lt;\n            Lt = !0;\n            let pi = await zi(ne, so, 23), uo = Xe ? ae(...pi) : ae(ee, ...fi, ...pi);\n            n(uo);\n        }\n    ];\n}\nvar xr, Gi, eu, it, Ae, Nl, rt, nu, M, es, Yi, st, Ft, at, Nt, gr, Dt, se, cu, je, hu, lu, Zi, Sr, Me, br, fu, He, du, gu, ot, nt, ut, Cr, bu, ct, Au, ht, is, ss = ie(()=>{\n    p();\n    o(ae, \"p\");\n    o(lt, \"O\");\n    xr = \"\\xb7\\xb7 \", Gi = new TextEncoder, eu = new TextDecoder, Ae = (it = class {\n        constructor(e){\n            g(this, \"offset\");\n            g(this, \"dataView\");\n            g(this, \"data\");\n            g(this, \"comments\");\n            g(this, \"indents\");\n            g(this, \"indent\");\n            this.offset = 0, this.data = typeof e == \"number\" ? new Uint8Array(e) : e, this.dataView = new DataView(this.data.buffer, this.data.byteOffset, this.data.byteLength), this.comments = {}, this.indents = {}, this.indent = 0;\n        }\n        extend(e) {\n            let t = typeof e == \"number\" ? new Uint8Array(e) : e;\n            this.data = ae(this.data, t), this.dataView = new DataView(this.data.buffer, this.data.byteOffset, this.data.byteLength);\n        }\n        remaining() {\n            return this.data.length - this.offset;\n        }\n        subarray(e) {\n            return this.data.subarray(this.offset, this.offset += e);\n        }\n        skip(e, t) {\n            return this.offset += e, t && this.comment(t), this;\n        }\n        comment(e, t = this.offset) {\n            throw new Error(\"No comments should be emitted outside of chatty mode\");\n        }\n        readBytes(e) {\n            return this.data.slice(this.offset, this.offset += e);\n        }\n        readUTF8String(e) {\n            let t = this.subarray(e);\n            return eu.decode(t);\n        }\n        readUTF8StringNullTerminated() {\n            let e = this.offset;\n            for(; this.data[e] !== 0;)e++;\n            let t = this.readUTF8String(e - this.offset);\n            return this.expectUint8(0, \"end of string\"), t;\n        }\n        readUint8(e) {\n            let t = this.dataView.getUint8(this.offset);\n            return this.offset += 1, t;\n        }\n        readUint16(e) {\n            let t = this.dataView.getUint16(this.offset);\n            return this.offset += 2, t;\n        }\n        readUint24(e) {\n            let t = this.readUint8(), n = this.readUint16();\n            return (t << 16) + n;\n        }\n        readUint32(e) {\n            let t = this.dataView.getUint32(this.offset);\n            return this.offset += 4, t;\n        }\n        expectBytes(e, t) {\n            let n = this.readBytes(e.length);\n            if (!lt(n, e)) throw new Error(\"Unexpected bytes\");\n        }\n        expectUint8(e, t) {\n            let n = this.readUint8();\n            if (n !== e) throw new Error(`Expected ${e}, got ${n}`);\n        }\n        expectUint16(e, t) {\n            let n = this.readUint16();\n            if (n !== e) throw new Error(`Expected ${e}, got ${n}`);\n        }\n        expectUint24(e, t) {\n            let n = this.readUint24();\n            if (n !== e) throw new Error(`Expected ${e}, got ${n}`);\n        }\n        expectUint32(e, t) {\n            let n = this.readUint32();\n            if (n !== e) throw new Error(`Expected ${e}, got ${n}`);\n        }\n        expectLength(e, t = 1) {\n            let n = this.offset, i = n + e;\n            if (i > this.data.length) throw new Error(\"Expected length exceeds remaining data length\");\n            return this.indent += t, this.indents[n] = this.indent, [\n                ()=>{\n                    if (this.indent -= t, this.indents[this.offset] = this.indent, this.offset !== i) throw new Error(`${e} bytes expected but ${this.offset - n} read`);\n                },\n                ()=>i - this.offset\n            ];\n        }\n        expectLengthUint8(e) {\n            let t = this.readUint8();\n            return this.expectLength(t);\n        }\n        expectLengthUint16(e) {\n            let t = this.readUint16();\n            return this.expectLength(t);\n        }\n        expectLengthUint24(e) {\n            let t = this.readUint24();\n            return this.expectLength(t);\n        }\n        expectLengthUint32(e) {\n            let t = this.readUint32();\n            return this.expectLength(t);\n        }\n        expectLengthUint8Incl(e) {\n            let t = this.readUint8();\n            return this.expectLength(t - 1);\n        }\n        expectLengthUint16Incl(e) {\n            let t = this.readUint16();\n            return this.expectLength(t - 2);\n        }\n        expectLengthUint24Incl(e) {\n            let t = this.readUint24();\n            return this.expectLength(t - 3);\n        }\n        expectLengthUint32Incl(e) {\n            let t = this.readUint32();\n            return this.expectLength(t - 4);\n        }\n        writeBytes(e) {\n            return this.data.set(e, this.offset), this.offset += e.length, this;\n        }\n        writeUTF8String(e) {\n            let t = Gi.encode(e);\n            return this.writeBytes(t), this;\n        }\n        writeUTF8StringNullTerminated(e) {\n            let t = Gi.encode(e);\n            return this.writeBytes(t), this.writeUint8(0), this;\n        }\n        writeUint8(e, t) {\n            return this.dataView.setUint8(this.offset, e), this.offset += 1, this;\n        }\n        writeUint16(e, t) {\n            return this.dataView.setUint16(this.offset, e), this.offset += 2, this;\n        }\n        writeUint24(e, t) {\n            return this.writeUint8((e & 16711680) >> 16), this.writeUint16(e & 65535, t), this;\n        }\n        writeUint32(e, t) {\n            return this.dataView.setUint32(this.offset, e), this.offset += 4, this;\n        }\n        _writeLengthGeneric(e, t, n) {\n            let i = this.offset;\n            this.offset += e;\n            let s = this.offset;\n            return this.indent += 1, this.indents[s] = this.indent, ()=>{\n                let a = this.offset - (t ? i : s);\n                if (e === 1) this.dataView.setUint8(i, a);\n                else if (e === 2) this.dataView.setUint16(i, a);\n                else if (e === 3) this.dataView.setUint8(i, (a & 16711680) >> 16), this.dataView.setUint16(i + 1, a & 65535);\n                else if (e === 4) this.dataView.setUint32(i, a);\n                else throw new Error(`Invalid length for length field: ${e}`);\n                this.indent -= 1, this.indents[this.offset] = this.indent;\n            };\n        }\n        writeLengthUint8(e) {\n            return this._writeLengthGeneric(1, !1, e);\n        }\n        writeLengthUint16(e) {\n            return this._writeLengthGeneric(2, !1, e);\n        }\n        writeLengthUint24(e) {\n            return this._writeLengthGeneric(3, !1, e);\n        }\n        writeLengthUint32(e) {\n            return this._writeLengthGeneric(4, !1, e);\n        }\n        writeLengthUint8Incl(e) {\n            return this._writeLengthGeneric(1, !0, e);\n        }\n        writeLengthUint16Incl(e) {\n            return this._writeLengthGeneric(2, !0, e);\n        }\n        writeLengthUint24Incl(e) {\n            return this._writeLengthGeneric(3, !0, e);\n        }\n        writeLengthUint32Incl(e) {\n            return this._writeLengthGeneric(4, !0, e);\n        }\n        array() {\n            return this.data.subarray(0, this.offset);\n        }\n        commentedString(e = !1) {\n            let t = this.indents[0] !== void 0 ? xr.repeat(this.indents[0]) : \"\", n = this.indents[0] ?? 0, i = e ? this.data.length : this.offset;\n            for(let s = 0; s < i; s++){\n                t += this.data[s].toString(16).padStart(2, \"0\") + \" \";\n                let a = this.comments[s + 1];\n                this.indents[s + 1] !== void 0 && (n = this.indents[s + 1]), a && (t += ` ${a}\n${xr.repeat(n)}`);\n            }\n            return t;\n        }\n    }, o(it, \"N\"), it);\n    o(tu, \"St\");\n    o(Ie, \"K\");\n    o(ru, \"Ut\");\n    Nl = new RegExp(`  .+|^(${xr})+`, \"gm\"), rt = 16384, nu = rt + 1 + 255;\n    o(Ar, \"ht\");\n    o(vr, \"dt\");\n    o(iu, \"ee\");\n    o(zi, \"At\");\n    M = S.subtle, es = new TextEncoder;\n    o(Er, \"lt\");\n    o(su, \"ne\");\n    Yi = es.encode(\"tls13 \");\n    o(oe, \"S\");\n    o(au, \"Kt\");\n    o(ou, \"Tt\");\n    Ft = (st = class {\n        constructor(e, t, n){\n            g(this, \"recordsProcessed\", 0n);\n            g(this, \"priorPromise\", Promise.resolve(new Uint8Array));\n            this.mode = e, this.key = t, this.initialIv = n;\n        }\n        async process(e, t, n) {\n            let i = this.processUnsequenced(e, t, n);\n            return this.priorPromise = this.priorPromise.then(()=>i);\n        }\n        async processUnsequenced(e, t, n) {\n            let i = this.recordsProcessed;\n            this.recordsProcessed += 1n;\n            let s = this.initialIv.slice(), a = BigInt(s.length), u = a - 1n;\n            for(let f = 0n; f < a; f++){\n                let m = i >> (f << 3n);\n                if (m === 0n) break;\n                s[Number(u - f)] ^= Number(m & 0xffn);\n            }\n            let c = t << 3, h = {\n                name: \"AES-GCM\",\n                iv: s,\n                tagLength: c,\n                additionalData: n\n            }, l = await M[this.mode](h, this.key, e);\n            return new Uint8Array(l);\n        }\n    }, o(st, \"Q\"), st);\n    o(kt, \"yt\");\n    o(uu, \"Dt\");\n    Nt = (at = class extends Ae {\n        readASN1Length(e) {\n            let t = this.readUint8();\n            if (t < 128) return t;\n            let n = t & 127, i = 0;\n            if (n === 1) return this.readUint8(i);\n            if (n === 2) return this.readUint16(i);\n            if (n === 3) return this.readUint24(i);\n            if (n === 4) return this.readUint32(i);\n            throw new Error(`ASN.1 length fields are only supported up to 4 bytes (this o\\\nne is ${n} bytes)`);\n        }\n        expectASN1Length(e) {\n            let t = this.readASN1Length(e);\n            return this.expectLength(t);\n        }\n        readASN1OID() {\n            let [e, t] = this.expectASN1Length(0), n = this.readUint8(), i = `${Math.floor(n / 40)}.${n % 40}`;\n            for(; t() > 0;){\n                let s = 0;\n                for(;;){\n                    let a = this.readUint8();\n                    if (s <<= 7, s += a & 127, a < 128) break;\n                }\n                i += `.${s}`;\n            }\n            return e(), i;\n        }\n        readASN1Boolean() {\n            let [e, t] = this.expectASN1Length(0), n = t();\n            if (n !== 1) throw new Error(`Boolean has weird length: ${n}`);\n            let i = this.readUint8(), s;\n            if (i === 255) s = !0;\n            else if (i === 0) s = !1;\n            else throw new Error(`Boolean has weird value: 0x${Ie([\n                i\n            ])}`);\n            return e(), s;\n        }\n        readASN1UTCTime() {\n            let [e, t] = this.expectASN1Length(0), n = this.readUTF8String(t()).match(/^(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)Z$/);\n            if (!n) throw new Error(\"Unrecognised ASN.1 UTC time format\");\n            let [, i, s, a, u, c, h] = n, l = parseInt(i, 10), f = l + (l >= 50 ? 1900 : 2e3), m = new Date(`${f}-${s}-${a}T${u}:${c}:${h}Z`);\n            return e(), m;\n        }\n        readASN1BitString() {\n            let [e, t] = this.expectASN1Length(0), n = this.readUint8(0), i = t(), s = this.readBytes(i);\n            if (n > 7) throw new Error(`Invalid right pad value: ${n}`);\n            if (n > 0) {\n                let a = 8 - n;\n                for(let u = i - 1; u > 0; u--)s[u] = 255 & s[u - 1] << a | s[u] >>> n;\n                s[0] = s[0] >>> n;\n            }\n            return e(), s;\n        }\n    }, o(at, \"_\"), at);\n    o(Ji, \"mt\");\n    gr = 1, Dt = 2, se = 48, cu = 49, je = 6, hu = 19, lu = 12, Zi = 23, Sr = 5, Me = 4, br = 3, fu = 163, He = 128, du = {\n        \"2.5.4.6\": \"C\",\n        \"2.5.4.10\": \"O\",\n        \"2.5.4.11\": \"OU\",\n        \"2.5.4.3\": \"CN\",\n        \"2.5.4.7\": \"L\",\n        \"2.5.4.8\": \"ST\",\n        \"2.5.4.12\": \"T\",\n        \"2.5.4.42\": \"GN\",\n        \"2.5.4.43\": \"I\",\n        \"2.5.4.4\": \"SN\",\n        \"1.2.840.113549.1.9.1\": \"E-mail\"\n    };\n    o(pu, \"qt\");\n    o(Xi, \"Ct\");\n    o(yu, \"Bt\");\n    o(wu, \"Ft\");\n    o(ts, \"Ot\");\n    o(mu, \"Pt\");\n    gu = [\n        \"digitalSignature\",\n        \"nonRepudiation\",\n        \"keyEncipherment\",\n        \"dataEncipherment\",\n        \"keyAgreement\",\n        \"keyCertSign\",\n        \"cRLSign\",\n        \"encipherOnly\",\n        \"decipherOnly\"\n    ], nt = (ot = class {\n        constructor(e){\n            g(this, \"serialNumber\");\n            g(this, \"algorithm\");\n            g(this, \"issuer\");\n            g(this, \"validityPeriod\");\n            g(this, \"subject\");\n            g(this, \"publicKey\");\n            g(this, \"signature\");\n            g(this, \"keyUsage\");\n            g(this, \"subjectAltNames\");\n            g(this, \"extKeyUsage\");\n            g(this, \"authorityKeyIdentifier\");\n            g(this, \"subjectKeyIdentifier\");\n            g(this, \"basicConstraints\");\n            g(this, \"signedData\");\n            let t = e instanceof Nt ? e : new Nt(e);\n            t.expectUint8(se, 0);\n            let [n] = t.expectASN1Length(0), i = t.offset;\n            t.expectUint8(se, 0);\n            let [s] = t.expectASN1Length(0);\n            t.expectBytes([\n                160,\n                3,\n                2,\n                1,\n                2\n            ], 0), t.expectUint8(Dt, 0);\n            let [a, u] = t.expectASN1Length(0);\n            this.serialNumber = t.subarray(u()), a(), t.expectUint8(se, 0);\n            let [c, h] = t.expectASN1Length(0);\n            t.expectUint8(je, 0), this.algorithm = t.readASN1OID(), h() > 0 && (t.expectUint8(Sr, 0), t.expectUint8(0, 0)), c(), this.issuer = Xi(t, \"issuer\"), t.expectUint8(se, 0);\n            let [l] = t.expectASN1Length(0);\n            t.expectUint8(Zi, 0);\n            let f = t.readASN1UTCTime();\n            t.expectUint8(Zi, 0);\n            let m = t.readASN1UTCTime();\n            this.validityPeriod = {\n                notBefore: f,\n                notAfter: m\n            }, l(), this.subject = Xi(t, \"subject\");\n            let x = t.offset;\n            t.expectUint8(se, 0);\n            let [C] = t.expectASN1Length(0);\n            t.expectUint8(se, 0);\n            let [I, T] = t.expectASN1Length(0), P = [];\n            for(; T() > 0;){\n                let he = t.readUint8();\n                if (he === je) {\n                    let R = t.readASN1OID();\n                    P.push(R);\n                } else he === Sr && t.expectUint8(0, 0);\n            }\n            I(), t.expectUint8(br, 0);\n            let b = t.readASN1BitString();\n            this.publicKey = {\n                identifiers: P,\n                data: b,\n                all: t.data.subarray(x, t.offset)\n            }, C(), t.expectUint8(fu, 0);\n            let [A] = t.expectASN1Length();\n            t.expectUint8(se, 0);\n            let [j, K] = t.expectASN1Length(0);\n            for(; K() > 0;){\n                t.expectUint8(se, 0);\n                let [he, R] = t.expectASN1Length();\n                t.expectUint8(je, 0);\n                let $ = t.readASN1OID();\n                if ($ === \"2.5.29.17\") {\n                    t.expectUint8(Me, 0);\n                    let [W] = t.expectASN1Length(0);\n                    t.expectUint8(se, 0);\n                    let V = yu(t, He);\n                    this.subjectAltNames = V.filter((z)=>z.type === (2 | He)).map((z)=>z.name), W();\n                } else if ($ === \"2.5.29.15\") {\n                    t.expectUint8(gr, 0);\n                    let W = t.readASN1Boolean();\n                    t.expectUint8(Me, 0);\n                    let [V] = t.expectASN1Length(0);\n                    t.expectUint8(br, 0);\n                    let z = t.readASN1BitString(), J = pu(z), D = new Set(gu.filter((Y, ee)=>J & 1 << ee));\n                    V(), this.keyUsage = {\n                        critical: W,\n                        usages: D\n                    };\n                } else if ($ === \"2.5.29.37\") {\n                    this.extKeyUsage = {}, t.expectUint8(Me, 0);\n                    let [W] = t.expectASN1Length(0);\n                    t.expectUint8(se, 0);\n                    let [V, z] = t.expectASN1Length(0);\n                    for(; z() > 0;){\n                        t.expectUint8(je, 0);\n                        let J = t.readASN1OID();\n                        J === \"1.3.6.1.5.5.7.3.1\" && (this.extKeyUsage.serverTls = !0), J === \"1.3.6.1.5.5.7.3.2\" && (this.extKeyUsage.clientTls = !0);\n                    }\n                    V(), W();\n                } else if ($ === \"2.5.29.35\") {\n                    t.expectUint8(Me, 0);\n                    let [W] = t.expectASN1Length(0);\n                    t.expectUint8(se, 0);\n                    let [V, z] = t.expectASN1Length(0);\n                    for(; z() > 0;){\n                        let J = t.readUint8();\n                        if (J === (He | 0)) {\n                            let [D, Y] = t.expectASN1Length(0);\n                            this.authorityKeyIdentifier = t.readBytes(Y()), D();\n                        } else if (J === (He | 1)) {\n                            let [D, Y] = t.expectASN1Length(0);\n                            t.skip(Y(), 0), D();\n                        } else if (J === (He | 2)) {\n                            let [D, Y] = t.expectASN1Length(0);\n                            t.skip(Y(), 0), D();\n                        } else if (J === (He | 33)) {\n                            let [D, Y] = t.expectASN1Length(0);\n                            t.skip(Y(), 0), D();\n                        } else throw new Error(`Unexpected data type ${J} in authorit\\\nyKeyIdentifier certificate extension`);\n                    }\n                    V(), W();\n                } else if ($ === \"2.5.29.14\") {\n                    t.expectUint8(Me, 0);\n                    let [W] = t.expectASN1Length(0);\n                    t.expectUint8(Me, 0);\n                    let [V, z] = t.expectASN1Length(0);\n                    this.subjectKeyIdentifier = t.readBytes(z()), V(), W();\n                } else if ($ === \"2.5.29.19\") {\n                    let W, V = t.readUint8();\n                    if (V === gr && (W = t.readASN1Boolean(), V = t.readUint8()), V !== Me) throw new Error(\"Unexpected type in certificate basic constraints\");\n                    let [z] = t.expectASN1Length(0);\n                    t.expectUint8(se, 0);\n                    let [J, D] = t.expectASN1Length(), Y;\n                    D() > 0 && (t.expectUint8(gr, 0), Y = t.readASN1Boolean());\n                    let ee;\n                    if (D() > 0) {\n                        t.expectUint8(Dt, 0);\n                        let O = t.readASN1Length(0);\n                        if (ee = O === 1 ? t.readUint8() : O === 2 ? t.readUint16() : O === 3 ? t.readUint24() : void 0, ee === void 0) throw new Error(\"Too many bytes in max path length in certificate basicConstraints\");\n                    }\n                    J(), z(), this.basicConstraints = {\n                        critical: W,\n                        ca: Y,\n                        pathLength: ee\n                    };\n                } else t.skip(R(), 0);\n                he();\n            }\n            j(), A(), s(), this.signedData = t.data.subarray(i, t.offset), t.expectUint8(se, 0);\n            let [F, q] = t.expectASN1Length(0);\n            t.expectUint8(je, 0);\n            let k = t.readASN1OID();\n            if (q() > 0 && (t.expectUint8(Sr, 0), t.expectUint8(0, 0)), F(), k !== this.algorithm) throw new Error(`Certificate specifies different signature algorithms inside (${this.algorithm})\\\n and out (${k})`);\n            t.expectUint8(br, 0), this.signature = t.readASN1BitString(), n();\n        }\n        static distinguishedNamesAreEqual(e, t) {\n            return Ji(e) === Ji(t);\n        }\n        static readableDN(e) {\n            return Object.entries(e).map((t)=>t.join(\"=\")).join(\", \");\n        }\n        static fromPEM(e) {\n            let t = \"[A-Z0-9 ]+\", n = new RegExp(`-{5}BEGIN ${t}\\\n-{5}([a-zA-Z0-9=+\\\\/\\\\n\\\\r]+)-{5}END ${t}-{5}`, \"g\"), i = [], s = null;\n            for(; s = n.exec(e);){\n                let a = s[1].replace(/[\\r\\n]/g, \"\"), u = uu(a), c = new this(u);\n                i.push(c);\n            }\n            return i;\n        }\n        subjectAltNameMatchingHost(e) {\n            let t = /[.][^.]+[.][^.]+$/;\n            return (this.subjectAltNames ?? []).find((n)=>{\n                let i = n, s = e;\n                if (t.test(e) && t.test(i) && i.startsWith(\"*.\") && (i = i.slice(1), s = s.slice(s.indexOf(\".\"))), i === s) return !0;\n            });\n        }\n        isValidAtMoment(e = new Date) {\n            return e >= this.validityPeriod.notBefore && e <= this.validityPeriod.notAfter;\n        }\n        description() {\n            return \"subject: \" + nt.readableDN(this.subject) + (this.subjectAltNames ? `\nsubject alt names: ` + this.subjectAltNames.join(\", \") : \"\") + (this.subjectKeyIdentifier ? `\nsubject key id: ${Ie(this.subjectKeyIdentifier, \" \")}` : \"\") + `\nissuer: ` + nt.readableDN(this.issuer) + (this.authorityKeyIdentifier ? `\nauthority key id: ${Ie(this.authorityKeyIdentifier, \" \")}` : \"\") + `\nvalidity: ` + this.validityPeriod.notBefore.toISOString() + \" – \" + this.validityPeriod.notAfter.toISOString() + ` (${this.isValidAtMoment() ? \"currently valid\" : \"not valid\"}\\\n)` + (this.keyUsage ? `\nkey usage (${this.keyUsage.critical ? \"critical\" : \"non-critical\"}): ` + [\n                ...this.keyUsage.usages\n            ].join(\", \") : \"\") + (this.extKeyUsage ? `\nextended key usage: TLS server \\u2014\\xA0${this.extKeyUsage.serverTls}, TLS clie\\\nnt \\u2014\\xA0${this.extKeyUsage.clientTls}` : \"\") + (this.basicConstraints ? `\nbasic constraints (${this.basicConstraints.critical ? \"critical\" : \"non-critical\"}):\\\n CA \\u2014\\xA0${this.basicConstraints.ca}, path length \\u2014 ${this.basicConstraints.pathLength}` : \"\") + `\nsignature algorithm: ` + mu(wu(this.algorithm));\n        }\n        toJSON() {\n            return {\n                serialNumber: [\n                    ...this.serialNumber\n                ],\n                algorithm: this.algorithm,\n                issuer: this.issuer,\n                validityPeriod: {\n                    notBefore: this.validityPeriod.notBefore.toISOString(),\n                    notAfter: this.validityPeriod.notAfter.toISOString()\n                },\n                subject: this.subject,\n                publicKey: {\n                    identifiers: this.publicKey.identifiers,\n                    data: [\n                        ...this.publicKey.data\n                    ],\n                    all: [\n                        ...this.publicKey.all\n                    ]\n                },\n                signature: [\n                    ...this.signature\n                ],\n                keyUsage: {\n                    critical: this.keyUsage?.critical,\n                    usages: [\n                        ...this.keyUsage?.usages ?? []\n                    ]\n                },\n                subjectAltNames: this.subjectAltNames,\n                extKeyUsage: this.extKeyUsage,\n                authorityKeyIdentifier: this.authorityKeyIdentifier && [\n                    ...this.authorityKeyIdentifier\n                ],\n                subjectKeyIdentifier: this.subjectKeyIdentifier && [\n                    ...this.subjectKeyIdentifier\n                ],\n                basicConstraints: this.basicConstraints,\n                signedData: [\n                    ...this.signedData\n                ]\n            };\n        }\n    }, o(ot, \"P\"), ot), Cr = (ut = class extends nt {\n    }, o(ut, \"st\"), ut);\n    o(rs, \"pt\");\n    o(Su, \"jt\");\n    bu = new TextEncoder;\n    o(xu, \"Vt\");\n    o(ns, \"he\");\n    Au = (ct = class {\n        constructor(){\n            g(this, \"queue\");\n            g(this, \"outstandingRequest\");\n            this.queue = [];\n        }\n        enqueue(e) {\n            this.queue.push(e), this.dequeue();\n        }\n        dequeue() {\n            if (this.outstandingRequest === void 0) return;\n            let { resolve: e, bytes: t } = this.outstandingRequest, n = this.bytesInQueue();\n            if (n < t && this.socketIsNotClosed()) return;\n            if (t = Math.min(t, n), t === 0) return e(void 0);\n            this.outstandingRequest = void 0;\n            let i = this.queue[0], s = i.length;\n            if (s === t) return this.queue.shift(), e(i);\n            if (s > t) return this.queue[0] = i.subarray(t), e(i.subarray(0, t));\n            {\n                let a = new Uint8Array(t), u = t, c = 0;\n                for(; u > 0;){\n                    let h = this.queue[0], l = h.length;\n                    l <= u ? (this.queue.shift(), a.set(h, c), c += l, u -= l) : (this.queue[0] = h.subarray(u), a.set(h.subarray(0, u), c), u -= u, c += u);\n                }\n                return e(a);\n            }\n        }\n        bytesInQueue() {\n            return this.queue.reduce((e, t)=>e + t.length, 0);\n        }\n        async read(e) {\n            if (this.outstandingRequest !== void 0) throw new Error(\"Can’t read while already awaiting read\");\n            return new Promise((t)=>{\n                this.outstandingRequest = {\n                    resolve: t,\n                    bytes: e\n                }, this.dequeue();\n            });\n        }\n    }, o(ct, \"xt\"), ct), is = (ht = class extends Au {\n        constructor(e){\n            super(), this.socket = e, e.addEventListener(\"message\", (t)=>this.enqueue(new Uint8Array(t.data))), e.addEventListener(\"close\", ()=>this.dequeue());\n        }\n        socketIsNotClosed() {\n            let { socket: e } = this, { readyState: t } = e;\n            return t <= 1;\n        }\n    }, o(ht, \"vt\"), ht);\n});\nvar _r, as = ie(()=>{\n    _r = `-----BEGIN CERTIFICATE-----\nMIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw\nTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\ncmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4\nWhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu\nZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY\nMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc\nh77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+\n0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U\nA5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW\nT8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH\nB5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC\nB5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv\nKBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn\nOlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn\njh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw\nqHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI\nrU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq\nhkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL\nubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ\n3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK\nNFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5\nORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur\nTkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC\njNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc\noyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq\n4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA\nmRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d\nemyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=\n-----END CERTIFICATE-----\n`;\n});\nvar us = {};\nye(us, {\n    Socket: ()=>Le,\n    isIP: ()=>Eu\n});\nfunction Eu(r) {\n    return 0;\n}\nvar os, B, Le, qt = ie(()=>{\n    \"use strict\";\n    p();\n    os = et(Ue(), 1);\n    ss();\n    as();\n    o(Eu, \"isIP\");\n    B = class B extends os.EventEmitter {\n        constructor(){\n            super(...arguments);\n            g(this, \"_poolQueryViaFetch\");\n            g(this, \"_fetchConnectionCache\");\n            g(this, \"_webSocketConstructor\");\n            g(this, \"_wsProxy\");\n            g(this, \"_coalesceWrites\");\n            g(this, \"_useSecureWebSocket\");\n            g(this, \"_forceDisablePgSSL\");\n            g(this, \"_disableSNI\");\n            g(this, \"_pipelineConnect\");\n            g(this, \"_pipelineTLS\");\n            g(this, \"_rootCerts\");\n            g(this, \"connecting\", !1);\n            g(this, \"pending\", !0);\n            g(this, \"writable\", !0);\n            g(this, \"encrypted\", !1);\n            g(this, \"authorized\", !1);\n            g(this, \"destroyed\", !1);\n            g(this, \"ws\", null);\n            g(this, \"writeBuffer\");\n            g(this, \"tlsState\", 0);\n            g(this, \"tlsRead\");\n            g(this, \"tlsWrite\");\n        }\n        get poolQueryViaFetch() {\n            return this._poolQueryViaFetch ?? B.poolQueryViaFetch ?? B.defaults.poolQueryViaFetch;\n        }\n        set poolQueryViaFetch(t) {\n            this._poolQueryViaFetch = t;\n        }\n        get fetchConnectionCache() {\n            return this._fetchConnectionCache ?? B.fetchConnectionCache ?? B.defaults.fetchConnectionCache;\n        }\n        set fetchConnectionCache(t) {\n            this._fetchConnectionCache = t;\n        }\n        get webSocketConstructor() {\n            return this._webSocketConstructor ?? B.webSocketConstructor ?? B.defaults.webSocketConstructor;\n        }\n        set webSocketConstructor(t) {\n            this._webSocketConstructor = t;\n        }\n        get wsProxy() {\n            return this._wsProxy ?? B.wsProxy ?? B.defaults.wsProxy;\n        }\n        set wsProxy(t) {\n            this._wsProxy = t;\n        }\n        get coalesceWrites() {\n            return this._coalesceWrites ?? B.coalesceWrites ?? B.defaults.coalesceWrites;\n        }\n        set coalesceWrites(t) {\n            this._coalesceWrites = t;\n        }\n        get useSecureWebSocket() {\n            return this._useSecureWebSocket ?? B.useSecureWebSocket ?? B.defaults.useSecureWebSocket;\n        }\n        set useSecureWebSocket(t) {\n            this._useSecureWebSocket = t;\n        }\n        get forceDisablePgSSL() {\n            return this._forceDisablePgSSL ?? B.forceDisablePgSSL ?? B.defaults.forceDisablePgSSL;\n        }\n        set forceDisablePgSSL(t) {\n            this._forceDisablePgSSL = t;\n        }\n        get disableSNI() {\n            return this._disableSNI ?? B.disableSNI ?? B.defaults.disableSNI;\n        }\n        set disableSNI(t) {\n            this._disableSNI = t;\n        }\n        get pipelineConnect() {\n            return this._pipelineConnect ?? B.pipelineConnect ?? B.defaults.pipelineConnect;\n        }\n        set pipelineConnect(t) {\n            this._pipelineConnect = t;\n        }\n        get pipelineTLS() {\n            return this._pipelineTLS ?? B.pipelineTLS ?? B.defaults.pipelineTLS;\n        }\n        set pipelineTLS(t) {\n            this._pipelineTLS = t;\n        }\n        get rootCerts() {\n            return this._rootCerts ?? B.rootCerts ?? B.defaults.rootCerts;\n        }\n        set rootCerts(t) {\n            this._rootCerts = t;\n        }\n        wsProxyAddrForHost(t, n) {\n            let i = this.wsProxy;\n            if (i === void 0) throw new Error(\"No WebSocket proxy is configured. Please refer to https://github.com/neondatabase/serverless#run-your-own-websocket-proxy\");\n            return typeof i == \"function\" ? i(t, n) : `${i}?address=${t}:${n}`;\n        }\n        setNoDelay() {\n            return this;\n        }\n        setKeepAlive() {\n            return this;\n        }\n        ref() {\n            return this;\n        }\n        unref() {\n            return this;\n        }\n        async connect(t, n, i) {\n            this.connecting = !0, i && this.once(\"connect\", i);\n            let s;\n            try {\n                s = this.wsProxyAddrForHost(n, typeof t == \"string\" ? parseInt(t, 10) : t);\n            } catch (a) {\n                this.emit(\"error\", a), this.emit(\"close\");\n                return;\n            }\n            return this.ws = await new Promise(async (a)=>{\n                try {\n                    let c = (this.useSecureWebSocket ? \"wss:\" : \"ws:\") + \"//\" + s, h;\n                    if (this.webSocketConstructor !== void 0) h = new this.webSocketConstructor(c);\n                    else try {\n                        h = new WebSocket(c);\n                    } catch  {\n                        h = new __unstable_WebSocket(c);\n                    }\n                    h.addEventListener(\"open\", ()=>{\n                        a(h);\n                    });\n                } catch (u) {\n                    try {\n                        let h = (this.useSecureWebSocket ? \"https:\" : \"http:\") + \"//\" + s;\n                        await fetch(h, {\n                            headers: {\n                                Upgrade: \"websocket\"\n                            }\n                        }).then((l)=>{\n                            let f = l.webSocket;\n                            if (f == null) throw u;\n                            f.accept(), a(f);\n                        });\n                    } catch  {\n                        this.emit(\"error\", new Error(\"All attempts to open a WebSocket to connect to the database failed. Please refer to https://github.com/neondatabase/serverless#run-on-node\")), this.emit(\"close\");\n                        return;\n                    }\n                }\n            }), this.ws.binaryType = \"arraybuffer\", this.ws.addEventListener(\"error\", (a)=>{\n                this.emit(\"error\", a), this.emit(\"close\");\n            }), this.ws.addEventListener(\"close\", ()=>{\n                this.emit(\"close\");\n            }), this.ws.addEventListener(\"message\", (a)=>{\n                if (this.tlsState === 0) {\n                    let u = y.from(a.data);\n                    this.emit(\"data\", u);\n                }\n            }), this.connecting = !1, this.pending = !1, this.emit(\"connect\"), this.emit(\"ready\"), this;\n        }\n        async startTls(t) {\n            this.tlsState = 1;\n            let n = Cr.fromPEM(_r), i = new is(this.ws), s = i.read.bind(i), a = this.rawWrite.bind(this), [u, c] = await ns(t, n, s, a, {\n                useSNI: !this.disableSNI,\n                expectPreData: this.pipelineTLS ? new Uint8Array([\n                    83\n                ]) : void 0\n            });\n            this.tlsRead = u, this.tlsWrite = c, this.tlsState = 2, this.encrypted = !0, this.authorized = !0, this.emit(\"secureConnection\", this), this.tlsReadLoop();\n        }\n        async tlsReadLoop() {\n            for(;;){\n                let t = await this.tlsRead();\n                if (t === void 0) break;\n                {\n                    let n = y.from(t);\n                    this.emit(\"data\", n);\n                }\n            }\n        }\n        rawWrite(t) {\n            if (!this.coalesceWrites) {\n                this.ws.send(t);\n                return;\n            }\n            if (this.writeBuffer === void 0) this.writeBuffer = t, setTimeout(()=>{\n                this.ws.send(this.writeBuffer), this.writeBuffer = void 0;\n            }, 0);\n            else {\n                let n = new Uint8Array(this.writeBuffer.length + t.length);\n                n.set(this.writeBuffer), n.set(t, this.writeBuffer.length), this.writeBuffer = n;\n            }\n        }\n        write(t, n = \"utf8\", i = (s)=>{}) {\n            return t.length === 0 ? i() : (typeof t == \"string\" && (t = y.from(t, n)), this.tlsState === 0 ? this.rawWrite(t) : this.tlsState === 1 ? this.once(\"secureConnection\", ()=>this.write(t, n, i)) : this.tlsWrite(t), !0);\n        }\n        end(t = y.alloc(0), n = \"utf8\", i) {\n            return this.write(t, n, ()=>{\n                this.ws.close(), i && i();\n            }), this;\n        }\n        destroy() {\n            return this.destroyed = !0, this.end();\n        }\n    };\n    o(B, \"Socket\"), g(B, \"defaults\", {\n        poolQueryViaFetch: !1,\n        fetchConnectionCache: !1,\n        webSocketConstructor: void 0,\n        wsProxy: (t)=>t + \"/v2\",\n        useSecureWebSocket: !0,\n        forceDisablePgSSL: !0,\n        coalesceWrites: !0,\n        disableSNI: !1,\n        pipelineConnect: \"password\",\n        pipelineTLS: !1,\n        rootCerts: _r\n    }), g(B, \"poolQueryViaFetch\"), g(B, \"fetchConnectionCache\"), g(B, \"webSocketConstructor\"), g(B, \"wsProxy\"), g(B, \"coalesceWrites\"), g(B, \"useSecureWebSocket\"), g(B, \"forceDisablePgSSL\"), g(B, \"disableSNI\"), g(B, \"pipelineConnect\"), g(B, \"pipelineTLS\"), g(B, \"rootCerts\");\n    Le = B;\n});\nfunction ft(r) {\n    let e = 1779033703, t = 3144134277, n = 1013904242, i = 2773480762, s = 1359893119, a = 2600822924, u = 528734635, c = 1541459225, h = 0, l = 0, f = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n    ], m = o((b, A)=>b >>> A | b << 32 - A, \"rrot\"), x = new Uint32Array(64), C = new Uint8Array(64), I = o(()=>{\n        for(let R = 0, $ = 0; R < 16; R++, $ += 4)x[R] = C[$] << 24 | C[$ + 1] << 16 | C[$ + 2] << 8 | C[$ + 3];\n        for(let R = 16; R < 64; R++){\n            let $ = m(x[R - 15], 7) ^ m(x[R - 15], 18) ^ x[R - 15] >>> 3, W = m(x[R - 2], 17) ^ m(x[R - 2], 19) ^ x[R - 2] >>> 10;\n            x[R] = x[R - 16] + $ + x[R - 7] + W | 0;\n        }\n        let b = e, A = t, j = n, K = i, F = s, q = a, k = u, he = c;\n        for(let R = 0; R < 64; R++){\n            let $ = m(F, 6) ^ m(F, 11) ^ m(F, 25), W = F & q ^ ~F & k, V = he + $ + W + f[R] + x[R] | 0, z = m(b, 2) ^ m(b, 13) ^ m(b, 22), J = b & A ^ b & j ^ A & j, D = z + J | 0;\n            he = k, k = q, q = F, F = K + V | 0, K = j, j = A, A = b, b = V + D | 0;\n        }\n        e = e + b | 0, t = t + A | 0, n = n + j | 0, i = i + K | 0, s = s + F | 0, a = a + q | 0, u = u + k | 0, c = c + he | 0, l = 0;\n    }, \"process\"), T = o((b)=>{\n        typeof b == \"string\" && (b = new TextEncoder().encode(b));\n        for(let A = 0; A < b.length; A++)C[l++] = b[A], l === 64 && I();\n        h += b.length;\n    }, \"add\"), P = o(()=>{\n        if (C[l++] = 128, l == 64 && I(), l + 8 > 64) {\n            for(; l < 64;)C[l++] = 0;\n            I();\n        }\n        for(; l < 58;)C[l++] = 0;\n        let b = h * 8;\n        C[l++] = b / 1099511627776 & 255, C[l++] = b / 4294967296 & 255, C[l++] = b >>> 24, C[l++] = b >>> 16 & 255, C[l++] = b >>> 8 & 255, C[l++] = b & 255, I();\n        let A = new Uint8Array(32);\n        return A[0] = e >>> 24, A[1] = e >>> 16 & 255, A[2] = e >>> 8 & 255, A[3] = e & 255, A[4] = t >>> 24, A[5] = t >>> 16 & 255, A[6] = t >>> 8 & 255, A[7] = t & 255, A[8] = n >>> 24, A[9] = n >>> 16 & 255, A[10] = n >>> 8 & 255, A[11] = n & 255, A[12] = i >>> 24, A[13] = i >>> 16 & 255, A[14] = i >>> 8 & 255, A[15] = i & 255, A[16] = s >>> 24, A[17] = s >>> 16 & 255, A[18] = s >>> 8 & 255, A[19] = s & 255, A[20] = a >>> 24, A[21] = a >>> 16 & 255, A[22] = a >>> 8 & 255, A[23] = a & 255, A[24] = u >>> 24, A[25] = u >>> 16 & 255, A[26] = u >>> 8 & 255, A[27] = u & 255, A[28] = c >>> 24, A[29] = c >>> 16 & 255, A[30] = c >>> 8 & 255, A[31] = c & 255, A;\n    }, \"digest\");\n    return r === void 0 ? {\n        add: T,\n        digest: P\n    } : (T(r), P());\n}\nvar cs = ie(()=>{\n    \"use strict\";\n    p();\n    o(ft, \"sha256\");\n});\nvar X, dt, hs = ie(()=>{\n    \"use strict\";\n    p();\n    X = class X {\n        constructor(){\n            g(this, \"_dataLength\", 0);\n            g(this, \"_bufferLength\", 0);\n            g(this, \"_state\", new Int32Array(4));\n            g(this, \"_buffer\", new ArrayBuffer(68));\n            g(this, \"_buffer8\");\n            g(this, \"_buffer32\");\n            this._buffer8 = new Uint8Array(this._buffer, 0, 68), this._buffer32 = new Uint32Array(this._buffer, 0, 17), this.start();\n        }\n        static hashByteArray(e, t = !1) {\n            return this.onePassHasher.start().appendByteArray(e).end(t);\n        }\n        static hashStr(e, t = !1) {\n            return this.onePassHasher.start().appendStr(e).end(t);\n        }\n        static hashAsciiStr(e, t = !1) {\n            return this.onePassHasher.start().appendAsciiStr(e).end(t);\n        }\n        static _hex(e) {\n            let t = X.hexChars, n = X.hexOut, i, s, a, u;\n            for(u = 0; u < 4; u += 1)for(s = u * 8, i = e[u], a = 0; a < 8; a += 2)n[s + 1 + a] = t.charAt(i & 15), i >>>= 4, n[s + 0 + a] = t.charAt(i & 15), i >>>= 4;\n            return n.join(\"\");\n        }\n        static _md5cycle(e, t) {\n            let n = e[0], i = e[1], s = e[2], a = e[3];\n            n += (i & s | ~i & a) + t[0] - 680876936 | 0, n = (n << 7 | n >>> 25) + i | 0, a += (n & i | ~n & s) + t[1] - 389564586 | 0, a = (a << 12 | a >>> 20) + n | 0, s += (a & n | ~a & i) + t[2] + 606105819 | 0, s = (s << 17 | s >>> 15) + a | 0, i += (s & a | ~s & n) + t[3] - 1044525330 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & a) + t[4] - 176418897 | 0, n = (n << 7 | n >>> 25) + i | 0, a += (n & i | ~n & s) + t[5] + 1200080426 | 0, a = (a << 12 | a >>> 20) + n | 0, s += (a & n | ~a & i) + t[6] - 1473231341 | 0, s = (s << 17 | s >>> 15) + a | 0, i += (s & a | ~s & n) + t[7] - 45705983 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & a) + t[8] + 1770035416 | 0, n = (n << 7 | n >>> 25) + i | 0, a += (n & i | ~n & s) + t[9] - 1958414417 | 0, a = (a << 12 | a >>> 20) + n | 0, s += (a & n | ~a & i) + t[10] - 42063 | 0, s = (s << 17 | s >>> 15) + a | 0, i += (s & a | ~s & n) + t[11] - 1990404162 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & a) + t[12] + 1804603682 | 0, n = (n << 7 | n >>> 25) + i | 0, a += (n & i | ~n & s) + t[13] - 40341101 | 0, a = (a << 12 | a >>> 20) + n | 0, s += (a & n | ~a & i) + t[14] - 1502002290 | 0, s = (s << 17 | s >>> 15) + a | 0, i += (s & a | ~s & n) + t[15] + 1236535329 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & a | s & ~a) + t[1] - 165796510 | 0, n = (n << 5 | n >>> 27) + i | 0, a += (n & s | i & ~s) + t[6] - 1069501632 | 0, a = (a << 9 | a >>> 23) + n | 0, s += (a & i | n & ~i) + t[11] + 643717713 | 0, s = (s << 14 | s >>> 18) + a | 0, i += (s & n | a & ~n) + t[0] - 373897302 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & a | s & ~a) + t[5] - 701558691 | 0, n = (n << 5 | n >>> 27) + i | 0, a += (n & s | i & ~s) + t[10] + 38016083 | 0, a = (a << 9 | a >>> 23) + n | 0, s += (a & i | n & ~i) + t[15] - 660478335 | 0, s = (s << 14 | s >>> 18) + a | 0, i += (s & n | a & ~n) + t[4] - 405537848 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & a | s & ~a) + t[9] + 568446438 | 0, n = (n << 5 | n >>> 27) + i | 0, a += (n & s | i & ~s) + t[14] - 1019803690 | 0, a = (a << 9 | a >>> 23) + n | 0, s += (a & i | n & ~i) + t[3] - 187363961 | 0, s = (s << 14 | s >>> 18) + a | 0, i += (s & n | a & ~n) + t[8] + 1163531501 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & a | s & ~a) + t[13] - 1444681467 | 0, n = (n << 5 | n >>> 27) + i | 0, a += (n & s | i & ~s) + t[2] - 51403784 | 0, a = (a << 9 | a >>> 23) + n | 0, s += (a & i | n & ~i) + t[7] + 1735328473 | 0, s = (s << 14 | s >>> 18) + a | 0, i += (s & n | a & ~n) + t[12] - 1926607734 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i ^ s ^ a) + t[5] - 378558 | 0, n = (n << 4 | n >>> 28) + i | 0, a += (n ^ i ^ s) + t[8] - 2022574463 | 0, a = (a << 11 | a >>> 21) + n | 0, s += (a ^ n ^ i) + t[11] + 1839030562 | 0, s = (s << 16 | s >>> 16) + a | 0, i += (s ^ a ^ n) + t[14] - 35309556 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ a) + t[1] - 1530992060 | 0, n = (n << 4 | n >>> 28) + i | 0, a += (n ^ i ^ s) + t[4] + 1272893353 | 0, a = (a << 11 | a >>> 21) + n | 0, s += (a ^ n ^ i) + t[7] - 155497632 | 0, s = (s << 16 | s >>> 16) + a | 0, i += (s ^ a ^ n) + t[10] - 1094730640 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ a) + t[13] + 681279174 | 0, n = (n << 4 | n >>> 28) + i | 0, a += (n ^ i ^ s) + t[0] - 358537222 | 0, a = (a << 11 | a >>> 21) + n | 0, s += (a ^ n ^ i) + t[3] - 722521979 | 0, s = (s << 16 | s >>> 16) + a | 0, i += (s ^ a ^ n) + t[6] + 76029189 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ a) + t[9] - 640364487 | 0, n = (n << 4 | n >>> 28) + i | 0, a += (n ^ i ^ s) + t[12] - 421815835 | 0, a = (a << 11 | a >>> 21) + n | 0, s += (a ^ n ^ i) + t[15] + 530742520 | 0, s = (s << 16 | s >>> 16) + a | 0, i += (s ^ a ^ n) + t[2] - 995338651 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (s ^ (i | ~a)) + t[0] - 198630844 | 0, n = (n << 6 | n >>> 26) + i | 0, a += (i ^ (n | ~s)) + t[7] + 1126891415 | 0, a = (a << 10 | a >>> 22) + n | 0, s += (n ^ (a | ~i)) + t[14] - 1416354905 | 0, s = (s << 15 | s >>> 17) + a | 0, i += (a ^ (s | ~n)) + t[5] - 57434055 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~a)) + t[12] + 1700485571 | 0, n = (n << 6 | n >>> 26) + i | 0, a += (i ^ (n | ~s)) + t[3] - 1894986606 | 0, a = (a << 10 | a >>> 22) + n | 0, s += (n ^ (a | ~i)) + t[10] - 1051523 | 0, s = (s << 15 | s >>> 17) + a | 0, i += (a ^ (s | ~n)) + t[1] - 2054922799 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~a)) + t[8] + 1873313359 | 0, n = (n << 6 | n >>> 26) + i | 0, a += (i ^ (n | ~s)) + t[15] - 30611744 | 0, a = (a << 10 | a >>> 22) + n | 0, s += (n ^ (a | ~i)) + t[6] - 1560198380 | 0, s = (s << 15 | s >>> 17) + a | 0, i += (a ^ (s | ~n)) + t[13] + 1309151649 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~a)) + t[4] - 145523070 | 0, n = (n << 6 | n >>> 26) + i | 0, a += (i ^ (n | ~s)) + t[11] - 1120210379 | 0, a = (a << 10 | a >>> 22) + n | 0, s += (n ^ (a | ~i)) + t[2] + 718787259 | 0, s = (s << 15 | s >>> 17) + a | 0, i += (a ^ (s | ~n)) + t[9] - 343485551 | 0, i = (i << 21 | i >>> 11) + s | 0, e[0] = n + e[0] | 0, e[1] = i + e[1] | 0, e[2] = s + e[2] | 0, e[3] = a + e[3] | 0;\n        }\n        start() {\n            return this._dataLength = 0, this._bufferLength = 0, this._state.set(X.stateIdentity), this;\n        }\n        appendStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, a;\n            for(a = 0; a < e.length; a += 1){\n                if (s = e.charCodeAt(a), s < 128) t[i++] = s;\n                else if (s < 2048) t[i++] = (s >>> 6) + 192, t[i++] = s & 63 | 128;\n                else if (s < 55296 || s > 56319) t[i++] = (s >>> 12) + 224, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                else {\n                    if (s = (s - 55296) * 1024 + (e.charCodeAt(++a) - 56320) + 65536, s > 1114111) throw new Error(\"Unicode standard supports code points up to U+10FFFF\");\n                    t[i++] = (s >>> 18) + 240, t[i++] = s >>> 12 & 63 | 128, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                }\n                i >= 64 && (this._dataLength += 64, X._md5cycle(this._state, n), i -= 64, n[0] = n[16]);\n            }\n            return this._bufferLength = i, this;\n        }\n        appendAsciiStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, a = 0;\n            for(;;){\n                for(s = Math.min(e.length - a, 64 - i); s--;)t[i++] = e.charCodeAt(a++);\n                if (i < 64) break;\n                this._dataLength += 64, X._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        appendByteArray(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, a = 0;\n            for(;;){\n                for(s = Math.min(e.length - a, 64 - i); s--;)t[i++] = e[a++];\n                if (i < 64) break;\n                this._dataLength += 64, X._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        getState() {\n            let e = this._state;\n            return {\n                buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)),\n                buflen: this._bufferLength,\n                length: this._dataLength,\n                state: [\n                    e[0],\n                    e[1],\n                    e[2],\n                    e[3]\n                ]\n            };\n        }\n        setState(e) {\n            let t = e.buffer, n = e.state, i = this._state, s;\n            for(this._dataLength = e.length, this._bufferLength = e.buflen, i[0] = n[0], i[1] = n[1], i[2] = n[2], i[3] = n[3], s = 0; s < t.length; s += 1)this._buffer8[s] = t.charCodeAt(s);\n        }\n        end(e = !1) {\n            let t = this._bufferLength, n = this._buffer8, i = this._buffer32, s = (t >> 2) + 1;\n            this._dataLength += t;\n            let a = this._dataLength * 8;\n            if (n[t] = 128, n[t + 1] = n[t + 2] = n[t + 3] = 0, i.set(X.buffer32Identity.subarray(s), s), t > 55 && (X._md5cycle(this._state, i), i.set(X.buffer32Identity)), a <= 4294967295) i[14] = a;\n            else {\n                let u = a.toString(16).match(/(.*?)(.{0,8})$/);\n                if (u === null) return;\n                let c = parseInt(u[2], 16), h = parseInt(u[1], 16) || 0;\n                i[14] = c, i[15] = h;\n            }\n            return X._md5cycle(this._state, i), e ? this._state : X._hex(this._state);\n        }\n    };\n    o(X, \"Md5\"), g(X, \"stateIdentity\", new Int32Array([\n        1732584193,\n        -271733879,\n        -1732584194,\n        271733878\n    ])), g(X, \"buffer32Identity\", new Int32Array([\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ])), g(X, \"hexChars\", \"0123456789abcdef\"), g(X, \"hexOut\", []), g(X, \"onePassHasher\", new X);\n    dt = X;\n});\nvar Ur = {};\nye(Ur, {\n    createHash: ()=>_u,\n    createHmac: ()=>Uu,\n    randomBytes: ()=>Cu\n});\nfunction Cu(r) {\n    return S.getRandomValues(y.alloc(r));\n}\nfunction _u(r) {\n    if (r === \"sha256\") return {\n        update: function(e) {\n            return {\n                digest: function() {\n                    return y.from(ft(e));\n                }\n            };\n        }\n    };\n    if (r === \"md5\") return {\n        update: function(e) {\n            return {\n                digest: function() {\n                    return typeof e == \"string\" ? dt.hashStr(e) : dt.hashByteArray(e);\n                }\n            };\n        }\n    };\n    throw new Error(`Hash type '${r}' not supported`);\n}\nfunction Uu(r, e) {\n    if (r !== \"sha256\") throw new Error(`Only sha256 is supported (requested: '${r}')`);\n    return {\n        update: function(t) {\n            return {\n                digest: function() {\n                    typeof e == \"string\" && (e = new TextEncoder().encode(e)), typeof t == \"string\" && (t = new TextEncoder().encode(t));\n                    let n = e.length;\n                    if (n > 64) e = ft(e);\n                    else if (n < 64) {\n                        let c = new Uint8Array(64);\n                        c.set(e), e = c;\n                    }\n                    let i = new Uint8Array(64), s = new Uint8Array(64);\n                    for(let c = 0; c < 64; c++)i[c] = 54 ^ e[c], s[c] = 92 ^ e[c];\n                    let a = new Uint8Array(t.length + 64);\n                    a.set(i, 0), a.set(t, 64);\n                    let u = new Uint8Array(64 + 32);\n                    return u.set(s, 0), u.set(ft(a), 64), y.from(ft(u));\n                }\n            };\n        }\n    };\n}\nvar Ir = ie(()=>{\n    p();\n    cs();\n    hs();\n    o(Cu, \"randomBytes\");\n    o(_u, \"createHash\");\n    o(Uu, \"createHmac\");\n});\nvar Tr = L((ls)=>{\n    \"use strict\";\n    p();\n    ls.parse = function(r, e) {\n        return new Lr(r, e).parse();\n    };\n    var Ot = class Ot {\n        constructor(e, t){\n            this.source = e, this.transform = t || Iu, this.position = 0, this.entries = [], this.recorded = [], this.dimension = 0;\n        }\n        isEof() {\n            return this.position >= this.source.length;\n        }\n        nextCharacter() {\n            var e = this.source[this.position++];\n            return e === \"\\\\\" ? {\n                value: this.source[this.position++],\n                escaped: !0\n            } : {\n                value: e,\n                escaped: !1\n            };\n        }\n        record(e) {\n            this.recorded.push(e);\n        }\n        newEntry(e) {\n            var t;\n            (this.recorded.length > 0 || e) && (t = this.recorded.join(\"\"), t === \"NULL\" && !e && (t = null), t !== null && (t = this.transform(t)), this.entries.push(t), this.recorded = []);\n        }\n        consumeDimensions() {\n            if (this.source[0] === \"[\") for(; !this.isEof();){\n                var e = this.nextCharacter();\n                if (e.value === \"=\") break;\n            }\n        }\n        parse(e) {\n            var t, n, i;\n            for(this.consumeDimensions(); !this.isEof();)if (t = this.nextCharacter(), t.value === \"{\" && !i) this.dimension++, this.dimension > 1 && (n = new Ot(this.source.substr(this.position - 1), this.transform), this.entries.push(n.parse(!0)), this.position += n.position - 2);\n            else if (t.value === \"}\" && !i) {\n                if (this.dimension--, !this.dimension && (this.newEntry(), e)) return this.entries;\n            } else t.value === '\"' && !t.escaped ? (i && this.newEntry(!0), i = !i) : t.value === \",\" && !i ? this.newEntry() : this.record(t.value);\n            if (this.dimension !== 0) throw new Error(\"array dimension not balanced\");\n            return this.entries;\n        }\n    };\n    o(Ot, \"ArrayParser\");\n    var Lr = Ot;\n    function Iu(r) {\n        return r;\n    }\n    o(Iu, \"identity\");\n});\nvar Br = L((af, fs)=>{\n    p();\n    var Lu = Tr();\n    fs.exports = {\n        create: function(r, e) {\n            return {\n                parse: function() {\n                    return Lu.parse(r, e);\n                }\n            };\n        }\n    };\n});\nvar ys = L((uf, ps)=>{\n    \"use strict\";\n    p();\n    var Tu = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/, Bu = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/, Pu = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/, Ru = /^-?infinity$/;\n    ps.exports = o(function(e) {\n        if (Ru.test(e)) return Number(e.replace(\"i\", \"I\"));\n        var t = Tu.exec(e);\n        if (!t) return Mu(e) || null;\n        var n = !!t[8], i = parseInt(t[1], 10);\n        n && (i = ds(i));\n        var s = parseInt(t[2], 10) - 1, a = t[3], u = parseInt(t[4], 10), c = parseInt(t[5], 10), h = parseInt(t[6], 10), l = t[7];\n        l = l ? 1e3 * parseFloat(l) : 0;\n        var f, m = Fu(e);\n        return m != null ? (f = new Date(Date.UTC(i, s, a, u, c, h, l)), Pr(i) && f.setUTCFullYear(i), m !== 0 && f.setTime(f.getTime() - m)) : (f = new Date(i, s, a, u, c, h, l), Pr(i) && f.setFullYear(i)), f;\n    }, \"parseDate\");\n    function Mu(r) {\n        var e = Bu.exec(r);\n        if (e) {\n            var t = parseInt(e[1], 10), n = !!e[4];\n            n && (t = ds(t));\n            var i = parseInt(e[2], 10) - 1, s = e[3], a = new Date(t, i, s);\n            return Pr(t) && a.setFullYear(t), a;\n        }\n    }\n    o(Mu, \"getDate\");\n    function Fu(r) {\n        if (r.endsWith(\"+00\")) return 0;\n        var e = Pu.exec(r.split(\" \")[1]);\n        if (e) {\n            var t = e[1];\n            if (t === \"Z\") return 0;\n            var n = t === \"-\" ? -1 : 1, i = parseInt(e[2], 10) * 3600 + parseInt(e[3] || 0, 10) * 60 + parseInt(e[4] || 0, 10);\n            return i * n * 1e3;\n        }\n    }\n    o(Fu, \"timeZoneOffset\");\n    function ds(r) {\n        return -(r - 1);\n    }\n    o(ds, \"bcYearToNegativeYear\");\n    function Pr(r) {\n        return r >= 0 && r < 100;\n    }\n    o(Pr, \"is0To99\");\n});\nvar ms = L((lf, ws)=>{\n    p();\n    ws.exports = Nu;\n    var ku = Object.prototype.hasOwnProperty;\n    function Nu(r) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var n in t)ku.call(t, n) && (r[n] = t[n]);\n        }\n        return r;\n    }\n    o(Nu, \"extend\");\n});\nvar bs = L((pf, Ss)=>{\n    \"use strict\";\n    p();\n    var Du = ms();\n    Ss.exports = Ke;\n    function Ke(r) {\n        if (!(this instanceof Ke)) return new Ke(r);\n        Du(this, Yu(r));\n    }\n    o(Ke, \"PostgresInterval\");\n    var qu = [\n        \"seconds\",\n        \"minutes\",\n        \"hours\",\n        \"days\",\n        \"months\",\n        \"years\"\n    ];\n    Ke.prototype.toPostgres = function() {\n        var r = qu.filter(this.hasOwnProperty, this);\n        return this.milliseconds && r.indexOf(\"seconds\") < 0 && r.push(\"seconds\"), r.length === 0 ? \"0\" : r.map(function(e) {\n            var t = this[e] || 0;\n            return e === \"seconds\" && this.milliseconds && (t = (t + this.milliseconds / 1e3).toFixed(6).replace(/\\.?0+$/, \"\")), t + \" \" + e;\n        }, this).join(\" \");\n    };\n    var Ou = {\n        years: \"Y\",\n        months: \"M\",\n        days: \"D\",\n        hours: \"H\",\n        minutes: \"M\",\n        seconds: \"S\"\n    }, Qu = [\n        \"years\",\n        \"months\",\n        \"days\"\n    ], Hu = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\"\n    ];\n    Ke.prototype.toISOString = Ke.prototype.toISO = function() {\n        var r = Qu.map(t, this).join(\"\"), e = Hu.map(t, this).join(\"\");\n        return \"P\" + r + \"T\" + e;\n        function t(n) {\n            var i = this[n] || 0;\n            return n === \"seconds\" && this.milliseconds && (i = (i + this.milliseconds / 1e3).toFixed(6).replace(/0+$/, \"\")), i + Ou[n];\n        }\n    };\n    var Rr = \"([+-]?\\\\d+)\", ju = Rr + \"\\\\s+years?\", Ku = Rr + \"\\\\s+mons?\", $u = Rr + \"\\\\s+days?\", Wu = \"([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?\", Vu = new RegExp([\n        ju,\n        Ku,\n        $u,\n        Wu\n    ].map(function(r) {\n        return \"(\" + r + \")?\";\n    }).join(\"\\\\s*\")), gs = {\n        years: 2,\n        months: 4,\n        days: 6,\n        hours: 9,\n        minutes: 10,\n        seconds: 11,\n        milliseconds: 12\n    }, Gu = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\",\n        \"milliseconds\"\n    ];\n    function zu(r) {\n        var e = r + \"000000\".slice(r.length);\n        return parseInt(e, 10) / 1e3;\n    }\n    o(zu, \"parseMilliseconds\");\n    function Yu(r) {\n        if (!r) return {};\n        var e = Vu.exec(r), t = e[8] === \"-\";\n        return Object.keys(gs).reduce(function(n, i) {\n            var s = gs[i], a = e[s];\n            return !a || (a = i === \"milliseconds\" ? zu(a) : parseInt(a, 10), !a) || (t && ~Gu.indexOf(i) && (a *= -1), n[i] = a), n;\n        }, {});\n    }\n    o(Yu, \"parse\");\n});\nvar As = L((mf, xs)=>{\n    \"use strict\";\n    p();\n    xs.exports = o(function(e) {\n        if (/^\\\\x/.test(e)) return new y(e.substr(2), \"hex\");\n        for(var t = \"\", n = 0; n < e.length;)if (e[n] !== \"\\\\\") t += e[n], ++n;\n        else if (/[0-7]{3}/.test(e.substr(n + 1, 3))) t += String.fromCharCode(parseInt(e.substr(n + 1, 3), 8)), n += 4;\n        else {\n            for(var i = 1; n + i < e.length && e[n + i] === \"\\\\\";)i++;\n            for(var s = 0; s < Math.floor(i / 2); ++s)t += \"\\\\\";\n            n += Math.floor(i / 2) * 2;\n        }\n        return new y(t, \"binary\");\n    }, \"parseBytea\");\n});\nvar Ls = L((bf, Is)=>{\n    p();\n    var pt = Tr(), yt = Br(), Qt = ys(), Es = bs(), Cs = As();\n    function Ht(r) {\n        return o(function(t) {\n            return t === null ? t : r(t);\n        }, \"nullAllowed\");\n    }\n    o(Ht, \"allowNull\");\n    function _s(r) {\n        return r === null ? r : r === \"TRUE\" || r === \"t\" || r === \"true\" || r === \"y\" || r === \"yes\" || r === \"on\" || r === \"1\";\n    }\n    o(_s, \"parseBool\");\n    function Ju(r) {\n        return r ? pt.parse(r, _s) : null;\n    }\n    o(Ju, \"parseBoolArray\");\n    function Zu(r) {\n        return parseInt(r, 10);\n    }\n    o(Zu, \"parseBaseTenInt\");\n    function Mr(r) {\n        return r ? pt.parse(r, Ht(Zu)) : null;\n    }\n    o(Mr, \"parseIntegerArray\");\n    function Xu(r) {\n        return r ? pt.parse(r, Ht(function(e) {\n            return Us(e).trim();\n        })) : null;\n    }\n    o(Xu, \"parseBigIntegerArray\");\n    var ec = o(function(r) {\n        if (!r) return null;\n        var e = yt.create(r, function(t) {\n            return t !== null && (t = Dr(t)), t;\n        });\n        return e.parse();\n    }, \"parsePointArray\"), Fr = o(function(r) {\n        if (!r) return null;\n        var e = yt.create(r, function(t) {\n            return t !== null && (t = parseFloat(t)), t;\n        });\n        return e.parse();\n    }, \"parseFloatArray\"), me = o(function(r) {\n        if (!r) return null;\n        var e = yt.create(r);\n        return e.parse();\n    }, \"parseStringArray\"), kr = o(function(r) {\n        if (!r) return null;\n        var e = yt.create(r, function(t) {\n            return t !== null && (t = Qt(t)), t;\n        });\n        return e.parse();\n    }, \"parseDateArray\"), tc = o(function(r) {\n        if (!r) return null;\n        var e = yt.create(r, function(t) {\n            return t !== null && (t = Es(t)), t;\n        });\n        return e.parse();\n    }, \"parseIntervalArray\"), rc = o(function(r) {\n        return r ? pt.parse(r, Ht(Cs)) : null;\n    }, \"parseByteAArray\"), Nr = o(function(r) {\n        return parseInt(r, 10);\n    }, \"parseInteger\"), Us = o(function(r) {\n        var e = String(r);\n        return /^\\d+$/.test(e) ? e : r;\n    }, \"parseBigInteger\"), vs = o(function(r) {\n        return r ? pt.parse(r, Ht(JSON.parse)) : null;\n    }, \"parseJsonArray\"), Dr = o(function(r) {\n        return r[0] !== \"(\" ? null : (r = r.substring(1, r.length - 1).split(\",\"), {\n            x: parseFloat(r[0]),\n            y: parseFloat(r[1])\n        });\n    }, \"parsePoint\"), nc = o(function(r) {\n        if (r[0] !== \"<\" && r[1] !== \"(\") return null;\n        for(var e = \"(\", t = \"\", n = !1, i = 2; i < r.length - 1; i++){\n            if (n || (e += r[i]), r[i] === \")\") {\n                n = !0;\n                continue;\n            } else if (!n) continue;\n            r[i] !== \",\" && (t += r[i]);\n        }\n        var s = Dr(e);\n        return s.radius = parseFloat(t), s;\n    }, \"parseCircle\"), ic = o(function(r) {\n        r(20, Us), r(21, Nr), r(23, Nr), r(26, Nr), r(700, parseFloat), r(701, parseFloat), r(16, _s), r(1082, Qt), r(1114, Qt), r(1184, Qt), r(600, Dr), r(651, me), r(718, nc), r(1e3, Ju), r(1001, rc), r(1005, Mr), r(1007, Mr), r(1028, Mr), r(1016, Xu), r(1017, ec), r(1021, Fr), r(1022, Fr), r(1231, Fr), r(1014, me), r(1015, me), r(1008, me), r(1009, me), r(1040, me), r(1041, me), r(1115, kr), r(1182, kr), r(1185, kr), r(1186, Es), r(1187, tc), r(17, Cs), r(114, JSON.parse.bind(JSON)), r(3802, JSON.parse.bind(JSON)), r(199, vs), r(3807, vs), r(3907, me), r(2951, me), r(791, me), r(1183, me), r(1270, me);\n    }, \"init\");\n    Is.exports = {\n        init: ic\n    };\n});\nvar Bs = L((vf, Ts)=>{\n    \"use strict\";\n    p();\n    var fe = 1e6;\n    function sc(r) {\n        var e = r.readInt32BE(0), t = r.readUInt32BE(4), n = \"\";\n        e < 0 && (e = ~e + (t === 0), t = ~t + 1 >>> 0, n = \"-\");\n        var i = \"\", s, a, u, c, h, l;\n        {\n            if (s = e % fe, e = e / fe >>> 0, a = 4294967296 * s + t, t = a / fe >>> 0, u = \"\" + (a - fe * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % fe, e = e / fe >>> 0, a = 4294967296 * s + t, t = a / fe >>> 0, u = \"\" + (a - fe * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % fe, e = e / fe >>> 0, a = 4294967296 * s + t, t = a / fe >>> 0, u = \"\" + (a - fe * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        return s = e % fe, a = 4294967296 * s + t, u = \"\" + a % fe, n + u + i;\n    }\n    o(sc, \"readInt8\");\n    Ts.exports = sc;\n});\nvar ks = L((_f, Fs)=>{\n    p();\n    var ac = Bs(), Q = o(function(r, e, t, n, i) {\n        t = t || 0, n = n || !1, i = i || function(x, C, I) {\n            return x * Math.pow(2, I) + C;\n        };\n        var s = t >> 3, a = o(function(x) {\n            return n ? ~x & 255 : x;\n        }, \"inv\"), u = 255, c = 8 - t % 8;\n        e < c && (u = 255 << 8 - e & 255, c = e), t && (u = u >> t % 8);\n        var h = 0;\n        t % 8 + e >= 8 && (h = i(0, a(r[s]) & u, c));\n        for(var l = e + t >> 3, f = s + 1; f < l; f++)h = i(h, a(r[f]), 8);\n        var m = (e + t) % 8;\n        return m > 0 && (h = i(h, a(r[l]) >> 8 - m, m)), h;\n    }, \"parseBits\"), Ms = o(function(r, e, t) {\n        var n = Math.pow(2, t - 1) - 1, i = Q(r, 1), s = Q(r, t, 1);\n        if (s === 0) return 0;\n        var a = 1, u = o(function(h, l, f) {\n            h === 0 && (h = 1);\n            for(var m = 1; m <= f; m++)a /= 2, (l & 1 << f - m) > 0 && (h += a);\n            return h;\n        }, \"parsePrecisionBits\"), c = Q(r, e, t + 1, !1, u);\n        return s == Math.pow(2, t + 1) - 1 ? c === 0 ? i === 0 ? 1 / 0 : -1 / 0 : NaN : (i === 0 ? 1 : -1) * Math.pow(2, s - n) * c;\n    }, \"parseFloatFromBits\"), oc = o(function(r) {\n        return Q(r, 1) == 1 ? -1 * (Q(r, 15, 1, !0) + 1) : Q(r, 15, 1);\n    }, \"parseInt16\"), Ps = o(function(r) {\n        return Q(r, 1) == 1 ? -1 * (Q(r, 31, 1, !0) + 1) : Q(r, 31, 1);\n    }, \"parseInt32\"), uc = o(function(r) {\n        return Ms(r, 23, 8);\n    }, \"parseFloat32\"), cc = o(function(r) {\n        return Ms(r, 52, 11);\n    }, \"parseFloat64\"), hc = o(function(r) {\n        var e = Q(r, 16, 32);\n        if (e == 49152) return NaN;\n        for(var t = Math.pow(1e4, Q(r, 16, 16)), n = 0, i = [], s = Q(r, 16), a = 0; a < s; a++)n += Q(r, 16, 64 + 16 * a) * t, t /= 1e4;\n        var u = Math.pow(10, Q(r, 16, 48));\n        return (e === 0 ? 1 : -1) * Math.round(n * u) / u;\n    }, \"parseNumeric\"), Rs = o(function(r, e) {\n        var t = Q(e, 1), n = Q(e, 63, 1), i = new Date((t === 0 ? 1 : -1) * n / 1e3 + 9466848e5);\n        return r || i.setTime(i.getTime() + i.getTimezoneOffset() * 6e4), i.usec = n % 1e3, i.getMicroSeconds = function() {\n            return this.usec;\n        }, i.setMicroSeconds = function(s) {\n            this.usec = s;\n        }, i.getUTCMicroSeconds = function() {\n            return this.usec;\n        }, i;\n    }, \"parseDate\"), wt = o(function(r) {\n        for(var e = Q(r, 32), t = Q(r, 32, 32), n = Q(r, 32, 64), i = 96, s = [], a = 0; a < e; a++)s[a] = Q(r, 32, i), i += 32, i += 32;\n        var u = o(function(h) {\n            var l = Q(r, 32, i);\n            if (i += 32, l == 4294967295) return null;\n            var f;\n            if (h == 23 || h == 20) return f = Q(r, l * 8, i), i += l * 8, f;\n            if (h == 25) return f = r.toString(this.encoding, i >> 3, (i += l << 3) >> 3), f;\n            console.log(\"ERROR: ElementType not implemented: \" + h);\n        }, \"parseElement\"), c = o(function(h, l) {\n            var f = [], m;\n            if (h.length > 1) {\n                var x = h.shift();\n                for(m = 0; m < x; m++)f[m] = c(h, l);\n                h.unshift(x);\n            } else for(m = 0; m < h[0]; m++)f[m] = u(l);\n            return f;\n        }, \"parse\");\n        return c(s, n);\n    }, \"parseArray\"), lc = o(function(r) {\n        return r.toString(\"utf8\");\n    }, \"parseText\"), fc = o(function(r) {\n        return r === null ? null : Q(r, 8) > 0;\n    }, \"parseBool\"), dc = o(function(r) {\n        r(20, ac), r(21, oc), r(23, Ps), r(26, Ps), r(1700, hc), r(700, uc), r(701, cc), r(16, fc), r(1114, Rs.bind(null, !1)), r(1184, Rs.bind(null, !0)), r(1e3, wt), r(1007, wt), r(1016, wt), r(1008, wt), r(1009, wt), r(25, lc);\n    }, \"init\");\n    Fs.exports = {\n        init: dc\n    };\n});\nvar Ds = L((Lf, Ns)=>{\n    p();\n    Ns.exports = {\n        BOOL: 16,\n        BYTEA: 17,\n        CHAR: 18,\n        INT8: 20,\n        INT2: 21,\n        INT4: 23,\n        REGPROC: 24,\n        TEXT: 25,\n        OID: 26,\n        TID: 27,\n        XID: 28,\n        CID: 29,\n        JSON: 114,\n        XML: 142,\n        PG_NODE_TREE: 194,\n        SMGR: 210,\n        PATH: 602,\n        POLYGON: 604,\n        CIDR: 650,\n        FLOAT4: 700,\n        FLOAT8: 701,\n        ABSTIME: 702,\n        RELTIME: 703,\n        TINTERVAL: 704,\n        CIRCLE: 718,\n        MACADDR8: 774,\n        MONEY: 790,\n        MACADDR: 829,\n        INET: 869,\n        ACLITEM: 1033,\n        BPCHAR: 1042,\n        VARCHAR: 1043,\n        DATE: 1082,\n        TIME: 1083,\n        TIMESTAMP: 1114,\n        TIMESTAMPTZ: 1184,\n        INTERVAL: 1186,\n        TIMETZ: 1266,\n        BIT: 1560,\n        VARBIT: 1562,\n        NUMERIC: 1700,\n        REFCURSOR: 1790,\n        REGPROCEDURE: 2202,\n        REGOPER: 2203,\n        REGOPERATOR: 2204,\n        REGCLASS: 2205,\n        REGTYPE: 2206,\n        UUID: 2950,\n        TXID_SNAPSHOT: 2970,\n        PG_LSN: 3220,\n        PG_NDISTINCT: 3361,\n        PG_DEPENDENCIES: 3402,\n        TSVECTOR: 3614,\n        TSQUERY: 3615,\n        GTSVECTOR: 3642,\n        REGCONFIG: 3734,\n        REGDICTIONARY: 3769,\n        JSONB: 3802,\n        REGNAMESPACE: 4089,\n        REGROLE: 4096\n    };\n});\nvar St = L((gt)=>{\n    p();\n    var pc = Ls(), yc = ks(), wc = Br(), mc = Ds();\n    gt.getTypeParser = gc;\n    gt.setTypeParser = Sc;\n    gt.arrayParser = wc;\n    gt.builtins = mc;\n    var mt = {\n        text: {},\n        binary: {}\n    };\n    function qs(r) {\n        return String(r);\n    }\n    o(qs, \"noParse\");\n    function gc(r, e) {\n        return e = e || \"text\", mt[e] && mt[e][r] || qs;\n    }\n    o(gc, \"getTypeParser\");\n    function Sc(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), mt[e][r] = t;\n    }\n    o(Sc, \"setTypeParser\");\n    pc.init(function(r, e) {\n        mt.text[r] = e;\n    });\n    yc.init(function(r, e) {\n        mt.binary[r] = e;\n    });\n});\nvar bt = L((Mf, qr)=>{\n    \"use strict\";\n    p();\n    qr.exports = {\n        host: \"localhost\",\n        user: w.platform === \"win32\" ? w.env.USERNAME : w.env.USER,\n        database: void 0,\n        password: null,\n        connectionString: void 0,\n        port: 5432,\n        rows: 0,\n        binary: !1,\n        max: 10,\n        idleTimeoutMillis: 3e4,\n        client_encoding: \"\",\n        ssl: !1,\n        application_name: void 0,\n        fallback_application_name: void 0,\n        options: void 0,\n        parseInputDatesAsUTC: !1,\n        statement_timeout: !1,\n        lock_timeout: !1,\n        idle_in_transaction_session_timeout: !1,\n        query_timeout: !1,\n        connect_timeout: 0,\n        keepalives: 1,\n        keepalives_idle: 0\n    };\n    var $e = St(), bc = $e.getTypeParser(20, \"text\"), xc = $e.getTypeParser(1016, \"text\");\n    qr.exports.__defineSetter__(\"parseInt8\", function(r) {\n        $e.setTypeParser(20, \"text\", r ? $e.getTypeParser(23, \"text\") : bc), $e.setTypeParser(1016, \"text\", r ? $e.getTypeParser(1007, \"text\") : xc);\n    });\n});\nvar xt = L((kf, Qs)=>{\n    \"use strict\";\n    p();\n    var Ac = (Ir(), Z(Ur)), vc = bt();\n    function Ec(r) {\n        var e = r.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"');\n        return '\"' + e + '\"';\n    }\n    o(Ec, \"escapeElement\");\n    function Os(r) {\n        for(var e = \"{\", t = 0; t < r.length; t++)t > 0 && (e = e + \",\"), r[t] === null || typeof r[t] > \"u\" ? e = e + \"NULL\" : Array.isArray(r[t]) ? e = e + Os(r[t]) : r[t] instanceof y ? e += \"\\\\\\\\x\" + r[t].toString(\"hex\") : e += Ec(jt(r[t]));\n        return e = e + \"}\", e;\n    }\n    o(Os, \"arrayString\");\n    var jt = o(function(r, e) {\n        if (r == null) return null;\n        if (r instanceof y) return r;\n        if (ArrayBuffer.isView(r)) {\n            var t = y.from(r.buffer, r.byteOffset, r.byteLength);\n            return t.length === r.byteLength ? t : t.slice(r.byteOffset, r.byteOffset + r.byteLength);\n        }\n        return r instanceof Date ? vc.parseInputDatesAsUTC ? Uc(r) : _c(r) : Array.isArray(r) ? Os(r) : typeof r == \"object\" ? Cc(r, e) : r.toString();\n    }, \"prepareValue\");\n    function Cc(r, e) {\n        if (r && typeof r.toPostgres == \"function\") {\n            if (e = e || [], e.indexOf(r) !== -1) throw new Error('circular reference detected while preparing \"' + r + '\" for query');\n            return e.push(r), jt(r.toPostgres(jt), e);\n        }\n        return JSON.stringify(r);\n    }\n    o(Cc, \"prepareObject\");\n    function ue(r, e) {\n        for(r = \"\" + r; r.length < e;)r = \"0\" + r;\n        return r;\n    }\n    o(ue, \"pad\");\n    function _c(r) {\n        var e = -r.getTimezoneOffset(), t = r.getFullYear(), n = t < 1;\n        n && (t = Math.abs(t) + 1);\n        var i = ue(t, 4) + \"-\" + ue(r.getMonth() + 1, 2) + \"-\" + ue(r.getDate(), 2) + \"T\" + ue(r.getHours(), 2) + \":\" + ue(r.getMinutes(), 2) + \":\" + ue(r.getSeconds(), 2) + \".\" + ue(r.getMilliseconds(), 3);\n        return e < 0 ? (i += \"-\", e *= -1) : i += \"+\", i += ue(Math.floor(e / 60), 2) + \":\" + ue(e % 60, 2), n && (i += \" BC\"), i;\n    }\n    o(_c, \"dateToString\");\n    function Uc(r) {\n        var e = r.getUTCFullYear(), t = e < 1;\n        t && (e = Math.abs(e) + 1);\n        var n = ue(e, 4) + \"-\" + ue(r.getUTCMonth() + 1, 2) + \"-\" + ue(r.getUTCDate(), 2) + \"T\" + ue(r.getUTCHours(), 2) + \":\" + ue(r.getUTCMinutes(), 2) + \":\" + ue(r.getUTCSeconds(), 2) + \".\" + ue(r.getUTCMilliseconds(), 3);\n        return n += \"+00:00\", t && (n += \" BC\"), n;\n    }\n    o(Uc, \"dateToStringUTC\");\n    function Ic(r, e, t) {\n        return r = typeof r == \"string\" ? {\n            text: r\n        } : r, e && (typeof e == \"function\" ? r.callback = e : r.values = e), t && (r.callback = t), r;\n    }\n    o(Ic, \"normalizeQueryConfig\");\n    var Or = o(function(r) {\n        return Ac.createHash(\"md5\").update(r, \"utf-8\").digest(\"hex\");\n    }, \"md5\"), Lc = o(function(r, e, t) {\n        var n = Or(e + r), i = Or(y.concat([\n            y.from(n),\n            t\n        ]));\n        return \"md5\" + i;\n    }, \"postgresMd5PasswordHash\");\n    Qs.exports = {\n        prepareValue: o(function(e) {\n            return jt(e);\n        }, \"prepareValueWrapper\"),\n        normalizeQueryConfig: Ic,\n        postgresMd5PasswordHash: Lc,\n        md5: Or\n    };\n});\nvar vt = {};\nye(vt, {\n    default: ()=>Tc\n});\nvar Tc, Et = ie(()=>{\n    p();\n    Tc = {};\n});\nvar Vs = L((Wf, Ws)=>{\n    \"use strict\";\n    p();\n    var Hr = (Ir(), Z(Ur));\n    function Bc(r) {\n        if (r.indexOf(\"SCRAM-SHA-256\") === -1) throw new Error(\"SASL: Only mechanism SCRAM-SHA-256 is currently supported\");\n        let e = Hr.randomBytes(18).toString(\"base64\");\n        return {\n            mechanism: \"SCRAM-SHA-256\",\n            clientNonce: e,\n            response: \"n,,n=*,r=\" + e,\n            message: \"SASLInitialResponse\"\n        };\n    }\n    o(Bc, \"startSession\");\n    function Pc(r, e, t) {\n        if (r.message !== \"SASLInitialResponse\") throw new Error(\"SASL: Last message was not SASLInitialResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string\");\n        if (typeof t != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string\");\n        let n = Fc(t);\n        if (n.nonce.startsWith(r.clientNonce)) {\n            if (n.nonce.length === r.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        var i = y.from(n.salt, \"base64\"), s = Dc(e, i, n.iteration), a = We(s, \"Client Key\"), u = Nc(a), c = \"n=*,r=\" + r.clientNonce, h = \"r=\" + n.nonce + \",s=\" + n.salt + \",i=\" + n.iteration, l = \"c=biws,r=\" + n.nonce, f = c + \",\" + h + \",\" + l, m = We(u, f), x = $s(a, m), C = x.toString(\"base64\"), I = We(s, \"Server Key\"), T = We(I, f);\n        r.message = \"SASLResponse\", r.serverSignature = T.toString(\"base64\"), r.response = l + \",p=\" + C;\n    }\n    o(Pc, \"continueSession\");\n    function Rc(r, e) {\n        if (r.message !== \"SASLResponse\") throw new Error(\"SASL: Last message was not SASLResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string\");\n        let { serverSignature: t } = kc(e);\n        if (t !== r.serverSignature) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match\");\n    }\n    o(Rc, \"finalizeSession\");\n    function Mc(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: text must be a string\");\n        return r.split(\"\").map((e, t)=>r.charCodeAt(t)).every((e)=>e >= 33 && e <= 43 || e >= 45 && e <= 126);\n    }\n    o(Mc, \"isPrintableChars\");\n    function js(r) {\n        return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(r);\n    }\n    o(js, \"isBase64\");\n    function Ks(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: attribute pairs text must be a string\");\n        return new Map(r.split(\",\").map((e)=>{\n            if (!/^.=/.test(e)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let t = e[0], n = e.substring(2);\n            return [\n                t,\n                n\n            ];\n        }));\n    }\n    o(Ks, \"parseAttributePairs\");\n    function Fc(r) {\n        let e = Ks(r), t = e.get(\"r\");\n        if (t) {\n            if (!Mc(t)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing\");\n        let n = e.get(\"s\");\n        if (n) {\n            if (!js(n)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing\");\n        let i = e.get(\"i\");\n        if (i) {\n            if (!/^[1-9][0-9]*$/.test(i)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing\");\n        let s = parseInt(i, 10);\n        return {\n            nonce: t,\n            salt: n,\n            iteration: s\n        };\n    }\n    o(Fc, \"parseServerFirstMessage\");\n    function kc(r) {\n        let t = Ks(r).get(\"v\");\n        if (t) {\n            if (!js(t)) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing\");\n        return {\n            serverSignature: t\n        };\n    }\n    o(kc, \"parseServerFinalMessage\");\n    function $s(r, e) {\n        if (!y.isBuffer(r)) throw new TypeError(\"first argument must be a Buffer\");\n        if (!y.isBuffer(e)) throw new TypeError(\"second argument must be a Buffer\");\n        if (r.length !== e.length) throw new Error(\"Buffer lengths must match\");\n        if (r.length === 0) throw new Error(\"Buffers cannot be empty\");\n        return y.from(r.map((t, n)=>r[n] ^ e[n]));\n    }\n    o($s, \"xorBuffers\");\n    function Nc(r) {\n        return Hr.createHash(\"sha256\").update(r).digest();\n    }\n    o(Nc, \"sha256\");\n    function We(r, e) {\n        return Hr.createHmac(\"sha256\", r).update(e).digest();\n    }\n    o(We, \"hmacSha256\");\n    function Dc(r, e, t) {\n        for(var n = We(r, y.concat([\n            e,\n            y.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ])), i = n, s = 0; s < t - 1; s++)n = We(r, n), i = $s(i, n);\n        return i;\n    }\n    o(Dc, \"Hi\");\n    Ws.exports = {\n        startSession: Bc,\n        continueSession: Pc,\n        finalizeSession: Rc\n    };\n});\nvar jr = {};\nye(jr, {\n    join: ()=>qc\n});\nfunction qc(...r) {\n    return r.join(\"/\");\n}\nvar Kr = ie(()=>{\n    p();\n    o(qc, \"join\");\n});\nvar $r = {};\nye($r, {\n    stat: ()=>Oc\n});\nfunction Oc(r, e) {\n    e(new Error(\"No filesystem\"));\n}\nvar Wr = ie(()=>{\n    p();\n    o(Oc, \"stat\");\n});\nvar Vr = {};\nye(Vr, {\n    default: ()=>Qc\n});\nvar Qc, Gr = ie(()=>{\n    p();\n    Qc = {};\n});\nvar Gs = {};\nye(Gs, {\n    StringDecoder: ()=>zr\n});\nvar Yr, zr, zs = ie(()=>{\n    p();\n    Yr = class Yr {\n        constructor(e){\n            g(this, \"td\");\n            this.td = new TextDecoder(e);\n        }\n        write(e) {\n            return this.td.decode(e, {\n                stream: !0\n            });\n        }\n        end(e) {\n            return this.td.decode(e);\n        }\n    };\n    o(Yr, \"StringDecoder\");\n    zr = Yr;\n});\nvar Xs = L((rd, Zs)=>{\n    \"use strict\";\n    p();\n    var { Transform: Hc } = (Gr(), Z(Vr)), { StringDecoder: jc } = (zs(), Z(Gs)), Te = Symbol(\"last\"), $t = Symbol(\"decoder\");\n    function Kc(r, e, t) {\n        let n;\n        if (this.overflow) {\n            if (n = this[$t].write(r).split(this.matcher), n.length === 1) return t();\n            n.shift(), this.overflow = !1;\n        } else this[Te] += this[$t].write(r), n = this[Te].split(this.matcher);\n        this[Te] = n.pop();\n        for(let i = 0; i < n.length; i++)try {\n            Js(this, this.mapper(n[i]));\n        } catch (s) {\n            return t(s);\n        }\n        if (this.overflow = this[Te].length > this.maxLength, this.overflow && !this.skipOverflow) {\n            t(new Error(\"maximum buffer reached\"));\n            return;\n        }\n        t();\n    }\n    o(Kc, \"transform\");\n    function $c(r) {\n        if (this[Te] += this[$t].end(), this[Te]) try {\n            Js(this, this.mapper(this[Te]));\n        } catch (e) {\n            return r(e);\n        }\n        r();\n    }\n    o($c, \"flush\");\n    function Js(r, e) {\n        e !== void 0 && r.push(e);\n    }\n    o(Js, \"push\");\n    function Ys(r) {\n        return r;\n    }\n    o(Ys, \"noop\");\n    function Wc(r, e, t) {\n        switch(r = r || /\\r?\\n/, e = e || Ys, t = t || {}, arguments.length){\n            case 1:\n                typeof r == \"function\" ? (e = r, r = /\\r?\\n/) : typeof r == \"object\" && !(r instanceof RegExp) && !r[Symbol.split] && (t = r, r = /\\r?\\n/);\n                break;\n            case 2:\n                typeof r == \"function\" ? (t = e, e = r, r = /\\r?\\n/) : typeof e == \"object\" && (t = e, e = Ys);\n        }\n        t = Object.assign({}, t), t.autoDestroy = !0, t.transform = Kc, t.flush = $c, t.readableObjectMode = !0;\n        let n = new Hc(t);\n        return n[Te] = \"\", n[$t] = new jc(\"utf8\"), n.matcher = r, n.mapper = e, n.maxLength = t.maxLength, n.skipOverflow = t.skipOverflow || !1, n.overflow = !1, n._destroy = function(i, s) {\n            this._writableState.errorEmitted = !1, s(i);\n        }, n;\n    }\n    o(Wc, \"split\");\n    Zs.exports = Wc;\n});\nvar ra = L((sd, Ce)=>{\n    \"use strict\";\n    p();\n    var ea = (Kr(), Z(jr)), Vc = (Gr(), Z(Vr)).Stream, Gc = Xs(), ta = (Et(), Z(vt)), zc = 5432, Wt = w.platform === \"win32\", Ct = w.stderr, Yc = 56, Jc = 7, Zc = 61440, Xc = 32768;\n    function eh(r) {\n        return (r & Zc) == Xc;\n    }\n    o(eh, \"isRegFile\");\n    var Ve = [\n        \"host\",\n        \"port\",\n        \"database\",\n        \"user\",\n        \"password\"\n    ], Jr = Ve.length, th = Ve[Jr - 1];\n    function Zr() {\n        var r = Ct instanceof Vc && Ct.writable === !0;\n        if (r) {\n            var e = Array.prototype.slice.call(arguments).concat(`\n`);\n            Ct.write(ta.format.apply(ta, e));\n        }\n    }\n    o(Zr, \"warn\");\n    Object.defineProperty(Ce.exports, \"isWin\", {\n        get: function() {\n            return Wt;\n        },\n        set: function(r) {\n            Wt = r;\n        }\n    });\n    Ce.exports.warnTo = function(r) {\n        var e = Ct;\n        return Ct = r, e;\n    };\n    Ce.exports.getFileName = function(r) {\n        var e = r || w.env, t = e.PGPASSFILE || (Wt ? ea.join(e.APPDATA || \"./\", \"postgresql\", \"pgpass.conf\") : ea.join(e.HOME || \"./\", \".pgpass\"));\n        return t;\n    };\n    Ce.exports.usePgPass = function(r, e) {\n        return Object.prototype.hasOwnProperty.call(w.env, \"PGPASSWORD\") ? !1 : Wt ? !0 : (e = e || \"<unkn>\", eh(r.mode) ? r.mode & (Yc | Jc) ? (Zr('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', e), !1) : !0 : (Zr('WARNING: password file \"%s\" is not a plain file', e), !1));\n    };\n    var rh = Ce.exports.match = function(r, e) {\n        return Ve.slice(0, -1).reduce(function(t, n, i) {\n            return i == 1 && Number(r[n] || zc) === Number(e[n]) ? t && !0 : t && (e[n] === \"*\" || e[n] === r[n]);\n        }, !0);\n    };\n    Ce.exports.getPassword = function(r, e, t) {\n        var n, i = e.pipe(Gc());\n        function s(c) {\n            var h = nh(c);\n            h && ih(h) && rh(r, h) && (n = h[th], i.end());\n        }\n        o(s, \"onLine\");\n        var a = o(function() {\n            e.destroy(), t(n);\n        }, \"onEnd\"), u = o(function(c) {\n            e.destroy(), Zr(\"WARNING: error on reading file: %s\", c), t(void 0);\n        }, \"onErr\");\n        e.on(\"error\", u), i.on(\"data\", s).on(\"end\", a).on(\"error\", u);\n    };\n    var nh = Ce.exports.parseLine = function(r) {\n        if (r.length < 11 || r.match(/^\\s+#/)) return null;\n        for(var e = \"\", t = \"\", n = 0, i = 0, s = 0, a = {}, u = !1, c = o(function(l, f, m) {\n            var x = r.substring(f, m);\n            Object.hasOwnProperty.call(w.env, \"PGPASS_NO_DEESCAPE\") || (x = x.replace(/\\\\([:\\\\])/g, \"$1\")), a[Ve[l]] = x;\n        }, \"addToObj\"), h = 0; h < r.length - 1; h += 1){\n            if (e = r.charAt(h + 1), t = r.charAt(h), u = n == Jr - 1, u) {\n                c(n, i);\n                break;\n            }\n            h >= 0 && e == \":\" && t !== \"\\\\\" && (c(n, i, h + 1), i = h + 2, n += 1);\n        }\n        return a = Object.keys(a).length === Jr ? a : null, a;\n    }, ih = Ce.exports.isValidEntry = function(r) {\n        for(var e = {\n            0: function(a) {\n                return a.length > 0;\n            },\n            1: function(a) {\n                return a === \"*\" ? !0 : (a = Number(a), isFinite(a) && a > 0 && a < 9007199254740992 && Math.floor(a) === a);\n            },\n            2: function(a) {\n                return a.length > 0;\n            },\n            3: function(a) {\n                return a.length > 0;\n            },\n            4: function(a) {\n                return a.length > 0;\n            }\n        }, t = 0; t < Ve.length; t += 1){\n            var n = e[t], i = r[Ve[t]] || \"\", s = n(i);\n            if (!s) return !1;\n        }\n        return !0;\n    };\n});\nvar ia = L((cd, Xr)=>{\n    \"use strict\";\n    p();\n    var ud = (Kr(), Z(jr)), na = (Wr(), Z($r)), Vt = ra();\n    Xr.exports = function(r, e) {\n        var t = Vt.getFileName();\n        na.stat(t, function(n, i) {\n            if (n || !Vt.usePgPass(i, t)) return e(void 0);\n            var s = na.createReadStream(t);\n            Vt.getPassword(r, s, e);\n        });\n    };\n    Xr.exports.warnTo = Vt.warnTo;\n});\nvar en = L((ld, sa)=>{\n    \"use strict\";\n    p();\n    var sh = St();\n    function Gt(r) {\n        this._types = r || sh, this.text = {}, this.binary = {};\n    }\n    o(Gt, \"TypeOverrides\");\n    Gt.prototype.getOverrides = function(r) {\n        switch(r){\n            case \"text\":\n                return this.text;\n            case \"binary\":\n                return this.binary;\n            default:\n                return {};\n        }\n    };\n    Gt.prototype.setTypeParser = function(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), this.getOverrides(e)[r] = t;\n    };\n    Gt.prototype.getTypeParser = function(r, e) {\n        return e = e || \"text\", this.getOverrides(e)[r] || this._types.getTypeParser(r, e);\n    };\n    sa.exports = Gt;\n});\nvar aa = {};\nye(aa, {\n    default: ()=>ah\n});\nvar ah, oa = ie(()=>{\n    p();\n    ah = {};\n});\nvar ca = L((yd, ua)=>{\n    \"use strict\";\n    p();\n    var oh = (wr(), Z(Ni)), tn = (Wr(), Z($r));\n    function rn(r) {\n        if (r.charAt(0) === \"/\") {\n            var t = r.split(\" \");\n            return {\n                host: t[0],\n                database: t[1]\n            };\n        }\n        var e = oh.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(r) ? encodeURI(r).replace(/\\%25(\\d\\d)/g, \"%$1\") : r, !0), t = e.query;\n        for(var n in t)Array.isArray(t[n]) && (t[n] = t[n][t[n].length - 1]);\n        var i = (e.auth || \":\").split(\":\");\n        if (t.user = i[0], t.password = i.splice(1).join(\":\"), t.port = e.port, e.protocol == \"socket:\") return t.host = decodeURI(e.pathname), t.database = e.query.db, t.client_encoding = e.query.encoding, t;\n        t.host || (t.host = e.hostname);\n        var s = e.pathname;\n        if (!t.host && s && /^%2f/i.test(s)) {\n            var a = s.split(\"/\");\n            t.host = decodeURIComponent(a[0]), s = a.splice(1).join(\"/\");\n        }\n        switch(s && s.charAt(0) === \"/\" && (s = s.slice(1) || null), t.database = s && decodeURI(s), (t.ssl === \"true\" || t.ssl === \"1\") && (t.ssl = !0), t.ssl === \"0\" && (t.ssl = !1), (t.sslcert || t.sslkey || t.sslrootcert || t.sslmode) && (t.ssl = {}), t.sslcert && (t.ssl.cert = tn.readFileSync(t.sslcert).toString()), t.sslkey && (t.ssl.key = tn.readFileSync(t.sslkey).toString()), t.sslrootcert && (t.ssl.ca = tn.readFileSync(t.sslrootcert).toString()), t.sslmode){\n            case \"disable\":\n                {\n                    t.ssl = !1;\n                    break;\n                }\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                break;\n            case \"no-verify\":\n                {\n                    t.ssl.rejectUnauthorized = !1;\n                    break;\n                }\n        }\n        return t;\n    }\n    o(rn, \"parse\");\n    ua.exports = rn;\n    rn.parse = rn;\n});\nvar zt = L((gd, fa)=>{\n    \"use strict\";\n    p();\n    var uh = (oa(), Z(aa)), la = bt(), ha = ca().parse, ce = o(function(r, e, t) {\n        return t === void 0 ? t = w.env[\"PG\" + r.toUpperCase()] : t === !1 || (t = w.env[t]), e[r] || t || la[r];\n    }, \"val\"), ch = o(function() {\n        switch(w.env.PGSSLMODE){\n            case \"disable\":\n                return !1;\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                return !0;\n            case \"no-verify\":\n                return {\n                    rejectUnauthorized: !1\n                };\n        }\n        return la.ssl;\n    }, \"readSSLConfigFromEnvironment\"), Ge = o(function(r) {\n        return \"'\" + (\"\" + r).replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"'\";\n    }, \"quoteParamValue\"), ge = o(function(r, e, t) {\n        var n = e[t];\n        n != null && r.push(t + \"=\" + Ge(n));\n    }, \"add\"), sn = class sn {\n        constructor(e){\n            e = typeof e == \"string\" ? ha(e) : e || {}, e.connectionString && (e = Object.assign({}, e, ha(e.connectionString))), this.user = ce(\"user\", e), this.database = ce(\"database\", e), this.database === void 0 && (this.database = this.user), this.port = parseInt(ce(\"port\", e), 10), this.host = ce(\"host\", e), Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: ce(\"password\", e)\n            }), this.binary = ce(\"binary\", e), this.options = ce(\"options\", e), this.ssl = typeof e.ssl > \"u\" ? ch() : e.ssl, typeof this.ssl == \"string\" && this.ssl === \"true\" && (this.ssl = !0), this.ssl === \"no-verify\" && (this.ssl = {\n                rejectUnauthorized: !1\n            }), this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this.client_encoding = ce(\"client_encoding\", e), this.replication = ce(\"replication\", e), this.isDomainSocket = !(this.host || \"\").indexOf(\"/\"), this.application_name = ce(\"application_name\", e, \"PGAPPNAME\"), this.fallback_application_name = ce(\"fallback_application_name\", e, !1), this.statement_timeout = ce(\"statement_timeout\", e, !1), this.lock_timeout = ce(\"lock_timeout\", e, !1), this.idle_in_transaction_session_timeout = ce(\"idle_in_transaction_session_timeout\", e, !1), this.query_timeout = ce(\"query_timeout\", e, !1), e.connectionTimeoutMillis === void 0 ? this.connect_timeout = w.env.PGCONNECT_TIMEOUT || 0 : this.connect_timeout = Math.floor(e.connectionTimeoutMillis / 1e3), e.keepAlive === !1 ? this.keepalives = 0 : e.keepAlive === !0 && (this.keepalives = 1), typeof e.keepAliveInitialDelayMillis == \"number\" && (this.keepalives_idle = Math.floor(e.keepAliveInitialDelayMillis / 1e3));\n        }\n        getLibpqConnectionString(e) {\n            var t = [];\n            ge(t, this, \"user\"), ge(t, this, \"password\"), ge(t, this, \"port\"), ge(t, this, \"application_name\"), ge(t, this, \"fallback_application_name\"), ge(t, this, \"connect_timeout\"), ge(t, this, \"options\");\n            var n = typeof this.ssl == \"object\" ? this.ssl : this.ssl ? {\n                sslmode: this.ssl\n            } : {};\n            if (ge(t, n, \"sslmode\"), ge(t, n, \"sslca\"), ge(t, n, \"sslkey\"), ge(t, n, \"sslcert\"), ge(t, n, \"sslrootcert\"), this.database && t.push(\"dbname=\" + Ge(this.database)), this.replication && t.push(\"replication=\" + Ge(this.replication)), this.host && t.push(\"host=\" + Ge(this.host)), this.isDomainSocket) return e(null, t.join(\" \"));\n            this.client_encoding && t.push(\"client_encoding=\" + Ge(this.client_encoding)), uh.lookup(this.host, function(i, s) {\n                return i ? e(i, null) : (t.push(\"hostaddr=\" + Ge(s)), e(null, t.join(\" \")));\n            });\n        }\n    };\n    o(sn, \"ConnectionParameters\");\n    var nn = sn;\n    fa.exports = nn;\n});\nvar ya = L((xd, pa)=>{\n    \"use strict\";\n    p();\n    var hh = St(), da = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/, on = class on {\n        constructor(e, t){\n            this.command = null, this.rowCount = null, this.oid = null, this.rows = [], this.fields = [], this._parsers = void 0, this._types = t, this.RowCtor = null, this.rowAsArray = e === \"array\", this.rowAsArray && (this.parseRow = this._parseRowAsArray);\n        }\n        addCommandComplete(e) {\n            var t;\n            e.text ? t = da.exec(e.text) : t = da.exec(e.command), t && (this.command = t[1], t[3] ? (this.oid = parseInt(t[2], 10), this.rowCount = parseInt(t[3], 10)) : t[2] && (this.rowCount = parseInt(t[2], 10)));\n        }\n        _parseRowAsArray(e) {\n            for(var t = new Array(e.length), n = 0, i = e.length; n < i; n++){\n                var s = e[n];\n                s !== null ? t[n] = this._parsers[n](s) : t[n] = null;\n            }\n            return t;\n        }\n        parseRow(e) {\n            for(var t = {}, n = 0, i = e.length; n < i; n++){\n                var s = e[n], a = this.fields[n].name;\n                s !== null ? t[a] = this._parsers[n](s) : t[a] = null;\n            }\n            return t;\n        }\n        addRow(e) {\n            this.rows.push(e);\n        }\n        addFields(e) {\n            this.fields = e, this.fields.length && (this._parsers = new Array(e.length));\n            for(var t = 0; t < e.length; t++){\n                var n = e[t];\n                this._types ? this._parsers[t] = this._types.getTypeParser(n.dataTypeID, n.format || \"text\") : this._parsers[t] = hh.getTypeParser(n.dataTypeID, n.format || \"text\");\n            }\n        }\n    };\n    o(on, \"Result\");\n    var an = on;\n    pa.exports = an;\n});\nvar Sa = L((Ed, ga)=>{\n    \"use strict\";\n    p();\n    var { EventEmitter: lh } = Ue(), wa = ya(), ma = xt(), cn = class cn extends lh {\n        constructor(e, t, n){\n            super(), e = ma.normalizeQueryConfig(e, t, n), this.text = e.text, this.values = e.values, this.rows = e.rows, this.types = e.types, this.name = e.name, this.binary = e.binary, this.portal = e.portal || \"\", this.callback = e.callback, this._rowMode = e.rowMode, w.domain && e.callback && (this.callback = w.domain.bind(e.callback)), this._result = new wa(this._rowMode, this.types), this._results = this._result, this.isPreparedStatement = !1, this._canceledDueToError = !1, this._promise = null;\n        }\n        requiresPreparation() {\n            return this.name || this.rows ? !0 : !this.text || !this.values ? !1 : this.values.length > 0;\n        }\n        _checkForMultirow() {\n            this._result.command && (Array.isArray(this._results) || (this._results = [\n                this._result\n            ]), this._result = new wa(this._rowMode, this.types), this._results.push(this._result));\n        }\n        handleRowDescription(e) {\n            this._checkForMultirow(), this._result.addFields(e.fields), this._accumulateRows = this.callback || !this.listeners(\"row\").length;\n        }\n        handleDataRow(e) {\n            let t;\n            if (!this._canceledDueToError) {\n                try {\n                    t = this._result.parseRow(e.fields);\n                } catch (n) {\n                    this._canceledDueToError = n;\n                    return;\n                }\n                this.emit(\"row\", t, this._result), this._accumulateRows && this._result.addRow(t);\n            }\n        }\n        handleCommandComplete(e, t) {\n            this._checkForMultirow(), this._result.addCommandComplete(e), this.rows && t.sync();\n        }\n        handleEmptyQuery(e) {\n            this.rows && e.sync();\n        }\n        handleError(e, t) {\n            if (this._canceledDueToError && (e = this._canceledDueToError, this._canceledDueToError = !1), this.callback) return this.callback(e);\n            this.emit(\"error\", e);\n        }\n        handleReadyForQuery(e) {\n            if (this._canceledDueToError) return this.handleError(this._canceledDueToError, e);\n            if (this.callback) try {\n                this.callback(null, this._results);\n            } catch (t) {\n                w.nextTick(()=>{\n                    throw t;\n                });\n            }\n            this.emit(\"end\", this._results);\n        }\n        submit(e) {\n            if (typeof this.text != \"string\" && typeof this.name != \"string\") return new Error(\"A query must have either text or a name. Supplying neither is unsupported.\");\n            let t = e.parsedStatements[this.name];\n            return this.text && t && this.text !== t ? new Error(`Prepared statements must be \\\nunique - '${this.name}' was used for a different statement`) : this.values && !Array.isArray(this.values) ? new Error(\"Query values must be an array\") : (this.requiresPreparation() ? this.prepare(e) : e.query(this.text), null);\n        }\n        hasBeenParsed(e) {\n            return this.name && e.parsedStatements[this.name];\n        }\n        handlePortalSuspended(e) {\n            this._getRows(e, this.rows);\n        }\n        _getRows(e, t) {\n            e.execute({\n                portal: this.portal,\n                rows: t\n            }), t ? e.flush() : e.sync();\n        }\n        prepare(e) {\n            this.isPreparedStatement = !0, this.hasBeenParsed(e) || e.parse({\n                text: this.text,\n                name: this.name,\n                types: this.types\n            });\n            try {\n                e.bind({\n                    portal: this.portal,\n                    statement: this.name,\n                    values: this.values,\n                    binary: this.binary,\n                    valueMapper: ma.prepareValue\n                });\n            } catch (t) {\n                this.handleError(t, e);\n                return;\n            }\n            e.describe({\n                type: \"P\",\n                name: this.portal || \"\"\n            }), this._getRows(e, this.rows);\n        }\n        handleCopyInResponse(e) {\n            e.sendCopyFail(\"No source stream defined\");\n        }\n        handleCopyData(e, t) {}\n    };\n    o(cn, \"Query\");\n    var un = cn;\n    ga.exports = un;\n});\nvar Dn = L((U)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(U, \"__esModule\", {\n        value: !0\n    });\n    U.NoticeMessage = U.DataRowMessage = U.CommandCompleteMessage = U.ReadyForQueryMessage = U.NotificationResponseMessage = U.BackendKeyDataMessage = U.AuthenticationMD5Password = U.ParameterStatusMessage = U.ParameterDescriptionMessage = U.RowDescriptionMessage = U.Field = U.CopyResponse = U.CopyDataMessage = U.DatabaseError = U.copyDone = U.emptyQuery = U.replicationStart = U.portalSuspended = U.noData = U.closeComplete = U.bindComplete = U.parseComplete = void 0;\n    U.parseComplete = {\n        name: \"parseComplete\",\n        length: 5\n    };\n    U.bindComplete = {\n        name: \"bindComplete\",\n        length: 5\n    };\n    U.closeComplete = {\n        name: \"closeComplete\",\n        length: 5\n    };\n    U.noData = {\n        name: \"noData\",\n        length: 5\n    };\n    U.portalSuspended = {\n        name: \"portalSuspended\",\n        length: 5\n    };\n    U.replicationStart = {\n        name: \"replicationStart\",\n        length: 4\n    };\n    U.emptyQuery = {\n        name: \"emptyQuery\",\n        length: 4\n    };\n    U.copyDone = {\n        name: \"copyDone\",\n        length: 4\n    };\n    var En = class En extends Error {\n        constructor(e, t, n){\n            super(e), this.length = t, this.name = n;\n        }\n    };\n    o(En, \"DatabaseError\");\n    var hn = En;\n    U.DatabaseError = hn;\n    var Cn = class Cn {\n        constructor(e, t){\n            this.length = e, this.chunk = t, this.name = \"copyData\";\n        }\n    };\n    o(Cn, \"CopyDataMessage\");\n    var ln = Cn;\n    U.CopyDataMessage = ln;\n    var _n = class _n {\n        constructor(e, t, n, i){\n            this.length = e, this.name = t, this.binary = n, this.columnTypes = new Array(i);\n        }\n    };\n    o(_n, \"CopyResponse\");\n    var fn = _n;\n    U.CopyResponse = fn;\n    var Un = class Un {\n        constructor(e, t, n, i, s, a, u){\n            this.name = e, this.tableID = t, this.columnID = n, this.dataTypeID = i, this.dataTypeSize = s, this.dataTypeModifier = a, this.format = u;\n        }\n    };\n    o(Un, \"Field\");\n    var dn = Un;\n    U.Field = dn;\n    var In = class In {\n        constructor(e, t){\n            this.length = e, this.fieldCount = t, this.name = \"rowDescription\", this.fields = new Array(this.fieldCount);\n        }\n    };\n    o(In, \"RowDescriptionMessage\");\n    var pn = In;\n    U.RowDescriptionMessage = pn;\n    var Ln = class Ln {\n        constructor(e, t){\n            this.length = e, this.parameterCount = t, this.name = \"parameterDescription\", this.dataTypeIDs = new Array(this.parameterCount);\n        }\n    };\n    o(Ln, \"ParameterDescriptionMessage\");\n    var yn = Ln;\n    U.ParameterDescriptionMessage = yn;\n    var Tn = class Tn {\n        constructor(e, t, n){\n            this.length = e, this.parameterName = t, this.parameterValue = n, this.name = \"parameterStatus\";\n        }\n    };\n    o(Tn, \"ParameterStatusMessage\");\n    var wn = Tn;\n    U.ParameterStatusMessage = wn;\n    var Bn = class Bn {\n        constructor(e, t){\n            this.length = e, this.salt = t, this.name = \"authenticationMD5Password\";\n        }\n    };\n    o(Bn, \"AuthenticationMD5Password\");\n    var mn = Bn;\n    U.AuthenticationMD5Password = mn;\n    var Pn = class Pn {\n        constructor(e, t, n){\n            this.length = e, this.processID = t, this.secretKey = n, this.name = \"backendKeyData\";\n        }\n    };\n    o(Pn, \"BackendKeyDataMessage\");\n    var gn = Pn;\n    U.BackendKeyDataMessage = gn;\n    var Rn = class Rn {\n        constructor(e, t, n, i){\n            this.length = e, this.processId = t, this.channel = n, this.payload = i, this.name = \"notification\";\n        }\n    };\n    o(Rn, \"NotificationResponseMessage\");\n    var Sn = Rn;\n    U.NotificationResponseMessage = Sn;\n    var Mn = class Mn {\n        constructor(e, t){\n            this.length = e, this.status = t, this.name = \"readyForQuery\";\n        }\n    };\n    o(Mn, \"ReadyForQueryMessage\");\n    var bn = Mn;\n    U.ReadyForQueryMessage = bn;\n    var Fn = class Fn {\n        constructor(e, t){\n            this.length = e, this.text = t, this.name = \"commandComplete\";\n        }\n    };\n    o(Fn, \"CommandCompleteMessage\");\n    var xn = Fn;\n    U.CommandCompleteMessage = xn;\n    var kn = class kn {\n        constructor(e, t){\n            this.length = e, this.fields = t, this.name = \"dataRow\", this.fieldCount = t.length;\n        }\n    };\n    o(kn, \"DataRowMessage\");\n    var An = kn;\n    U.DataRowMessage = An;\n    var Nn = class Nn {\n        constructor(e, t){\n            this.length = e, this.message = t, this.name = \"notice\";\n        }\n    };\n    o(Nn, \"NoticeMessage\");\n    var vn = Nn;\n    U.NoticeMessage = vn;\n});\nvar ba = L((Yt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Yt, \"__esModule\", {\n        value: !0\n    });\n    Yt.Writer = void 0;\n    var On = class On {\n        constructor(e = 256){\n            this.size = e, this.offset = 5, this.headerPosition = 0, this.buffer = y.allocUnsafe(e);\n        }\n        ensure(e) {\n            var t = this.buffer.length - this.offset;\n            if (t < e) {\n                var n = this.buffer, i = n.length + (n.length >> 1) + e;\n                this.buffer = y.allocUnsafe(i), n.copy(this.buffer);\n            }\n        }\n        addInt32(e) {\n            return this.ensure(4), this.buffer[this.offset++] = e >>> 24 & 255, this.buffer[this.offset++] = e >>> 16 & 255, this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addInt16(e) {\n            return this.ensure(2), this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addCString(e) {\n            if (!e) this.ensure(1);\n            else {\n                var t = y.byteLength(e);\n                this.ensure(t + 1), this.buffer.write(e, this.offset, \"utf-8\"), this.offset += t;\n            }\n            return this.buffer[this.offset++] = 0, this;\n        }\n        addString(e = \"\") {\n            var t = y.byteLength(e);\n            return this.ensure(t), this.buffer.write(e, this.offset), this.offset += t, this;\n        }\n        add(e) {\n            return this.ensure(e.length), e.copy(this.buffer, this.offset), this.offset += e.length, this;\n        }\n        join(e) {\n            if (e) {\n                this.buffer[this.headerPosition] = e;\n                let t = this.offset - (this.headerPosition + 1);\n                this.buffer.writeInt32BE(t, this.headerPosition + 1);\n            }\n            return this.buffer.slice(e ? 0 : 5, this.offset);\n        }\n        flush(e) {\n            var t = this.join(e);\n            return this.offset = 5, this.headerPosition = 0, this.buffer = y.allocUnsafe(this.size), t;\n        }\n    };\n    o(On, \"Writer\");\n    var qn = On;\n    Yt.Writer = qn;\n});\nvar Aa = L((Zt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Zt, \"__esModule\", {\n        value: !0\n    });\n    Zt.serialize = void 0;\n    var Qn = ba(), H = new Qn.Writer, fh = o((r)=>{\n        H.addInt16(3).addInt16(0);\n        for (let n of Object.keys(r))H.addCString(n).addCString(r[n]);\n        H.addCString(\"client_encoding\").addCString(\"UTF8\");\n        var e = H.addCString(\"\").flush(), t = e.length + 4;\n        return new Qn.Writer().addInt32(t).add(e).flush();\n    }, \"startup\"), dh = o(()=>{\n        let r = y.allocUnsafe(8);\n        return r.writeInt32BE(8, 0), r.writeInt32BE(80877103, 4), r;\n    }, \"requestSsl\"), ph = o((r)=>H.addCString(r).flush(112), \"password\"), yh = o(function(r, e) {\n        return H.addCString(r).addInt32(y.byteLength(e)).addString(e), H.flush(112);\n    }, \"sendSASLInitialResponseMessage\"), wh = o(function(r) {\n        return H.addString(r).flush(112);\n    }, \"sendSCRAMClientFinalMessage\"), mh = o((r)=>H.addCString(r).flush(81), \"query\"), xa = [], gh = o((r)=>{\n        let e = r.name || \"\";\n        e.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", e, e.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n        let t = r.types || xa;\n        for(var n = t.length, i = H.addCString(e).addCString(r.text).addInt16(n), s = 0; s < n; s++)i.addInt32(t[s]);\n        return H.flush(80);\n    }, \"parse\"), ze = new Qn.Writer, Sh = o(function(r, e) {\n        for(let t = 0; t < r.length; t++){\n            let n = e ? e(r[t], t) : r[t];\n            n == null ? (H.addInt16(0), ze.addInt32(-1)) : n instanceof y ? (H.addInt16(1), ze.addInt32(n.length), ze.add(n)) : (H.addInt16(0), ze.addInt32(y.byteLength(n)), ze.addString(n));\n        }\n    }, \"writeValues\"), bh = o((r = {})=>{\n        let e = r.portal || \"\", t = r.statement || \"\", n = r.binary || !1, i = r.values || xa, s = i.length;\n        return H.addCString(e).addCString(t), H.addInt16(s), Sh(i, r.valueMapper), H.addInt16(s), H.add(ze.flush()), H.addInt16(n ? 1 : 0), H.flush(66);\n    }, \"bind\"), xh = y.from([\n        69,\n        0,\n        0,\n        0,\n        9,\n        0,\n        0,\n        0,\n        0,\n        0\n    ]), Ah = o((r)=>{\n        if (!r || !r.portal && !r.rows) return xh;\n        let e = r.portal || \"\", t = r.rows || 0, n = y.byteLength(e), i = 4 + n + 1 + 4, s = y.allocUnsafe(1 + i);\n        return s[0] = 69, s.writeInt32BE(i, 1), s.write(e, 5, \"utf-8\"), s[n + 5] = 0, s.writeUInt32BE(t, s.length - 4), s;\n    }, \"execute\"), vh = o((r, e)=>{\n        let t = y.allocUnsafe(16);\n        return t.writeInt32BE(16, 0), t.writeInt16BE(1234, 4), t.writeInt16BE(5678, 6), t.writeInt32BE(r, 8), t.writeInt32BE(e, 12), t;\n    }, \"cancel\"), Hn = o((r, e)=>{\n        let n = 4 + y.byteLength(e) + 1, i = y.allocUnsafe(1 + n);\n        return i[0] = r, i.writeInt32BE(n, 1), i.write(e, 5, \"utf-8\"), i[n] = 0, i;\n    }, \"cstringMessage\"), Eh = H.addCString(\"P\").flush(68), Ch = H.addCString(\"S\").flush(68), _h = o((r)=>r.name ? Hn(68, `${r.type}${r.name || \"\"}`) : r.type === \"P\" ? Eh : Ch, \"describe\"), Uh = o((r)=>{\n        let e = `${r.type}${r.name || \"\"}`;\n        return Hn(67, e);\n    }, \"close\"), Ih = o((r)=>H.add(r).flush(100), \"copyData\"), Lh = o((r)=>Hn(102, r), \"copyFail\"), Jt = o((r)=>y.from([\n            r,\n            0,\n            0,\n            0,\n            4\n        ]), \"codeOnlyBuffer\"), Th = Jt(72), Bh = Jt(83), Ph = Jt(88), Rh = Jt(99), Mh = {\n        startup: fh,\n        password: ph,\n        requestSsl: dh,\n        sendSASLInitialResponseMessage: yh,\n        sendSCRAMClientFinalMessage: wh,\n        query: mh,\n        parse: gh,\n        bind: bh,\n        execute: Ah,\n        describe: _h,\n        close: Uh,\n        flush: ()=>Th,\n        sync: ()=>Bh,\n        end: ()=>Ph,\n        copyData: Ih,\n        copyDone: ()=>Rh,\n        copyFail: Lh,\n        cancel: vh\n    };\n    Zt.serialize = Mh;\n});\nvar va = L((Xt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Xt, \"__esModule\", {\n        value: !0\n    });\n    Xt.BufferReader = void 0;\n    var Fh = y.allocUnsafe(0), Kn = class Kn {\n        constructor(e = 0){\n            this.offset = e, this.buffer = Fh, this.encoding = \"utf-8\";\n        }\n        setBuffer(e, t) {\n            this.offset = e, this.buffer = t;\n        }\n        int16() {\n            let e = this.buffer.readInt16BE(this.offset);\n            return this.offset += 2, e;\n        }\n        byte() {\n            let e = this.buffer[this.offset];\n            return this.offset++, e;\n        }\n        int32() {\n            let e = this.buffer.readInt32BE(this.offset);\n            return this.offset += 4, e;\n        }\n        string(e) {\n            let t = this.buffer.toString(this.encoding, this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n        cstring() {\n            let e = this.offset, t = e;\n            for(; this.buffer[t++] !== 0;);\n            return this.offset = t, this.buffer.toString(this.encoding, e, t - 1);\n        }\n        bytes(e) {\n            let t = this.buffer.slice(this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n    };\n    o(Kn, \"BufferReader\");\n    var jn = Kn;\n    Xt.BufferReader = jn;\n});\nvar Ea = {};\nye(Ea, {\n    default: ()=>kh\n});\nvar kh, Ca = ie(()=>{\n    p();\n    kh = {};\n});\nvar Ia = L((Ye)=>{\n    \"use strict\";\n    p();\n    var Nh = Ye && Ye.__importDefault || function(r) {\n        return r && r.__esModule ? r : {\n            default: r\n        };\n    };\n    Object.defineProperty(Ye, \"__esModule\", {\n        value: !0\n    });\n    Ye.Parser = void 0;\n    var G = Dn(), Dh = va(), qh = Nh((Ca(), Z(Ea))), $n = 1, Oh = 4, _a = $n + Oh, Ua = y.allocUnsafe(0), Vn = class Vn {\n        constructor(e){\n            if (this.buffer = Ua, this.bufferLength = 0, this.bufferOffset = 0, this.reader = new Dh.BufferReader, e?.mode === \"binary\") throw new Error(\"Binary mode not supported yet\");\n            this.mode = e?.mode || \"text\";\n        }\n        parse(e, t) {\n            this.mergeBuffer(e);\n            let n = this.bufferOffset + this.bufferLength, i = this.bufferOffset;\n            for(; i + _a <= n;){\n                let s = this.buffer[i], a = this.buffer.readUInt32BE(i + $n), u = $n + a;\n                if (u + i <= n) {\n                    let c = this.handlePacket(i + _a, s, a, this.buffer);\n                    t(c), i += u;\n                } else break;\n            }\n            i === n ? (this.buffer = Ua, this.bufferLength = 0, this.bufferOffset = 0) : (this.bufferLength = n - i, this.bufferOffset = i);\n        }\n        mergeBuffer(e) {\n            if (this.bufferLength > 0) {\n                let t = this.bufferLength + e.byteLength;\n                if (t + this.bufferOffset > this.buffer.byteLength) {\n                    let i;\n                    if (t <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) i = this.buffer;\n                    else {\n                        let s = this.buffer.byteLength * 2;\n                        for(; t >= s;)s *= 2;\n                        i = y.allocUnsafe(s);\n                    }\n                    this.buffer.copy(i, 0, this.bufferOffset, this.bufferOffset + this.bufferLength), this.buffer = i, this.bufferOffset = 0;\n                }\n                e.copy(this.buffer, this.bufferOffset + this.bufferLength), this.bufferLength = t;\n            } else this.buffer = e, this.bufferOffset = 0, this.bufferLength = e.byteLength;\n        }\n        handlePacket(e, t, n, i) {\n            switch(t){\n                case 50:\n                    return G.bindComplete;\n                case 49:\n                    return G.parseComplete;\n                case 51:\n                    return G.closeComplete;\n                case 110:\n                    return G.noData;\n                case 115:\n                    return G.portalSuspended;\n                case 99:\n                    return G.copyDone;\n                case 87:\n                    return G.replicationStart;\n                case 73:\n                    return G.emptyQuery;\n                case 68:\n                    return this.parseDataRowMessage(e, n, i);\n                case 67:\n                    return this.parseCommandCompleteMessage(e, n, i);\n                case 90:\n                    return this.parseReadyForQueryMessage(e, n, i);\n                case 65:\n                    return this.parseNotificationMessage(e, n, i);\n                case 82:\n                    return this.parseAuthenticationResponse(e, n, i);\n                case 83:\n                    return this.parseParameterStatusMessage(e, n, i);\n                case 75:\n                    return this.parseBackendKeyData(e, n, i);\n                case 69:\n                    return this.parseErrorMessage(e, n, i, \"error\");\n                case 78:\n                    return this.parseErrorMessage(e, n, i, \"notice\");\n                case 84:\n                    return this.parseRowDescriptionMessage(e, n, i);\n                case 116:\n                    return this.parseParameterDescriptionMessage(e, n, i);\n                case 71:\n                    return this.parseCopyInMessage(e, n, i);\n                case 72:\n                    return this.parseCopyOutMessage(e, n, i);\n                case 100:\n                    return this.parseCopyData(e, n, i);\n                default:\n                    qh.default.fail(`unknown message code: ${t.toString(16)}`);\n            }\n        }\n        parseReadyForQueryMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.string(1);\n            return new G.ReadyForQueryMessage(t, i);\n        }\n        parseCommandCompleteMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring();\n            return new G.CommandCompleteMessage(t, i);\n        }\n        parseCopyData(e, t, n) {\n            let i = n.slice(e, e + (t - 4));\n            return new G.CopyDataMessage(t, i);\n        }\n        parseCopyInMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyInResponse\");\n        }\n        parseCopyOutMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyOutResponse\");\n        }\n        parseCopyMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = this.reader.byte() !== 0, a = this.reader.int16(), u = new G.CopyResponse(t, i, s, a);\n            for(let c = 0; c < a; c++)u.columnTypes[c] = this.reader.int16();\n            return u;\n        }\n        parseNotificationMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.cstring(), a = this.reader.cstring();\n            return new G.NotificationResponseMessage(t, i, s, a);\n        }\n        parseRowDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new G.RowDescriptionMessage(t, i);\n            for(let a = 0; a < i; a++)s.fields[a] = this.parseField();\n            return s;\n        }\n        parseField() {\n            let e = this.reader.cstring(), t = this.reader.int32(), n = this.reader.int16(), i = this.reader.int32(), s = this.reader.int16(), a = this.reader.int32(), u = this.reader.int16() === 0 ? \"text\" : \"binary\";\n            return new G.Field(e, t, n, i, s, a, u);\n        }\n        parseParameterDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new G.ParameterDescriptionMessage(t, i);\n            for(let a = 0; a < i; a++)s.dataTypeIDs[a] = this.reader.int32();\n            return s;\n        }\n        parseDataRowMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new Array(i);\n            for(let a = 0; a < i; a++){\n                let u = this.reader.int32();\n                s[a] = u === -1 ? null : this.reader.string(u);\n            }\n            return new G.DataRowMessage(t, s);\n        }\n        parseParameterStatusMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring(), s = this.reader.cstring();\n            return new G.ParameterStatusMessage(t, i, s);\n        }\n        parseBackendKeyData(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.int32();\n            return new G.BackendKeyDataMessage(t, i, s);\n        }\n        parseAuthenticationResponse(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = {\n                name: \"authenticationOk\",\n                length: t\n            };\n            switch(i){\n                case 0:\n                    break;\n                case 3:\n                    s.length === 8 && (s.name = \"authenticationCleartextPassword\");\n                    break;\n                case 5:\n                    if (s.length === 12) {\n                        s.name = \"authenticationMD5Password\";\n                        let u = this.reader.bytes(4);\n                        return new G.AuthenticationMD5Password(t, u);\n                    }\n                    break;\n                case 10:\n                    s.name = \"authenticationSASL\", s.mechanisms = [];\n                    let a;\n                    do a = this.reader.cstring(), a && s.mechanisms.push(a);\n                    while (a);\n                    break;\n                case 11:\n                    s.name = \"authenticationSASLContinue\", s.data = this.reader.string(t - 8);\n                    break;\n                case 12:\n                    s.name = \"authenticationSASLFinal\", s.data = this.reader.string(t - 8);\n                    break;\n                default:\n                    throw new Error(\"Unknown authenticationOk message type \" + i);\n            }\n            return s;\n        }\n        parseErrorMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = {}, a = this.reader.string(1);\n            for(; a !== \"\\x00\";)s[a] = this.reader.cstring(), a = this.reader.string(1);\n            let u = s.M, c = i === \"notice\" ? new G.NoticeMessage(t, u) : new G.DatabaseError(u, t, i);\n            return c.severity = s.S, c.code = s.C, c.detail = s.D, c.hint = s.H, c.position = s.P, c.internalPosition = s.p, c.internalQuery = s.q, c.where = s.W, c.schema = s.s, c.table = s.t, c.column = s.c, c.dataType = s.d, c.constraint = s.n, c.file = s.F, c.line = s.L, c.routine = s.R, c;\n        }\n    };\n    o(Vn, \"Parser\");\n    var Wn = Vn;\n    Ye.Parser = Wn;\n});\nvar Gn = L((Be)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Be, \"__esModule\", {\n        value: !0\n    });\n    Be.DatabaseError = Be.serialize = Be.parse = void 0;\n    var Qh = Dn();\n    Object.defineProperty(Be, \"DatabaseError\", {\n        enumerable: !0,\n        get: function() {\n            return Qh.DatabaseError;\n        }\n    });\n    var Hh = Aa();\n    Object.defineProperty(Be, \"serialize\", {\n        enumerable: !0,\n        get: function() {\n            return Hh.serialize;\n        }\n    });\n    var jh = Ia();\n    function Kh(r, e) {\n        let t = new jh.Parser;\n        return r.on(\"data\", (n)=>t.parse(n, e)), new Promise((n)=>r.on(\"end\", ()=>n()));\n    }\n    o(Kh, \"parse\");\n    Be.parse = Kh;\n});\nvar La = {};\nye(La, {\n    connect: ()=>$h\n});\nfunction $h(r) {\n    let { socket: e, servername: t } = r;\n    return e.startTls(t), e;\n}\nvar Ta = ie(()=>{\n    p();\n    o($h, \"connect\");\n});\nvar Jn = L((Gd, Ra)=>{\n    \"use strict\";\n    p();\n    var Ba = (qt(), Z(us)), Wh = Ue().EventEmitter, { parse: Vh, serialize: re } = Gn(), Pa = re.flush(), Gh = re.sync(), zh = re.end(), Yn = class Yn extends Wh {\n        constructor(e){\n            super(), e = e || {}, this.stream = e.stream || new Ba.Socket, this._keepAlive = e.keepAlive, this._keepAliveInitialDelayMillis = e.keepAliveInitialDelayMillis, this.lastBuffer = !1, this.parsedStatements = {}, this.ssl = e.ssl || !1, this._ending = !1, this._emitMessage = !1;\n            var t = this;\n            this.on(\"newListener\", function(n) {\n                n === \"message\" && (t._emitMessage = !0);\n            });\n        }\n        connect(e, t) {\n            var n = this;\n            this._connecting = !0, this.stream.setNoDelay(!0), this.stream.connect(e, t), this.stream.once(\"connect\", function() {\n                n._keepAlive && n.stream.setKeepAlive(!0, n._keepAliveInitialDelayMillis), n.emit(\"connect\");\n            });\n            let i = o(function(s) {\n                n._ending && (s.code === \"ECONNRESET\" || s.code === \"EPIPE\") || n.emit(\"error\", s);\n            }, \"reportStreamError\");\n            if (this.stream.on(\"error\", i), this.stream.on(\"close\", function() {\n                n.emit(\"end\");\n            }), !this.ssl) return this.attachListeners(this.stream);\n            this.stream.once(\"data\", function(s) {\n                var a = s.toString(\"utf8\");\n                switch(a){\n                    case \"S\":\n                        break;\n                    case \"N\":\n                        return n.stream.end(), n.emit(\"error\", new Error(\"The server does not support SSL connections\"));\n                    default:\n                        return n.stream.end(), n.emit(\"error\", new Error(\"There was an error establishing an SSL connection\"));\n                }\n                var u = (Ta(), Z(La));\n                let c = {\n                    socket: n.stream\n                };\n                n.ssl !== !0 && (Object.assign(c, n.ssl), \"key\" in n.ssl && (c.key = n.ssl.key)), Ba.isIP(t) === 0 && (c.servername = t);\n                try {\n                    n.stream = u.connect(c);\n                } catch (h) {\n                    return n.emit(\"error\", h);\n                }\n                n.attachListeners(n.stream), n.stream.on(\"error\", i), n.emit(\"sslconnect\");\n            });\n        }\n        attachListeners(e) {\n            e.on(\"end\", ()=>{\n                this.emit(\"end\");\n            }), Vh(e, (t)=>{\n                var n = t.name === \"error\" ? \"errorMessage\" : t.name;\n                this._emitMessage && this.emit(\"message\", t), this.emit(n, t);\n            });\n        }\n        requestSsl() {\n            this.stream.write(re.requestSsl());\n        }\n        startup(e) {\n            this.stream.write(re.startup(e));\n        }\n        cancel(e, t) {\n            this._send(re.cancel(e, t));\n        }\n        password(e) {\n            this._send(re.password(e));\n        }\n        sendSASLInitialResponseMessage(e, t) {\n            this._send(re.sendSASLInitialResponseMessage(e, t));\n        }\n        sendSCRAMClientFinalMessage(e) {\n            this._send(re.sendSCRAMClientFinalMessage(e));\n        }\n        _send(e) {\n            return this.stream.writable ? this.stream.write(e) : !1;\n        }\n        query(e) {\n            this._send(re.query(e));\n        }\n        parse(e) {\n            this._send(re.parse(e));\n        }\n        bind(e) {\n            this._send(re.bind(e));\n        }\n        execute(e) {\n            this._send(re.execute(e));\n        }\n        flush() {\n            this.stream.writable && this.stream.write(Pa);\n        }\n        sync() {\n            this._ending = !0, this._send(Pa), this._send(Gh);\n        }\n        ref() {\n            this.stream.ref();\n        }\n        unref() {\n            this.stream.unref();\n        }\n        end() {\n            if (this._ending = !0, !this._connecting || !this.stream.writable) {\n                this.stream.end();\n                return;\n            }\n            return this.stream.write(zh, ()=>{\n                this.stream.end();\n            });\n        }\n        close(e) {\n            this._send(re.close(e));\n        }\n        describe(e) {\n            this._send(re.describe(e));\n        }\n        sendCopyFromChunk(e) {\n            this._send(re.copyData(e));\n        }\n        endCopyFrom() {\n            this._send(re.copyDone());\n        }\n        sendCopyFail(e) {\n            this._send(re.copyFail(e));\n        }\n    };\n    o(Yn, \"Connection\");\n    var zn = Yn;\n    Ra.exports = zn;\n});\nvar ka = L((Zd, Fa)=>{\n    \"use strict\";\n    p();\n    var Yh = Ue().EventEmitter, Jd = (Et(), Z(vt)), Jh = xt(), Zn = Vs(), Zh = ia(), Xh = en(), el = zt(), Ma = Sa(), tl = bt(), rl = Jn(), Xn = class Xn extends Yh {\n        constructor(e){\n            super(), this.connectionParameters = new el(e), this.user = this.connectionParameters.user, this.database = this.connectionParameters.database, this.port = this.connectionParameters.port, this.host = this.connectionParameters.host, Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: this.connectionParameters.password\n            }), this.replication = this.connectionParameters.replication;\n            var t = e || {};\n            this._Promise = t.Promise || v.Promise, this._types = new Xh(t.types), this._ending = !1, this._connecting = !1, this._connected = !1, this._connectionError = !1, this._queryable = !0, this.connection = t.connection || new rl({\n                stream: t.stream,\n                ssl: this.connectionParameters.ssl,\n                keepAlive: t.keepAlive || !1,\n                keepAliveInitialDelayMillis: t.keepAliveInitialDelayMillis || 0,\n                encoding: this.connectionParameters.client_encoding || \"utf8\"\n            }), this.queryQueue = [], this.binary = t.binary || tl.binary, this.processID = null, this.secretKey = null, this.ssl = this.connectionParameters.ssl || !1, this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this._connectionTimeoutMillis = t.connectionTimeoutMillis || 0;\n        }\n        _errorAllQueries(e) {\n            let t = o((n)=>{\n                w.nextTick(()=>{\n                    n.handleError(e, this.connection);\n                });\n            }, \"enqueueError\");\n            this.activeQuery && (t(this.activeQuery), this.activeQuery = null), this.queryQueue.forEach(t), this.queryQueue.length = 0;\n        }\n        _connect(e) {\n            var t = this, n = this.connection;\n            if (this._connectionCallback = e, this._connecting || this._connected) {\n                let i = new Error(\"Client has already been connected. You cannot reuse a client.\");\n                w.nextTick(()=>{\n                    e(i);\n                });\n                return;\n            }\n            this._connecting = !0, this.connectionTimeoutHandle, this._connectionTimeoutMillis > 0 && (this.connectionTimeoutHandle = setTimeout(()=>{\n                n._ending = !0, n.stream.destroy(new Error(\"timeout expired\"));\n            }, this._connectionTimeoutMillis)), this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                t.ssl ? n.requestSsl() : n.startup(t.getStartupConf());\n            }), n.on(\"sslconnect\", function() {\n                n.startup(t.getStartupConf());\n            }), this._attachListeners(n), n.once(\"end\", ()=>{\n                let i = this._ending ? new Error(\"Connection terminated\") : new Error(\"Connection terminated unexpectedly\");\n                clearTimeout(this.connectionTimeoutHandle), this._errorAllQueries(i), this._ending || (this._connecting && !this._connectionError ? this._connectionCallback ? this._connectionCallback(i) : this._handleErrorEvent(i) : this._connectionError || this._handleErrorEvent(i)), w.nextTick(()=>{\n                    this.emit(\"end\");\n                });\n            });\n        }\n        connect(e) {\n            if (e) {\n                this._connect(e);\n                return;\n            }\n            return new this._Promise((t, n)=>{\n                this._connect((i)=>{\n                    i ? n(i) : t();\n                });\n            });\n        }\n        _attachListeners(e) {\n            e.on(\"authenticationCleartextPassword\", this._handleAuthCleartextPassword.bind(this)), e.on(\"authenticationMD5Password\", this._handleAuthMD5Password.bind(this)), e.on(\"authenticationSASL\", this._handleAuthSASL.bind(this)), e.on(\"authenticationSASLContinue\", this._handleAuthSASLContinue.bind(this)), e.on(\"authenticationSASLFinal\", this._handleAuthSASLFinal.bind(this)), e.on(\"backendKeyData\", this._handleBackendKeyData.bind(this)), e.on(\"error\", this._handleErrorEvent.bind(this)), e.on(\"errorMessage\", this._handleErrorMessage.bind(this)), e.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)), e.on(\"notice\", this._handleNotice.bind(this)), e.on(\"rowDescription\", this._handleRowDescription.bind(this)), e.on(\"dataRow\", this._handleDataRow.bind(this)), e.on(\"portalSuspended\", this._handlePortalSuspended.bind(this)), e.on(\"emptyQuery\", this._handleEmptyQuery.bind(this)), e.on(\"commandComplete\", this._handleCommandComplete.bind(this)), e.on(\"parseComplete\", this._handleParseComplete.bind(this)), e.on(\"copyInResponse\", this._handleCopyInResponse.bind(this)), e.on(\"copyData\", this._handleCopyData.bind(this)), e.on(\"notification\", this._handleNotification.bind(this));\n        }\n        _checkPgPass(e) {\n            let t = this.connection;\n            typeof this.password == \"function\" ? this._Promise.resolve().then(()=>this.password()).then((n)=>{\n                if (n !== void 0) {\n                    if (typeof n != \"string\") {\n                        t.emit(\"error\", new TypeError(\"Password must be a string\"));\n                        return;\n                    }\n                    this.connectionParameters.password = this.password = n;\n                } else this.connectionParameters.password = this.password = null;\n                e();\n            }).catch((n)=>{\n                t.emit(\"error\", n);\n            }) : this.password !== null ? e() : Zh(this.connectionParameters, (n)=>{\n                n !== void 0 && (this.connectionParameters.password = this.password = n), e();\n            });\n        }\n        _handleAuthCleartextPassword(e) {\n            this._checkPgPass(()=>{\n                this.connection.password(this.password);\n            });\n        }\n        _handleAuthMD5Password(e) {\n            this._checkPgPass(()=>{\n                let t = Jh.postgresMd5PasswordHash(this.user, this.password, e.salt);\n                this.connection.password(t);\n            });\n        }\n        _handleAuthSASL(e) {\n            this._checkPgPass(()=>{\n                this.saslSession = Zn.startSession(e.mechanisms), this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response);\n            });\n        }\n        _handleAuthSASLContinue(e) {\n            Zn.continueSession(this.saslSession, this.password, e.data), this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n        }\n        _handleAuthSASLFinal(e) {\n            Zn.finalizeSession(this.saslSession, e.data), this.saslSession = null;\n        }\n        _handleBackendKeyData(e) {\n            this.processID = e.processID, this.secretKey = e.secretKey;\n        }\n        _handleReadyForQuery(e) {\n            this._connecting && (this._connecting = !1, this._connected = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback && (this._connectionCallback(null, this), this._connectionCallback = null), this.emit(\"connect\"));\n            let { activeQuery: t } = this;\n            this.activeQuery = null, this.readyForQuery = !0, t && t.handleReadyForQuery(this.connection), this._pulseQueryQueue();\n        }\n        _handleErrorWhileConnecting(e) {\n            if (!this._connectionError) {\n                if (this._connectionError = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback) return this._connectionCallback(e);\n                this.emit(\"error\", e);\n            }\n        }\n        _handleErrorEvent(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            this._queryable = !1, this._errorAllQueries(e), this.emit(\"error\", e);\n        }\n        _handleErrorMessage(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            let t = this.activeQuery;\n            if (!t) {\n                this._handleErrorEvent(e);\n                return;\n            }\n            this.activeQuery = null, t.handleError(e, this.connection);\n        }\n        _handleRowDescription(e) {\n            this.activeQuery.handleRowDescription(e);\n        }\n        _handleDataRow(e) {\n            this.activeQuery.handleDataRow(e);\n        }\n        _handlePortalSuspended(e) {\n            this.activeQuery.handlePortalSuspended(this.connection);\n        }\n        _handleEmptyQuery(e) {\n            this.activeQuery.handleEmptyQuery(this.connection);\n        }\n        _handleCommandComplete(e) {\n            this.activeQuery.handleCommandComplete(e, this.connection);\n        }\n        _handleParseComplete(e) {\n            this.activeQuery.name && (this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text);\n        }\n        _handleCopyInResponse(e) {\n            this.activeQuery.handleCopyInResponse(this.connection);\n        }\n        _handleCopyData(e) {\n            this.activeQuery.handleCopyData(e, this.connection);\n        }\n        _handleNotification(e) {\n            this.emit(\"notification\", e);\n        }\n        _handleNotice(e) {\n            this.emit(\"notice\", e);\n        }\n        getStartupConf() {\n            var e = this.connectionParameters, t = {\n                user: e.user,\n                database: e.database\n            }, n = e.application_name || e.fallback_application_name;\n            return n && (t.application_name = n), e.replication && (t.replication = \"\" + e.replication), e.statement_timeout && (t.statement_timeout = String(parseInt(e.statement_timeout, 10))), e.lock_timeout && (t.lock_timeout = String(parseInt(e.lock_timeout, 10))), e.idle_in_transaction_session_timeout && (t.idle_in_transaction_session_timeout = String(parseInt(e.idle_in_transaction_session_timeout, 10))), e.options && (t.options = e.options), t;\n        }\n        cancel(e, t) {\n            if (e.activeQuery === t) {\n                var n = this.connection;\n                this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                    n.cancel(e.processID, e.secretKey);\n                });\n            } else e.queryQueue.indexOf(t) !== -1 && e.queryQueue.splice(e.queryQueue.indexOf(t), 1);\n        }\n        setTypeParser(e, t, n) {\n            return this._types.setTypeParser(e, t, n);\n        }\n        getTypeParser(e, t) {\n            return this._types.getTypeParser(e, t);\n        }\n        escapeIdentifier(e) {\n            return '\"' + e.replace(/\"/g, '\"\"') + '\"';\n        }\n        escapeLiteral(e) {\n            for(var t = !1, n = \"'\", i = 0; i < e.length; i++){\n                var s = e[i];\n                s === \"'\" ? n += s + s : s === \"\\\\\" ? (n += s + s, t = !0) : n += s;\n            }\n            return n += \"'\", t === !0 && (n = \" E\" + n), n;\n        }\n        _pulseQueryQueue() {\n            if (this.readyForQuery === !0) if (this.activeQuery = this.queryQueue.shift(), this.activeQuery) {\n                this.readyForQuery = !1, this.hasExecuted = !0;\n                let e = this.activeQuery.submit(this.connection);\n                e && w.nextTick(()=>{\n                    this.activeQuery.handleError(e, this.connection), this.readyForQuery = !0, this._pulseQueryQueue();\n                });\n            } else this.hasExecuted && (this.activeQuery = null, this.emit(\"drain\"));\n        }\n        query(e, t, n) {\n            var i, s, a, u, c;\n            if (e == null) throw new TypeError(\"Client was passed a null or undefined query\");\n            return typeof e.submit == \"function\" ? (a = e.query_timeout || this.connectionParameters.query_timeout, s = i = e, typeof t == \"function\" && (i.callback = i.callback || t)) : (a = this.connectionParameters.query_timeout, i = new Ma(e, t, n), i.callback || (s = new this._Promise((h, l)=>{\n                i.callback = (f, m)=>f ? l(f) : h(m);\n            }))), a && (c = i.callback, u = setTimeout(()=>{\n                var h = new Error(\"Query read timeout\");\n                w.nextTick(()=>{\n                    i.handleError(h, this.connection);\n                }), c(h), i.callback = ()=>{};\n                var l = this.queryQueue.indexOf(i);\n                l > -1 && this.queryQueue.splice(l, 1), this._pulseQueryQueue();\n            }, a), i.callback = (h, l)=>{\n                clearTimeout(u), c(h, l);\n            }), this.binary && !i.binary && (i.binary = !0), i._result && !i._result._types && (i._result._types = this._types), this._queryable ? this._ending ? (w.nextTick(()=>{\n                i.handleError(new Error(\"Client was closed and is not queryable\"), this.connection);\n            }), s) : (this.queryQueue.push(i), this._pulseQueryQueue(), s) : (w.nextTick(()=>{\n                i.handleError(new Error(\"Client has encountered a connection error and is not queryable\"), this.connection);\n            }), s);\n        }\n        ref() {\n            this.connection.ref();\n        }\n        unref() {\n            this.connection.unref();\n        }\n        end(e) {\n            if (this._ending = !0, !this.connection._connecting) if (e) e();\n            else return this._Promise.resolve();\n            if (this.activeQuery || !this._queryable ? this.connection.stream.destroy() : this.connection.end(), e) this.connection.once(\"end\", e);\n            else return new this._Promise((t)=>{\n                this.connection.once(\"end\", t);\n            });\n        }\n    };\n    o(Xn, \"Client\");\n    var er = Xn;\n    er.Query = Ma;\n    Fa.exports = er;\n});\nvar Oa = L((tp, qa)=>{\n    \"use strict\";\n    p();\n    var nl = Ue().EventEmitter, Na = o(function() {}, \"NOOP\"), Da = o((r, e)=>{\n        let t = r.findIndex(e);\n        return t === -1 ? void 0 : r.splice(t, 1)[0];\n    }, \"removeWhere\"), ri = class ri {\n        constructor(e, t, n){\n            this.client = e, this.idleListener = t, this.timeoutId = n;\n        }\n    };\n    o(ri, \"IdleItem\");\n    var ei = ri, ni = class ni {\n        constructor(e){\n            this.callback = e;\n        }\n    };\n    o(ni, \"PendingItem\");\n    var Je = ni;\n    function il() {\n        throw new Error(\"Release called on client which has already been released to the pool.\");\n    }\n    o(il, \"throwOnDoubleRelease\");\n    function tr(r, e) {\n        if (e) return {\n            callback: e,\n            result: void 0\n        };\n        let t, n, i = o(function(a, u) {\n            a ? t(a) : n(u);\n        }, \"cb\"), s = new r(function(a, u) {\n            n = a, t = u;\n        }).catch((a)=>{\n            throw Error.captureStackTrace(a), a;\n        });\n        return {\n            callback: i,\n            result: s\n        };\n    }\n    o(tr, \"promisify\");\n    function sl(r, e) {\n        return o(function t(n) {\n            n.client = e, e.removeListener(\"error\", t), e.on(\"error\", ()=>{\n                r.log(\"additional client error after disconnection due to error\", n);\n            }), r._remove(e), r.emit(\"error\", n, e);\n        }, \"idleListener\");\n    }\n    o(sl, \"makeIdleListener\");\n    var ii = class ii extends nl {\n        constructor(e, t){\n            super(), this.options = Object.assign({}, e), e != null && \"password\" in e && Object.defineProperty(this.options, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: e.password\n            }), e != null && e.ssl && e.ssl.key && Object.defineProperty(this.options.ssl, \"key\", {\n                enumerable: !1\n            }), this.options.max = this.options.max || this.options.poolSize || 10, this.options.maxUses = this.options.maxUses || 1 / 0, this.options.allowExitOnIdle = this.options.allowExitOnIdle || !1, this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0, this.log = this.options.log || function() {}, this.Client = this.options.Client || t || rr().Client, this.Promise = this.options.Promise || v.Promise, typeof this.options.idleTimeoutMillis > \"u\" && (this.options.idleTimeoutMillis = 1e4), this._clients = [], this._idle = [], this._expired = new WeakSet, this._pendingQueue = [], this._endCallback = void 0, this.ending = !1, this.ended = !1;\n        }\n        _isFull() {\n            return this._clients.length >= this.options.max;\n        }\n        _pulseQueue() {\n            if (this.log(\"pulse queue\"), this.ended) {\n                this.log(\"pulse queue ended\");\n                return;\n            }\n            if (this.ending) {\n                this.log(\"pulse queue on ending\"), this._idle.length && this._idle.slice().map((t)=>{\n                    this._remove(t.client);\n                }), this._clients.length || (this.ended = !0, this._endCallback());\n                return;\n            }\n            if (!this._pendingQueue.length) {\n                this.log(\"no queued requests\");\n                return;\n            }\n            if (!this._idle.length && this._isFull()) return;\n            let e = this._pendingQueue.shift();\n            if (this._idle.length) {\n                let t = this._idle.pop();\n                clearTimeout(t.timeoutId);\n                let n = t.client;\n                n.ref && n.ref();\n                let i = t.idleListener;\n                return this._acquireClient(n, e, i, !1);\n            }\n            if (!this._isFull()) return this.newClient(e);\n            throw new Error(\"unexpected condition\");\n        }\n        _remove(e) {\n            let t = Da(this._idle, (n)=>n.client === e);\n            t !== void 0 && clearTimeout(t.timeoutId), this._clients = this._clients.filter((n)=>n !== e), e.end(), this.emit(\"remove\", e);\n        }\n        connect(e) {\n            if (this.ending) {\n                let i = new Error(\"Cannot use a pool after calling end on the pool\");\n                return e ? e(i) : this.Promise.reject(i);\n            }\n            let t = tr(this.Promise, e), n = t.result;\n            if (this._isFull() || this._idle.length) {\n                if (this._idle.length && w.nextTick(()=>this._pulseQueue()), !this.options.connectionTimeoutMillis) return this._pendingQueue.push(new Je(t.callback)), n;\n                let i = o((u, c, h)=>{\n                    clearTimeout(a), t.callback(u, c, h);\n                }, \"queueCallback\"), s = new Je(i), a = setTimeout(()=>{\n                    Da(this._pendingQueue, (u)=>u.callback === i), s.timedOut = !0, t.callback(new Error(\"timeout exceeded when trying to connect\"));\n                }, this.options.connectionTimeoutMillis);\n                return this._pendingQueue.push(s), n;\n            }\n            return this.newClient(new Je(t.callback)), n;\n        }\n        newClient(e) {\n            let t = new this.Client(this.options);\n            this._clients.push(t);\n            let n = sl(this, t);\n            this.log(\"checking client timeout\");\n            let i, s = !1;\n            this.options.connectionTimeoutMillis && (i = setTimeout(()=>{\n                this.log(\"ending client due to timeout\"), s = !0, t.connection ? t.connection.stream.destroy() : t.end();\n            }, this.options.connectionTimeoutMillis)), this.log(\"connecting new client\"), t.connect((a)=>{\n                if (i && clearTimeout(i), t.on(\"error\", n), a) this.log(\"client failed to connect\", a), this._clients = this._clients.filter((u)=>u !== t), s && (a.message = \"Connection terminated due to connection timeout\"), this._pulseQueue(), e.timedOut || e.callback(a, void 0, Na);\n                else {\n                    if (this.log(\"new client connected\"), this.options.maxLifetimeSeconds !== 0) {\n                        let u = setTimeout(()=>{\n                            this.log(\"ending client due to expired lifetime\"), this._expired.add(t), this._idle.findIndex((h)=>h.client === t) !== -1 && this._acquireClient(t, new Je((h, l, f)=>f()), n, !1);\n                        }, this.options.maxLifetimeSeconds * 1e3);\n                        u.unref(), t.once(\"end\", ()=>clearTimeout(u));\n                    }\n                    return this._acquireClient(t, e, n, !0);\n                }\n            });\n        }\n        _acquireClient(e, t, n, i) {\n            i && this.emit(\"connect\", e), this.emit(\"acquire\", e), e.release = this._releaseOnce(e, n), e.removeListener(\"error\", n), t.timedOut ? i && this.options.verify ? this.options.verify(e, e.release) : e.release() : i && this.options.verify ? this.options.verify(e, (s)=>{\n                if (s) return e.release(s), t.callback(s, void 0, Na);\n                t.callback(void 0, e, e.release);\n            }) : t.callback(void 0, e, e.release);\n        }\n        _releaseOnce(e, t) {\n            let n = !1;\n            return (i)=>{\n                n && il(), n = !0, this._release(e, t, i);\n            };\n        }\n        _release(e, t, n) {\n            if (e.on(\"error\", t), e._poolUseCount = (e._poolUseCount || 0) + 1, this.emit(\"release\", n, e), n || this.ending || !e._queryable || e._ending || e._poolUseCount >= this.options.maxUses) {\n                e._poolUseCount >= this.options.maxUses && this.log(\"remove expended client\"), this._remove(e), this._pulseQueue();\n                return;\n            }\n            if (this._expired.has(e)) {\n                this.log(\"remove expired client\"), this._expired.delete(e), this._remove(e), this._pulseQueue();\n                return;\n            }\n            let s;\n            this.options.idleTimeoutMillis && (s = setTimeout(()=>{\n                this.log(\"remove idle client\"), this._remove(e);\n            }, this.options.idleTimeoutMillis), this.options.allowExitOnIdle && s.unref()), this.options.allowExitOnIdle && e.unref(), this._idle.push(new ei(e, t, s)), this._pulseQueue();\n        }\n        query(e, t, n) {\n            if (typeof e == \"function\") {\n                let s = tr(this.Promise, e);\n                return E(function() {\n                    return s.callback(new Error(\"Passing a function as the first parameter to pool.query is not supported\"));\n                }), s.result;\n            }\n            typeof t == \"function\" && (n = t, t = void 0);\n            let i = tr(this.Promise, n);\n            return n = i.callback, this.connect((s, a)=>{\n                if (s) return n(s);\n                let u = !1, c = o((h)=>{\n                    u || (u = !0, a.release(h), n(h));\n                }, \"onError\");\n                a.once(\"error\", c), this.log(\"dispatching query\");\n                try {\n                    a.query(e, t, (h, l)=>{\n                        if (this.log(\"query dispatched\"), a.removeListener(\"error\", c), !u) return u = !0, a.release(h), h ? n(h) : n(void 0, l);\n                    });\n                } catch (h) {\n                    return a.release(h), n(h);\n                }\n            }), i.result;\n        }\n        end(e) {\n            if (this.log(\"ending\"), this.ending) {\n                let n = new Error(\"Called end on pool more than once\");\n                return e ? e(n) : this.Promise.reject(n);\n            }\n            this.ending = !0;\n            let t = tr(this.Promise, e);\n            return this._endCallback = t.callback, this._pulseQueue(), t.result;\n        }\n        get waitingCount() {\n            return this._pendingQueue.length;\n        }\n        get idleCount() {\n            return this._idle.length;\n        }\n        get expiredCount() {\n            return this._clients.reduce((e, t)=>e + (this._expired.has(t) ? 1 : 0), 0);\n        }\n        get totalCount() {\n            return this._clients.length;\n        }\n    };\n    o(ii, \"Pool\");\n    var ti = ii;\n    qa.exports = ti;\n});\nvar Qa = {};\nye(Qa, {\n    default: ()=>al\n});\nvar al, Ha = ie(()=>{\n    p();\n    al = {};\n});\nvar ja = L((sp, ol)=>{\n    ol.exports = {\n        name: \"pg\",\n        version: \"8.8.0\",\n        description: \"PostgreSQL client - pure javascript & libpq with the same API\",\n        keywords: [\n            \"database\",\n            \"libpq\",\n            \"pg\",\n            \"postgre\",\n            \"postgres\",\n            \"postgresql\",\n            \"rdbms\"\n        ],\n        homepage: \"https://github.com/brianc/node-postgres\",\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/brianc/node-postgres.git\",\n            directory: \"packages/pg\"\n        },\n        author: \"Brian Carlson <brian.m.carlson@gmail.com>\",\n        main: \"./lib\",\n        dependencies: {\n            \"buffer-writer\": \"2.0.0\",\n            \"packet-reader\": \"1.0.0\",\n            \"pg-connection-string\": \"^2.5.0\",\n            \"pg-pool\": \"^3.5.2\",\n            \"pg-protocol\": \"^1.5.0\",\n            \"pg-types\": \"^2.1.0\",\n            pgpass: \"1.x\"\n        },\n        devDependencies: {\n            async: \"2.6.4\",\n            bluebird: \"3.5.2\",\n            co: \"4.6.0\",\n            \"pg-copy-streams\": \"0.3.0\"\n        },\n        peerDependencies: {\n            \"pg-native\": \">=3.0.1\"\n        },\n        peerDependenciesMeta: {\n            \"pg-native\": {\n                optional: !0\n            }\n        },\n        scripts: {\n            test: \"make test-all\"\n        },\n        files: [\n            \"lib\",\n            \"SPONSORS.md\"\n        ],\n        license: \"MIT\",\n        engines: {\n            node: \">= 8.0.0\"\n        },\n        gitHead: \"c99fb2c127ddf8d712500db2c7b9a5491a178655\"\n    };\n});\nvar Wa = L((ap, $a)=>{\n    \"use strict\";\n    p();\n    var Ka = Ue().EventEmitter, ul = (Et(), Z(vt)), si = xt(), Ze = $a.exports = function(r, e, t) {\n        Ka.call(this), r = si.normalizeQueryConfig(r, e, t), this.text = r.text, this.values = r.values, this.name = r.name, this.callback = r.callback, this.state = \"new\", this._arrayMode = r.rowMode === \"array\", this._emitRowEvents = !1, this.on(\"newListener\", (function(n) {\n            n === \"row\" && (this._emitRowEvents = !0);\n        }).bind(this));\n    };\n    ul.inherits(Ze, Ka);\n    var cl = {\n        sqlState: \"code\",\n        statementPosition: \"position\",\n        messagePrimary: \"message\",\n        context: \"where\",\n        schemaName: \"schema\",\n        tableName: \"table\",\n        columnName: \"column\",\n        dataTypeName: \"dataType\",\n        constraintName: \"constraint\",\n        sourceFile: \"file\",\n        sourceLine: \"line\",\n        sourceFunction: \"routine\"\n    };\n    Ze.prototype.handleError = function(r) {\n        var e = this.native.pq.resultErrorFields();\n        if (e) for(var t in e){\n            var n = cl[t] || t;\n            r[n] = e[t];\n        }\n        this.callback ? this.callback(r) : this.emit(\"error\", r), this.state = \"error\";\n    };\n    Ze.prototype.then = function(r, e) {\n        return this._getPromise().then(r, e);\n    };\n    Ze.prototype.catch = function(r) {\n        return this._getPromise().catch(r);\n    };\n    Ze.prototype._getPromise = function() {\n        return this._promise ? this._promise : (this._promise = new Promise((function(r, e) {\n            this._once(\"end\", r), this._once(\"error\", e);\n        }).bind(this)), this._promise);\n    };\n    Ze.prototype.submit = function(r) {\n        this.state = \"running\";\n        var e = this;\n        this.native = r.native, r.native.arrayMode = this._arrayMode;\n        var t = o(function(s, a, u) {\n            if (r.native.arrayMode = !1, E(function() {\n                e.emit(\"_done\");\n            }), s) return e.handleError(s);\n            e._emitRowEvents && (u.length > 1 ? a.forEach((c, h)=>{\n                c.forEach((l)=>{\n                    e.emit(\"row\", l, u[h]);\n                });\n            }) : a.forEach(function(c) {\n                e.emit(\"row\", c, u);\n            })), e.state = \"end\", e.emit(\"end\", u), e.callback && e.callback(null, u);\n        }, \"after\");\n        if (w.domain && (t = w.domain.bind(t)), this.name) {\n            this.name.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", this.name, this.name.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n            var n = (this.values || []).map(si.prepareValue);\n            if (r.namedQueries[this.name]) {\n                if (this.text && r.namedQueries[this.name] !== this.text) {\n                    let s = new Error(`Pre\\\npared statements must be unique - '${this.name}' was used for a different statem\\\nent`);\n                    return t(s);\n                }\n                return r.native.execute(this.name, n, t);\n            }\n            return r.native.prepare(this.name, this.text, n.length, function(s) {\n                return s ? t(s) : (r.namedQueries[e.name] = e.text, e.native.execute(e.name, n, t));\n            });\n        } else if (this.values) {\n            if (!Array.isArray(this.values)) {\n                let s = new Error(\"Query values must be an array\");\n                return t(s);\n            }\n            var i = this.values.map(si.prepareValue);\n            r.native.query(this.text, i, t);\n        } else r.native.query(this.text, t);\n    };\n});\nvar Ya = L((hp, za)=>{\n    \"use strict\";\n    p();\n    var hl = (Ha(), Z(Qa)), ll = en(), cp = ja(), Va = Ue().EventEmitter, fl = (Et(), Z(vt)), dl = zt(), Ga = Wa(), pe = za.exports = function(r) {\n        Va.call(this), r = r || {}, this._Promise = r.Promise || v.Promise, this._types = new ll(r.types), this.native = new hl({\n            types: this._types\n        }), this._queryQueue = [], this._ending = !1, this._connecting = !1, this._connected = !1, this._queryable = !0;\n        var e = this.connectionParameters = new dl(r);\n        this.user = e.user, Object.defineProperty(this, \"password\", {\n            configurable: !0,\n            enumerable: !1,\n            writable: !0,\n            value: e.password\n        }), this.database = e.database, this.host = e.host, this.port = e.port, this.namedQueries = {};\n    };\n    pe.Query = Ga;\n    fl.inherits(pe, Va);\n    pe.prototype._errorAllQueries = function(r) {\n        let e = o((t)=>{\n            w.nextTick(()=>{\n                t.native = this.native, t.handleError(r);\n            });\n        }, \"enqueueError\");\n        this._hasActiveQuery() && (e(this._activeQuery), this._activeQuery = null), this._queryQueue.forEach(e), this._queryQueue.length = 0;\n    };\n    pe.prototype._connect = function(r) {\n        var e = this;\n        if (this._connecting) {\n            w.nextTick(()=>r(new Error(\"Client has already been connected. You cannot reuse a client.\")));\n            return;\n        }\n        this._connecting = !0, this.connectionParameters.getLibpqConnectionString(function(t, n) {\n            if (t) return r(t);\n            e.native.connect(n, function(i) {\n                if (i) return e.native.end(), r(i);\n                e._connected = !0, e.native.on(\"error\", function(s) {\n                    e._queryable = !1, e._errorAllQueries(s), e.emit(\"error\", s);\n                }), e.native.on(\"notification\", function(s) {\n                    e.emit(\"notification\", {\n                        channel: s.relname,\n                        payload: s.extra\n                    });\n                }), e.emit(\"connect\"), e._pulseQueryQueue(!0), r();\n            });\n        });\n    };\n    pe.prototype.connect = function(r) {\n        if (r) {\n            this._connect(r);\n            return;\n        }\n        return new this._Promise((e, t)=>{\n            this._connect((n)=>{\n                n ? t(n) : e();\n            });\n        });\n    };\n    pe.prototype.query = function(r, e, t) {\n        var n, i, s, a, u;\n        if (r == null) throw new TypeError(\"Client was passed a null or undefined query\");\n        if (typeof r.submit == \"function\") s = r.query_timeout || this.connectionParameters.query_timeout, i = n = r, typeof e == \"function\" && (r.callback = e);\n        else if (s = this.connectionParameters.query_timeout, n = new Ga(r, e, t), !n.callback) {\n            let c, h;\n            i = new this._Promise((l, f)=>{\n                c = l, h = f;\n            }), n.callback = (l, f)=>l ? h(l) : c(f);\n        }\n        return s && (u = n.callback, a = setTimeout(()=>{\n            var c = new Error(\"Query read timeout\");\n            w.nextTick(()=>{\n                n.handleError(c, this.connection);\n            }), u(c), n.callback = ()=>{};\n            var h = this._queryQueue.indexOf(n);\n            h > -1 && this._queryQueue.splice(h, 1), this._pulseQueryQueue();\n        }, s), n.callback = (c, h)=>{\n            clearTimeout(a), u(c, h);\n        }), this._queryable ? this._ending ? (n.native = this.native, w.nextTick(()=>{\n            n.handleError(new Error(\"Client was closed and is not queryable\"));\n        }), i) : (this._queryQueue.push(n), this._pulseQueryQueue(), i) : (n.native = this.native, w.nextTick(()=>{\n            n.handleError(new Error(\"Client has encountered a connection error and is not queryable\"));\n        }), i);\n    };\n    pe.prototype.end = function(r) {\n        var e = this;\n        this._ending = !0, this._connected || this.once(\"connect\", this.end.bind(this, r));\n        var t;\n        return r || (t = new this._Promise(function(n, i) {\n            r = o((s)=>s ? i(s) : n(), \"cb\");\n        })), this.native.end(function() {\n            e._errorAllQueries(new Error(\"Connection terminated\")), w.nextTick(()=>{\n                e.emit(\"end\"), r && r();\n            });\n        }), t;\n    };\n    pe.prototype._hasActiveQuery = function() {\n        return this._activeQuery && this._activeQuery.state !== \"error\" && this._activeQuery.state !== \"end\";\n    };\n    pe.prototype._pulseQueryQueue = function(r) {\n        if (this._connected && !this._hasActiveQuery()) {\n            var e = this._queryQueue.shift();\n            if (!e) {\n                r || this.emit(\"drain\");\n                return;\n            }\n            this._activeQuery = e, e.submit(this);\n            var t = this;\n            e.once(\"_done\", function() {\n                t._pulseQueryQueue();\n            });\n        }\n    };\n    pe.prototype.cancel = function(r) {\n        this._activeQuery === r ? this.native.cancel(function() {}) : this._queryQueue.indexOf(r) !== -1 && this._queryQueue.splice(this._queryQueue.indexOf(r), 1);\n    };\n    pe.prototype.ref = function() {};\n    pe.prototype.unref = function() {};\n    pe.prototype.setTypeParser = function(r, e, t) {\n        return this._types.setTypeParser(r, e, t);\n    };\n    pe.prototype.getTypeParser = function(r, e) {\n        return this._types.getTypeParser(r, e);\n    };\n});\nvar ai = L((dp, Ja)=>{\n    \"use strict\";\n    p();\n    Ja.exports = Ya();\n});\nvar rr = L((yp, _t)=>{\n    \"use strict\";\n    p();\n    var pl = ka(), yl = bt(), wl = Jn(), ml = Oa(), { DatabaseError: gl } = Gn(), Sl = o((r)=>{\n        var e;\n        return e = class extends ml {\n            constructor(n){\n                super(n, r);\n            }\n        }, o(e, \"BoundPool\"), e;\n    }, \"poolFactory\"), oi = o(function(r) {\n        this.defaults = yl, this.Client = r, this.Query = this.Client.Query, this.Pool = Sl(this.Client), this._pools = [], this.Connection = wl, this.types = St(), this.DatabaseError = gl;\n    }, \"PG\");\n    typeof w.env.NODE_PG_FORCE_NATIVE < \"u\" ? _t.exports = new oi(ai()) : (_t.exports = new oi(pl), Object.defineProperty(_t.exports, \"native\", {\n        configurable: !0,\n        enumerable: !1,\n        get () {\n            var r = null;\n            try {\n                r = new oi(ai());\n            } catch (e) {\n                if (e.code !== \"MODULE_NOT_FOUND\") throw e;\n            }\n            return Object.defineProperty(_t.exports, \"native\", {\n                value: r\n            }), r;\n        }\n    }));\n});\nvar xl = {};\nye(xl, {\n    Client: ()=>nr,\n    ClientBase: ()=>de.ClientBase,\n    Connection: ()=>de.Connection,\n    DatabaseError: ()=>de.DatabaseError,\n    Pool: ()=>ui,\n    Query: ()=>de.Query,\n    defaults: ()=>de.defaults,\n    neon: ()=>Kt,\n    neonConfig: ()=>Le,\n    types: ()=>de.types\n});\nmodule.exports = Z(xl);\np();\np();\nwr();\nqt();\nvar Hs = et(xt());\nvar Qr = class Qr extends Error {\n    constructor(){\n        super(...arguments);\n        g(this, \"code\", null);\n        g(this, \"name\", \"NeonDbError\");\n    }\n};\no(Qr, \"NeonDbError\");\nvar At = Qr;\nfunction Kt(r, { arrayMode: e, fullResults: t, queryCallback: n, resultCallback: i } = {}) {\n    let s = yr(r), { protocol: a, username: u, password: c, hostname: h, pathname: l } = s;\n    if (a !== \"postgres:\" && a !== \"postgresql:\" || !h || !u || !c || !l) throw new Error(\"Database connection string format should be: postgres://user:password@host.tld/dbname?option=value\");\n    return async function(f, ...m) {\n        let x = e, C = t, I;\n        if (typeof f == \"string\") {\n            I = f;\n            let b = m[1];\n            b !== void 0 && (b.arrayMode !== void 0 && (x = b.arrayMode), b.fullResults !== void 0 && (C = b.fullResults)), m = m[0] ?? [];\n        } else {\n            I = \"\";\n            for(let b = 0; b < f.length; b++)I += f[b], b < m.length && (I += \"$\" + (b + 1));\n        }\n        m = m.map((b)=>(0, Hs.prepareValue)(b));\n        let T, P;\n        try {\n            let b = `https://${h}/sql`, A = Le.fetchConnectionCache === !0 ? {\n                \"Neon-Pool-Opt-In\": \"true\"\n            } : {};\n            T = {\n                query: I,\n                params: m\n            }, n && n(T), P = await fetch(b, {\n                body: JSON.stringify(T),\n                method: \"POST\",\n                headers: {\n                    \"Neon-Connection-String\": r,\n                    \"Neon-Raw-Text-Output\": \"true\",\n                    \"Neon-Array-Mode\": \"true\",\n                    ...A\n                }\n            });\n        } catch (b) {\n            throw new At(`Error connecting to d\\\natabase: ${b.message}`);\n        }\n        if (P.ok) {\n            let b = await P.json(), A = b.fields.map((F)=>F.name), j = b.fields.map((F)=>de.types.getTypeParser(F.dataTypeID)), K = x === !0 ? b.rows.map((F)=>F.map((q, k)=>q === null ? null : j[k](q))) : b.rows.map((F)=>Object.fromEntries(F.map((q, k)=>[\n                        A[k],\n                        q === null ? null : j[k](q)\n                    ])));\n            return i && i(T, b, K, {\n                arrayMode: x,\n                fullResults: C\n            }), C ? (b.viaNeonFetch = !0, b.rowAsArray = x, b.rows = K, b) : K;\n        } else {\n            let { status: b } = P;\n            if (b === 400) {\n                let { message: A, code: j } = await P.json(), K = new At(A);\n                throw K.code = j, K;\n            } else {\n                let A = await P.text();\n                throw new At(`Database error (HTTP status ${b}): ${A}`);\n            }\n        }\n    };\n}\no(Kt, \"neon\");\nvar ir = et(rr());\nqt();\nvar Za = et(zt()), de = et(rr());\nvar ci = class ci extends ir.Client {\n    get neonConfig() {\n        return this.connection.stream;\n    }\n    connect(e) {\n        let { neonConfig: t } = this;\n        t.forceDisablePgSSL && (this.ssl = this.connection.ssl = !1), this.ssl && t.useSecureWebSocket && console.warn(\"SSL is enabled for both Postgres (e.g. ?sslmode=require in the connection string + forceDisablePgSSL = false) and the WebSocket tunnel (useSecureWebSocket = true). Double encryption will increase latency and CPU usage. It may be appropriate to disable SSL in the Postgres connection parameters or set forceDisablePgSSL = true.\"), this.host === \"localhost\" && console.warn(\"The database host is 'localhost', which is the default host when none is set. If that's intentional, please ignore this warning. If not, perhaps an environment variable has not been set, or has not been passed to the library?\");\n        let n = super.connect(e), i = t.pipelineTLS && this.ssl, s = t.pipelineConnect === \"password\";\n        if (!i && !t.pipelineConnect) return n;\n        let a = this.connection;\n        if (i && a.on(\"connect\", ()=>a.stream.emit(\"data\", \"S\")), s) {\n            a.removeAllListeners(\"authenticationCleartextPassword\"), a.removeAllListeners(\"readyForQuery\"), a.once(\"readyForQuery\", ()=>a.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)));\n            let u = this.ssl ? \"sslconnect\" : \"connect\";\n            a.on(u, ()=>{\n                this._handleAuthCleartextPassword(), this._handleReadyForQuery();\n            });\n        }\n        return n;\n    }\n    async _handleAuthSASLContinue(e) {\n        let t = this.saslSession, n = this.password, i = e.data;\n        if (t.message !== \"SASLInitialResponse\" || typeof n != \"string\" || typeof i != \"string\") throw new Error(\"SASL: protocol error\");\n        let s = Object.fromEntries(i.split(\",\").map((Y)=>{\n            if (!/^.=/.test(Y)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let ee = Y[0], O = Y.substring(2);\n            return [\n                ee,\n                O\n            ];\n        })), a = s.r, u = s.s, c = s.i;\n        if (!a || !/^[!-+--~]+$/.test(a)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing/unprintable\");\n        if (!u || !/^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(u)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing/not base64\");\n        if (!c || !/^[1-9][0-9]*$/.test(c)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: missing/invalid iteration count\");\n        if (!a.startsWith(t.clientNonce)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        if (a.length === t.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        let h = parseInt(c, 10), l = y.from(u, \"base64\"), f = new TextEncoder, m = f.encode(n), x = await S.subtle.importKey(\"raw\", m, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), C = new Uint8Array(await S.subtle.sign(\"HMAC\", x, y.concat([\n            l,\n            y.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ]))), I = C;\n        for(var T = 0; T < h - 1; T++)C = new Uint8Array(await S.subtle.sign(\"HMAC\", x, C)), I = y.from(I.map((Y, ee)=>I[ee] ^ C[ee]));\n        let P = I, b = await S.subtle.importKey(\"raw\", P, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), A = new Uint8Array(await S.subtle.sign(\"HMAC\", b, f.encode(\"Client Key\"))), j = await S.subtle.digest(\"SHA-256\", A), K = \"n=*,r=\" + t.clientNonce, F = \"r=\" + a + \",s=\" + u + \",i=\" + h, q = \"c=biws,r=\" + a, k = K + \",\" + F + \",\" + q, he = await S.subtle.importKey(\"raw\", j, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var R = new Uint8Array(await S.subtle.sign(\"HMAC\", he, f.encode(k))), $ = y.from(A.map((Y, ee)=>A[ee] ^ R[ee])), W = $.toString(\"base64\");\n        let V = await S.subtle.importKey(\"raw\", P, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), z = await S.subtle.sign(\"HMAC\", V, f.encode(\"Server Key\")), J = await S.subtle.importKey(\"raw\", z, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var D = y.from(await S.subtle.sign(\"HMAC\", J, f.encode(k)));\n        t.message = \"SASLResponse\", t.serverSignature = D.toString(\"base64\"), t.response = q + \",p=\" + W, this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n    }\n};\no(ci, \"NeonClient\");\nvar nr = ci;\nfunction bl(r, e) {\n    if (e) return {\n        callback: e,\n        result: void 0\n    };\n    let t, n, i = o(function(a, u) {\n        a ? t(a) : n(u);\n    }, \"cb\"), s = new r(function(a, u) {\n        n = a, t = u;\n    });\n    return {\n        callback: i,\n        result: s\n    };\n}\no(bl, \"promisify\");\nvar hi = class hi extends ir.Pool {\n    constructor(){\n        super(...arguments);\n        g(this, \"Client\", nr);\n        g(this, \"hasFetchUnsupportedListeners\", !1);\n    }\n    on(t, n) {\n        return t !== \"error\" && (this.hasFetchUnsupportedListeners = !0), super.on(t, n);\n    }\n    query(t, n, i) {\n        if (!Le.poolQueryViaFetch || this.hasFetchUnsupportedListeners || typeof t == \"function\") return super.query(t, n, i);\n        typeof n == \"function\" && (i = n, n = void 0);\n        let s = bl(this.Promise, i);\n        i = s.callback;\n        try {\n            let a = new Za.default(this.options), u = encodeURIComponent, c = encodeURI, h = `postgresql://${u(a.user)}:${u(a.password)}@${u(a.host)}/${c(a.database)}`, l = typeof t == \"string\" ? t : t.text, f = n ?? t.values ?? [];\n            Kt(h, {\n                fullResults: !0,\n                arrayMode: t.rowMode === \"array\"\n            })(l, f).then((x)=>i(void 0, x)).catch((x)=>i(x));\n        } catch (a) {\n            i(a);\n        }\n        return s.result;\n    }\n};\no(hi, \"NeonPool\");\nvar ui = hi; /*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@neondatabase+serverless@0.4.26/node_modules/@neondatabase/serverless/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@neondatabase+serverless@0.4.26/node_modules/@neondatabase/serverless/index.mjs":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@neondatabase+serverless@0.4.26/node_modules/@neondatabase/serverless/index.mjs ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   ClientBase: () => (/* binding */ ClientBase),\n/* harmony export */   Connection: () => (/* binding */ Connection),\n/* harmony export */   DatabaseError: () => (/* binding */ DatabaseError),\n/* harmony export */   Pool: () => (/* binding */ Pool),\n/* harmony export */   Query: () => (/* binding */ Query),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   neon: () => (/* binding */ neon),\n/* harmony export */   neonConfig: () => (/* binding */ neonConfig),\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"(rsc)/./node_modules/.pnpm/@neondatabase+serverless@0.4.26/node_modules/@neondatabase/serverless/index.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_index_js__WEBPACK_IMPORTED_MODULE_0__);\nconst Client = _index_js__WEBPACK_IMPORTED_MODULE_0__.Client;\nconst ClientBase = _index_js__WEBPACK_IMPORTED_MODULE_0__.ClientBase;\nconst Connection = _index_js__WEBPACK_IMPORTED_MODULE_0__.Connection;\nconst DatabaseError = _index_js__WEBPACK_IMPORTED_MODULE_0__.DatabaseError;\nconst Pool = _index_js__WEBPACK_IMPORTED_MODULE_0__.Pool;\nconst Query = _index_js__WEBPACK_IMPORTED_MODULE_0__.Query;\nconst defaults = _index_js__WEBPACK_IMPORTED_MODULE_0__.defaults;\nconst neon = _index_js__WEBPACK_IMPORTED_MODULE_0__.neon;\nconst neonConfig = _index_js__WEBPACK_IMPORTED_MODULE_0__.neonConfig;\nconst types = _index_js__WEBPACK_IMPORTED_MODULE_0__.types;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lb25kYXRhYmFzZStzZXJ2ZXJsZXNzQDAuNC4yNi9ub2RlX21vZHVsZXMvQG5lb25kYXRhYmFzZS9zZXJ2ZXJsZXNzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFFN0IsaUVBQWVBLHNDQUFHQSxFQUFDO0FBQ1osTUFBTUMsU0FBU0QsNkNBQVUsQ0FBQztBQUMxQixNQUFNRSxhQUFhRixpREFBYyxDQUFDO0FBQ2xDLE1BQU1HLGFBQWFILGlEQUFjLENBQUM7QUFDbEMsTUFBTUksZ0JBQWdCSixvREFBaUIsQ0FBQztBQUN4QyxNQUFNSyxPQUFPTCwyQ0FBUSxDQUFDO0FBQ3RCLE1BQU1NLFFBQVFOLDRDQUFTLENBQUM7QUFDeEIsTUFBTU8sV0FBV1AsK0NBQVksQ0FBQztBQUM5QixNQUFNUSxPQUFPUiwyQ0FBUSxDQUFDO0FBQ3RCLE1BQU1TLGFBQWFULGlEQUFjLENBQUM7QUFDbEMsTUFBTVUsUUFBUVYsNENBQVMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2tleS1tYW5hZ2VtZW50LXN5c3RlbS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbmVvbmRhdGFiYXNlK3NlcnZlcmxlc3NAMC40LjI2L25vZGVfbW9kdWxlcy9AbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MvaW5kZXgubWpzP2RlN2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBtb2Q7XG5leHBvcnQgY29uc3QgQ2xpZW50ID0gbW9kLkNsaWVudDtcbmV4cG9ydCBjb25zdCBDbGllbnRCYXNlID0gbW9kLkNsaWVudEJhc2U7XG5leHBvcnQgY29uc3QgQ29ubmVjdGlvbiA9IG1vZC5Db25uZWN0aW9uO1xuZXhwb3J0IGNvbnN0IERhdGFiYXNlRXJyb3IgPSBtb2QuRGF0YWJhc2VFcnJvcjtcbmV4cG9ydCBjb25zdCBQb29sID0gbW9kLlBvb2w7XG5leHBvcnQgY29uc3QgUXVlcnkgPSBtb2QuUXVlcnk7XG5leHBvcnQgY29uc3QgZGVmYXVsdHMgPSBtb2QuZGVmYXVsdHM7XG5leHBvcnQgY29uc3QgbmVvbiA9IG1vZC5uZW9uO1xuZXhwb3J0IGNvbnN0IG5lb25Db25maWcgPSBtb2QubmVvbkNvbmZpZztcbmV4cG9ydCBjb25zdCB0eXBlcyA9IG1vZC50eXBlcztcbiJdLCJuYW1lcyI6WyJtb2QiLCJDbGllbnQiLCJDbGllbnRCYXNlIiwiQ29ubmVjdGlvbiIsIkRhdGFiYXNlRXJyb3IiLCJQb29sIiwiUXVlcnkiLCJkZWZhdWx0cyIsIm5lb24iLCJuZW9uQ29uZmlnIiwidHlwZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@neondatabase+serverless@0.4.26/node_modules/@neondatabase/serverless/index.mjs\n");

/***/ })

};
;